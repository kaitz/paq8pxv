// Model for 8 bit image data

// StateMapContext  SMC
// APM1 APM1
// APM2 APM2 //not used
// RunContextMap RCM
// SmallStationaryContextMap  SCM
// MContextMap MCM
// ContextMap CM
// Mixer MX
// SMC,APM1,APM2,RCM,SCM,MCM,CM,MX (1,2,3,4,5,6,7,8,9)
enum {SMC=1,APM1,APM2,RCM,SCM,MCM,CM,MX,MC};
int  pW,pN,pNW,pNE,pWW,pNN,pNNE,pNWW,pNNW,pNWWW,pNNWW,pNWNW,pGw,pGn,pDh,pDv,pWWW,pWWWW;
int pGv,pGh,HBB1,HBB2;
int w,col,w4;
int itype;
int id8;
int id9;
int ml,ml1,blpos;
// X is predicted pixel
// NNWWW NNWW NNW NN NNE
//  NWWW  NWW  NW  N  NE
//   WWW   WW   W  X 
int mpw(int x) {
    if (x<2) return 4;
    if (x==2) return 3;
    if (x>=3 && x<=5) return 2;
    if (x>=6 && x<=11) return 1;
    if (x>=12 && x<=15) return 0;
    //{ 4, 4, 3, 2, 2, 2, 1, 1,  1, 1, 1, 1, 0, 0, 0, 0 };
}
int sqrbuf(int i) {
    return buf(i)*buf(i);
} 
	int min(int a, int b) {return a<b?a:b;}
	int max(int a, int b) {return a<b?b:a;} 
// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pos){ 
    int i,logvar,var,mean,  c1, cw;
    int pr0,pr,errr,errrp;
    int pNW2,pN2,pW2,pN1,pW1;
    
    c1= buf(1); 
    if (bpos==0){ 
        cw= buf(w); 
        pWWW= buf(3);
        pWWWW= buf(4);
        w4= w4*4+mpw(c1>>4);
        pW= buf(1); 
        pN=buf(w-1); 
        pNW=buf(w); 
        pNE=buf(w-2); 
        pWW=buf(2); 
        pNN=buf(w*2-1); 
        pNNE=buf(w*2-2); 
        pNWW=buf(w+1); 
        pNNW=buf(w*3); 
        pNWWW=buf(w*2+2); 
        pNNWW=buf(w*2+1); 
        pNWNW=pN+pW-pNW; 
        pGw=2*pN-pNN; 
        pGn=2*pW-pWW; 
        pDh=(abs(pW-pWW)+abs(pN-pNW)+abs(pN-pNE)); 
        pDv=(abs(pW-pNW)+abs(pN-pNN)+abs(pNE-pNNE)); 
        pNW2=pNW>>2;
        pN2=pN>>2;
        pW2=pW>>2;
        pN1=pN>>1;
        pW1=pW>>1;
		
		pGv =(abs(pNW-pW)+ abs(pNN-pN));
		pGh= (abs(pWW-pW)+ abs(pNW-pN));
		HBB1= pW+pN-pNW  ;
		HBB2= (pNW+pW)>>1;
        mean=pW+pN+pNW+pNWW;
        var=(sqrbuf(1)+sqrbuf(w-1)+sqrbuf(w)+sqrbuf(w+1)-mean*mean/4)>>2;
        mean=mean>>2;
        logvar=ilog(var);
        i=0;
        blpos++;
        errr=(pWW +pNWW -pNW );
        errrp=abs(errr-pNWNW );
        if(errrp>255)id8++; 
        else id9++;
        //if ( blpos==0) id8=id9=1,itype=0;    // reset on new block
        if( blpos%w==0 &&  blpos>w) itype=(id9/id8)<4; // select model
        
        if (itype==0){ //faster, for smooth images
            
            vmx(MCM, 0,h3(++i, pW ,0));
            vmx(MCM, 0,h3(++i, pN ,0));
            vmx(MCM, 0,h3(++i, pNE ,0));
            vmx(MCM, 0,h3(++i, pWW ,0));
            vmx(MCM, 0,h3(++i, pNN ,0));
            vmx(MCM, 0,h3(++i, pNWNW ,pW ));
            vmx(MCM, 0,h3(++i, pNWW ,0));
            vmx(MCM, 0,h3(++i, pNNE ,0));
			vmx(MCM, 0,h3(++i, HBB1,0)); //
			vmx(MCM, 0,h3(++i, HBB2,0)); //
            vmx(MCM, 0,h3(++i, pGw ,pW ));
            
            vmx(MCM, 0,h3(++i, pGn ,pW ));
            vmx(MCM, 0,h3(++i, pDh ,pW ));
            vmx(MCM, 0,h3(++i, pDv ,pW ));
			vmx(MCM, 0,h3(++i, pGv,pW)); //
			vmx(MCM, 0,h3(++i, pGh,pW)); //
			vmx(MCM, 0,h3(++i, pGv,pN)); //
			vmx(MCM, 0,h3(++i, pGh,pN)); //
            vmx(MCM, 0,h3(++i, errrp,pW ));
            
            vmx(MCM, 0,h3(++i,mean,logvar));
            vmx(MCM, 0,h3(++i,pGn ,pGw ));
            vmx(MCM, 0,h3(++i,pDh , pDv ));
			vmx(MCM, 0,h3(++i,pGv, pGh)); //
			
			vmx(MCM, 0,h3(++i,abs(min(pW,min( pN, pNW)) + max(pW,max(pN,pNW)) -pNW),0)); //
			
            vmx(MCM, 0,h3(++i, pW2, pNW2));
            vmx(MCM, 0,h3(++i, pW2, pN2));
            vmx(MCM, 0,h3(++i, pNW2, buf(w*2)>>2));
            vmx(MCM, 0,h3(++i, pW2, pN2));
            vmx(MCM, 0,h3(++i, pNW2, pNWW>>2));
            vmx(MCM, 0,h3(++i, pNWW>>2, buf(w+2)>>2));
            vmx(MCM, 0,h2(++i, (pNWW+pNNE)>>1));
            vmx(MCM, 0,h2(++i, (pN+pNNE)>>1));
            
            vmx(MCM, 0,h3(++i, pGw ,pN ));
            
            vmx(MCM, 0,h3(++i, pGn ,pN ));
            vmx(MCM, 0,h4(++i, pNN ,pNE ,pW ));
            vmx(MCM, 0,h2(++i, (pW+pNW)>>1));
            vmx(MCM, 0,h2(++i, (pW+pN)>>1));
            vmx(MCM, 0,h2(++i, (pNW+buf(w*2))>>1));
            vmx(MCM, 0,h2(++i, (pW+pN)>>1));
            vmx(MCM, 0,h2(++i, (pNW+pNWW)>>1));
            vmx(MCM, 0,h2(++i, (pNWW+buf(w+2))>>1));
            vmx(MCM, 0,h2(++i, (pNWW+pNNE)>>1));
            //vmx(MCM, 0,h2(++i, (pN+pNNE)>>1));
            vmx(MCM, 0,h4(++i, pNNE ,pN ,pW ));
            vmx(MCM, 0,h5(++i, pNWW ,pN ,pNE ,pW));
            vmx(MCM, 0,h4(++i, pGn ,pNE ,pNNE ));
            vmx(MCM, 0,h5(++i, pWW ,pNWW ,pNW ,pN));
            vmx(MCM, 0,h4(++i,pNNW , pNW ,pW ));
            vmx(MCM, 0,h4(++i, pNW2, pWWW>>2, pN2));
            vmx(MCM, 0,h4(++i, pWWW>>2, pNE>>2, pNNE>>2));
            
            vmx(MCM, 0,h4(++i, pNW2, pW2, pN2));
            vmx(MCM, 0,h4(++i, pN2, pNW2, pNWW>>2));
            vmx(MCM, 0,h4(++i, pW2, pN2, pNN>>2));
        }
        // 2 x
        else
        {  
            i=512;
            vmx(MCM, 0,h3(++i, pW,0));
            vmx(MCM, 0,h3(++i, pN, 0));
            vmx(MCM, 0,h3(++i, pNW, 0));
            vmx(MCM, 0,h3(++i, pNWW, 0));
            vmx(MCM, 0,h3(++i, pN, 0));
			vmx(MCM, 0,h3(++i, HBB1,0)); // //
			vmx(MCM, 0,h3(++i, HBB2,0));
			vmx(MCM, 0,h3(++i, pGv,pW));
			vmx(MCM, 0,h3(++i, pGh,pW));
			vmx(MCM, 0,h3(++i, pGv,pN));
			vmx(MCM, 0,h3(++i, pGh,pN));
			vmx(MCM, 0,h3(++i,pGv, pGh));
			vmx(MCM, 0,h3(++i,abs(min(pW,min( pN, pNW)) + max(pW,max(pN,pNW)) -pNW),0));			
            vmx(MCM, 0,h3(++i, (pN+pNW-pNWW), 0));
            vmx(MCM, 0,h3(++i,(pNW+(pN-pNWW)>>1), 0));
            vmx(MCM, 0,h3(++i, (pN+pNWW)>>1, 0));
            vmx(MCM, 0,h3(++i, (pN-pNW), pW1));
            vmx(MCM, 0,h3(++i,(pNW-pNWW), pW1));
            vmx(MCM, 0,h3(++i, (pNWW+pN), pW1));
            
            vmx(MCM, 0,h3(++i, pW2, pNW2));
            vmx(MCM, 0,h3(++i, pW2, pN2));
            vmx(MCM, 0,h3(++i, pNW2, buf(w*2)>>2));
            vmx(MCM, 0,h3(++i, pW2, pN2));
            vmx(MCM, 0,h3(++i, pNW2, pNWW>>2));
            vmx(MCM, 0,h3(++i, pNWW>>2, buf(w+2)>>2));
            vmx(MCM, 0,h3(++i, pNWW>>2, pNNE>>2));
            vmx(MCM, 0,h3(++i, pN2, pNNE>>2));
            vmx(MCM, 0,h2(++i, pW+pNW>>1));
            vmx(MCM, 0,h2(++i, pW+pN1));
            vmx(MCM, 0,h2(++i, pNW+buf(w*2)>>1));
            vmx(MCM, 0,h2(++i, pW+pN1));
            vmx(MCM, 0,h2(++i, pNW+pNWW>>1));
            vmx(MCM, 0,h2(++i, pNWW+buf(w+2)>>1));
            vmx(MCM, 0,h2(++i, pNWW+pNNE>>1));
            vmx(MCM, 0,h2(++i, pN+pNNE>>1));
            // 3 x
            vmx(MCM, 0,h4(++i, pNW2, pW2, pN2));
            vmx(MCM, 0,h4(++i, pN2, pNW2, pNWW>>2));
            vmx(MCM, 0,h4(++i, pW2, pN2, pNN>>2));
            // mixed
            vmx(MCM, 0,h4(++i, pWWW+pNW>>1, pW2, pN2));
            vmx(MCM, 0,h4(++i, pN+pW1,pNW+buf(w*2)>>1,pN2));
            vmx(MCM, 0,h3(++i, pN+pW2,pN+pNW2));
            vmx(MCM, 0,h3(++i, pN+pW1,pNW+buf(w*2)>>1));
            vmx(MCM, 0,h3(++i, pN+pW1,pN+pNNE>>1));
            vmx(MCM, 0,h3(++i, pN+pW1,pNWW+pNNE>>1));
            vmx(MCM, 0,h3(++i, pNW+buf(w*2)>>1,pN+pNNE>>1));
            vmx(MCM, 0,h3(++i, pN+pNW>>1,pNW+pNWW>>1));
            vmx(MCM, 0,h3(++i, pW+pN1,pNW+buf(w*2)>>1));
            vmx(MCM, 0,h3(++i, pW+pN2,pNW+pNWW>>2));
            vmx(MCM, 0,h2(++i, (pW-pN1)+pNW2));
            vmx(MCM, 0,h2(++i, (pN-pNW>>1)+pW2));
            vmx(MCM, 0,h2(++i, -pW+pN+pNW2));
            
            vmx(MCM, 0,h2(++i,(pW*2-pN)>>1));
            vmx(MCM, 0,h3(++i,mean,logvar));
            vmx(MCM, 0,h2(++i,(pNW*2-buf(w*2))>>1));
            vmx(MCM, 0,h2(++i,(pW+pNW-pNWW)>>1));
            
            vmx(MCM, 0,h3(++i, (pWWWW+pWWW)>>2,(pN+pNW)>>2));
            vmx(MCM, 0,h3(++i, (pWWWW+pWWW)>>1,(pNW+buf(w*2))>>1));
            vmx(MCM, 0,h3(++i, (pWWWW+pWWW)>>1,(pN+pNNE)>>1));
            vmx(MCM, 0,h3(++i, (pWWWW+pWWW)>>1,(pNWW+pNNE)>>1));
            vmx(MCM, 0,h3(++i, (pWWWW+pW)>>2,(buf(w-3)+pNW)>>2));
            vmx(MCM, 0,h3(++i, (pWWWW+pW)>>1,(pNW+buf(w*2))>>1));
            vmx(MCM, 0,h3(++i, (pWWWW+pW)>>1,(buf(w-3)+buf(w*2-3))>>1));
            vmx(MCM, 0,h3(++i, (pWWWW+pW)>>1,(buf(w+3)+buf(w*2+3))>>1));
            vmx(MCM, 0,h4(++i, pNW2, pWWW>>2, pN2));
            vmx(MCM, 0,h4(++i, pWWW>>2, pNE>>2, pNNE>>2));
        }
        
        vmx(SCM,0,(pW+pNW)>>1);
        vmx(SCM,1,(pW+pNW-pNWW)>>1);
        vmx(SCM,2,(pW*2-pN)>>1);
        vmx(SCM,3,(pNW*2-buf(w*2))>>1);
        vmx(SCM,4,(pW+pNW-pN)>>1);
        ml1=((errrp>255)<<10);
        ml=(mean>>1)|((logvar<<1)&0x180);
        vmx(SCM,5,ml);
        
    }
    mxa(0,256);//add to mixer(0)
    mxc(0); //mix components into mixer(0)
    if (++col>=8) col=0; // reset after every 24 columns?
    mxs(0,2, 8);
    mxs(0,col, 8);
    mxs(0,(pNW+pW)>>4, 32);
    mxs(0, c0, 256);
     mxs(0,ml, 512);
     mxs(0,pDv |ml1, 2048);
    // 8+8+32+256+512+1792+256
    //mxs(0,w4&0xff, 256);
    mxs(0, gcr(0,0,MC),256); //get match result and set as mixer(0) context
    
    pr0=mxp(0); //predict mixer(0)
    pr =apm(0,pr0,c0,7);
    return (apm(2,pr, c0+256*c1,7)+apm(1,pr0, h2(c0,w4&0xfffff),7)+1)>>1;
}
//VM calls this after every image block
void block(int a,int b) { 
    w=a; //get block info, image width
    blpos=0;
	id8=id9=1,itype=0; 
}
// main is called only once after VM init.
int main() { 
    //SMC,APM1,APM2,RCM,SCM,MCM,CM,MX,MC (1,2,3,4,5,6,7,8,9)
    vms( 0,3,0,0,6,1,0,1,1); 
    vmi(MCM,0,16,57+8,0); 
    vmi(MC,0,1,4096,0);//match(0), mem*1, maxlen 4096, mixer(0)
    vmi(SCM,0,16,0,0);
    vmi(SCM,1,16,0,0);
    vmi(SCM,2,16,0,0);
    vmi(SCM,3,16,0,0);
    vmi(SCM,4,16,0,0);
    vmi(SCM,5,16,0,0);  
    vmi(APM1,0,256,0,-1);
    vmi(APM1,1,0x10000,0,-1);
    vmi(APM1,2,0x10000,0,-1);
    vmi(MX,0,59*7+6*2+8*2+18,3368,7);// mixer(0), 104 inputs, context size 848, context sets 6
    col=ml=ml1=itype=blpos=pDv=pW=pNW=0;
    id8=id9=1;
    
}
