// Model for 8 bit image data

enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM};
int  pW,pN,pNW,pNE,pWW,pNN,pNNE,pNWW,pNNW,pNWWW,pNNWW,pNWNW,pGw,pGn,pDh,pDv,pWWW,pWWWW;
int pGv,pGh,HBB1,HBB2;
int w,col,w4,Misses;
int itype;
int id8,id9;
int ml,ml1,blpos,c1,bufpos;
// X is predicted pixel
// NNWWW NNWW NNW NN NNE
//  NWWW  NWW  NW  N  NE
//   WWW   WW   W  X 
il[65536]={};
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int mpw[16]={4,4,3,2,2,2,1,1,1,1,1,1,0,0,0,0};
int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int sqrbuf(int i) {
    return buf(i)*buf(i);
} 
int min(int a, int b) {return a<b?a:b;}
int max(int a, int b) {return a<b?b:a;}
int abs(int x){
        if (x>=0) return x;
        else return (0-x);
}
// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pr){
    int i,logvar,var,mean, cw;
    int errr,errrp;
    int pNW2,pN2,pW2,pN1,pW1;

    if (bpos==0){ 
    buffer[bufpos]=c4&0xff;
        bufpos++;
        bufpos=bufpos&BMASK;
        c1= buf(1);
        cw= buf(w);
        pWWW= buf(3);
        pWWWW= buf(4);
        w4= w4*4+mpw[c1>>4];
        pW= buf(1);
        pN=buf(w-1);
        pNW=buf(w);
        pNE=buf(w-2);
        pWW=buf(2);
        pNN=buf(w*2-1);
        pNNE=buf(w*2-2);
        pNWW=buf(w+1);
        pNNW=buf(w*3);
        pNWWW=buf(w*2+2);
        pNNWW=buf(w*2+1);
        pNWNW=pN+pW-pNW;
        pGw=2*pN-pNN;
        pGn=2*pW-pWW;
        pDh=(abs(pW-pWW)+abs(pN-pNW)+abs(pN-pNE));
        pDv=(abs(pW-pNW)+abs(pN-pNN)+abs(pNE-pNNE));
        pNW2=pNW>>2;
        pN2=pN>>2;
        pW2=pW>>2;
        pN1=pN>>1;
        pW1=pW>>1;

        pGv =(abs(pNW-pW)+ abs(pNN-pN));
        pGh= (abs(pWW-pW)+ abs(pNW-pN));
        HBB1= pW+pN-pNW;
        HBB2= (pNW+pW)>>1;
        mean=pW+pN+pNW+pNWW;
        var=(sqrbuf(1)+sqrbuf(w-1)+sqrbuf(w)+sqrbuf(w+1)-mean*mean/4)>>2;
        mean=mean>>2;
        logvar=il[var];
        i=0;
        blpos++;
        errr=(pWW +pNWW -pNW );
        errrp=abs(errr-pNWNW );
        if(errrp>255)id8++; 
        else id9++;
        //if ( blpos==0) id8=id9=1,itype=0;    // reset on new block
        if( blpos%w==0 &&  blpos>w) itype=(id9/id8)<4; // select model

        if (itype==0){ //faster, for smooth images
            vmx(CM, 0,h2(pW ,0));
            vmx(CM, 0,h2(pN ,0));
            vmx(CM, 0,h2(pNE ,0));
            vmx(CM, 0,h2(pWW ,0));
            vmx(CM, 0,h2(pNN ,0));
            vmx(CM, 0,h2(pNWNW ,pW));
            vmx(CM, 0,h2(pNWW ,0));
            vmx(CM, 0,h2(pNNE ,0));
            vmx(CM, 0,h2(HBB1,0));
            vmx(CM, 0,h2(HBB2,0));
            vmx(CM, 0,h2(pGw ,pW));

            vmx(CM, 0,h2(pGn ,pW));
            vmx(CM, 0,h2(pDh ,pW));
            vmx(CM, 0,h2(pDv ,pW));
            vmx(CM, 0,h2(pGv,pW));
            vmx(CM, 0,h2(pGh,pW));
            vmx(CM, 0,h2(pGv,pN));
            vmx(CM, 0,h2(pGh,pN));
            vmx(CM, 0,h2(errrp,pW ));
            
            vmx(CM, 0,h2(mean,logvar));
            vmx(CM, 0,h2(pGn ,pGw));
            vmx(CM, 0,h2(pDh , pDv));
            vmx(CM, 0,h2(pGv, pGh));

            vmx(CM, 0,h2(abs(min(pW,min( pN, pNW)) + max(pW,max(pN,pNW)) -pNW),0));

            vmx(CM, 0,h2(pW2, pNW2));
            vmx(CM, 0,h2(pW2, pN2));
            vmx(CM, 0,h2(pNW2, buf(w*2)>>2));
            vmx(CM, 0,h2(pW2, pN2));
            vmx(CM, 0,h2(pNW2, pNWW>>2));
            vmx(CM, 0,h2(pNWW>>2, buf(w+2)>>2));
            vmx(CM, 0,h2(++i, (pNWW+pNNE)>>1));
            vmx(CM, 0,h2(++i, (pN+pNNE)>>1));

            vmx(CM, 0,h2(pGw ,pN ));

            vmx(CM, 0,h2(pGn ,pN ));
            vmx(CM, 0,h2(h2( pNN ,pNE ),pW ));
            vmx(CM, 0,h2(++i, (pW+pNW)>>1));
            vmx(CM, 0,h2(++i, (pW+pN)>>1));
            vmx(CM, 0,h2(++i, (pNW+buf(w*2))>>1));
            vmx(CM, 0,h2(++i, (pW+pN)>>1));
            vmx(CM, 0,h2(++i, (pNW+pNWW)>>1));
            vmx(CM, 0,h2(++i, (pNWW+buf(w+2))>>1));
            vmx(CM, 0,h2(++i, (pNWW+pNNE)>>1));
            //vmx(CM, 0,h2(++i, (pN+pNNE)>>1));
            vmx(CM, 0,h2(h2(pNNE ,pN ),pW ));
            vmx(CM, 0,h2(h2(pNWW ,pN) ,h2(pNE ,pW)));
            vmx(CM, 0,h2(h2(pGn ,pNE) ,pNNE ));
            vmx(CM, 0,h2(h2(pWW ,pNWW ),h2(pNW ,pN)));
            vmx(CM, 0,h2(h2(pNNW , pNW) ,pW ));
            vmx(CM, 0,h2(h2(pNW2, pWWW>>2), pN2));
            vmx(CM, 0,h2(h2(pWWW>>2, pNE>>2), pNNE>>2));
            
            vmx(CM, 0,h2(h2(pNW2, pW2), pN2));
            vmx(CM, 0,h2(h2(pN2, pNW2), pNWW>>2));
            vmx(CM, 0,h2(h2(pW2, pN2), pNN>>2));
        }
        // 2 x
        else {
            i=512;
            vmx(CM, 0,h2(pW,0));
            vmx(CM, 0,h2(pN, 0));
            vmx(CM, 0,h2(pNW, 0));
            vmx(CM, 0,h2(pNWW, 0));
            vmx(CM, 0,h2(pN, 0));
            vmx(CM, 0,h2(HBB1,0));
            vmx(CM, 0,h2(HBB2,0));
            vmx(CM, 0,h2(pGv,pW));
            vmx(CM, 0,h2(pGh,pW));
            vmx(CM, 0,h2(pGv,pN));
            vmx(CM, 0,h2(pGh,pN));
            vmx(CM, 0,h2(pGv, pGh));
            vmx(CM, 0,h2(abs(min(pW,min( pN, pNW)) + max(pW,max(pN,pNW)) -pNW),0));
            vmx(CM, 0,h2((pN+pNW-pNWW), 0));
            vmx(CM, 0,h2((pNW+(pN-pNWW)>>1), 0));
            vmx(CM, 0,h2((pN+pNWW)>>1, 0));
            vmx(CM, 0,h2((pN-pNW), pW1));
            vmx(CM, 0,h2((pNW-pNWW), pW1));
            vmx(CM, 0,h2((pNWW+pN), pW1));

            vmx(CM, 0,h2(pW2, pNW2));
            vmx(CM, 0,h2(pW2, pN2));
            vmx(CM, 0,h2(pNW2, buf(w*2)>>2));
            vmx(CM, 0,h2(pW2, pN2));
            vmx(CM, 0,h2(pNW2, pNWW>>2));
            vmx(CM, 0,h2(pNWW>>2, buf(w+2)>>2));
            vmx(CM, 0,h2(pNWW>>2, pNNE>>2));
            vmx(CM, 0,h2(pN2, pNNE>>2));
            vmx(CM, 0,h2(++i, pW+pNW>>1));
            vmx(CM, 0,h2(++i, pW+pN1));
            vmx(CM, 0,h2(++i, pNW+buf(w*2)>>1));
            vmx(CM, 0,h2(++i, pW+pN1));
            vmx(CM, 0,h2(++i, pNW+pNWW>>1));
            vmx(CM, 0,h2(++i, pNWW+buf(w+2)>>1));
            vmx(CM, 0,h2(++i, pNWW+pNNE>>1));
            vmx(CM, 0,h2(++i, pN+pNNE>>1));
            // 3 x
            vmx(CM, 0,h2(h2(pNW2, pW2), pN2));
            vmx(CM, 0,h2(h2(pN2, pNW2), pNWW>>2));
            vmx(CM, 0,h2(h2(pW2, pN2), pNN>>2));
            // mixed
            vmx(CM, 0,h2(h2(pWWW+pNW>>1, pW2), pN2));
            vmx(CM, 0,h2(h2(pN+pW1,pNW+buf(w*2)>>1),pN2));
            vmx(CM, 0,h2(pN+pW2,pN+pNW2));
            vmx(CM, 0,h2(pN+pW1,pNW+buf(w*2)>>1));
            vmx(CM, 0,h2(pN+pW1,pN+pNNE>>1));
            vmx(CM, 0,h2(pN+pW1,pNWW+pNNE>>1));
            vmx(CM, 0,h2(pNW+buf(w*2)>>1,pN+pNNE>>1));
            vmx(CM, 0,h2(pN+pNW>>1,pNW+pNWW>>1));
            vmx(CM, 0,h2(pW+pN1,pNW+buf(w*2)>>1));
            vmx(CM, 0,h2(pW+pN2,pNW+pNWW>>2));
            vmx(CM, 0,h2(++i, (pW-pN1)+pNW2));
            vmx(CM, 0,h2(++i, (pN-pNW>>1)+pW2));

            vmx(CM, 0,h2(++i, (pN+pNW2-pW)));
            
            vmx(CM, 0,h2(++i,(pW*2-pN)>>1));
            vmx(CM, 0,h2(mean,logvar));
            vmx(CM, 0,h2(++i,(pNW*2-buf(w*2))>>1));
            vmx(CM, 0,h2(++i,(pW+pNW-pNWW)>>1));
            
            vmx(CM, 0,h2((pWWWW+pWWW)>>2,(pN+pNW)>>2));
            vmx(CM, 0,h2((pWWWW+pWWW)>>1,(pNW+buf(w*2))>>1));
            vmx(CM, 0,h2((pWWWW+pWWW)>>1,(pN+pNNE)>>1));
            vmx(CM, 0,h2((pWWWW+pWWW)>>1,(pNWW+pNNE)>>1));
            vmx(CM, 0,h2((pWWWW+pW)>>2,(buf(w-3)+pNW)>>2));
            vmx(CM, 0,h2((pWWWW+pW)>>1,(pNW+buf(w*2))>>1));
            vmx(CM, 0,h2((pWWWW+pW)>>1,(buf(w-3)+buf(w*2-3))>>1));
            vmx(CM, 0,h2((pWWWW+pW)>>1,(buf(w+3)+buf(w*2+3))>>1));
            vmx(CM, 0,h2(h2(pNW2, pWWW>>2), pN2));
            vmx(CM, 0,h2(h2(pWWW>>2, pNE>>2), pNNE>>2));
        }
        vmx(SCM,0,(pW+pNW)>>1);
        vmx(SCM,1,(pW+pNW-pNWW)>>1);
        vmx(SCM,2,(pW*2-pN)>>1);
        vmx(SCM,3,(pNW*2-buf(w*2))>>1);
        vmx(SCM,4,(pW+pNW-pN)>>1);
        ml1=((errrp>255)<<10);
        ml=(mean>>1)|((logvar<<1)&0x180);
        vmx(SCM,5,ml);
    }
    if (++col>=8) col=0;
    vmx(MX,0,2);
    vmx(MX,0,col);
    vmx(MX,0,(pNW+pW)>>4);
    vmx(MX,0, c0);
    vmx(MX,0,ml);
    vmx(MX,0,pDv |ml1);
    vmx(SMC,0,c0); 
    vmx(SMC,1,c0|(c1<<8)); 
    Misses=(Misses<<1)|((pr>>11)!=y);
    vmx(APM1,0,(c0<<4)|(Misses&0xF));
    vmx(APM1,1,h2(c0,w4&0xfffff));
    vmx(APM1,2,c0+256*c1);
    return 0;
}
//VM calls this after every image block
void block(int a,int b) { 
    w=a; //get block info, image width
    blpos=0;
	id8=id9=1,itype=0; 
}
// main is called only once after VM init.
int main() { 
int x,i;
    //SMC,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM
    vms( 2,3,0,1,6,0,1,1,1,0);
    vmi(ST,0,144,0,0);
    vmi(CM,0,16,57+8,0); 
    vmi(SMC,0,0x100,1023,0);
    vmi(SMC,1,0x10000,1023,0);
    vmi(SCM,0,16,0,0);
    vmi(SCM,1,16,0,0);
    vmi(SCM,2,16,0,0);
    vmi(SCM,3,16,0,0);
    vmi(SCM,4,16,0,0);
    vmi(SCM,5,16,0,0);
    vmi(MX,0,65*6+6*2+8*2+2,2864,6);// mixer(0), 104 inputs, context size 848, context sets 6
    mxs(0, 8);
    mxs(0, 8);
    mxs(0, 32);
    mxs(0, 256);
    mxs(0, 512);
    mxs(0, 2048);
    vmi(APM1,0,0x1000,7,0);//1
    vmi(APM1,1,0x10000,7,0);//2
    vmi(APM1,2,0x10000,7,1);//3
    vmi(AVG,0,0,2,3); 
    col=ml=ml1=itype=blpos=pDv=pW=pNW=Misses=bufpos=c1=0;
    id8=id9=1;
     x=14155776;
  for ( i=2; i<65536; ++i) {
    x=(x+(774541002/((i<<1)-1)))&0x7FFFFFFF;  // numerator is 2^29/ln 2
    il[i]=x>>24;
  } 
}
