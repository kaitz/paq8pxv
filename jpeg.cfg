// Model for JPEG
// Only the baseline and 8 bit extended Huffman coded DCT modes are
// supported. The model partially decodes the JPEG image to provide
// context for the Huffman coded symbols.
//
enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM};
int N; // N number of contexts
int il[65536]={};
int t[8]={};
  // context hash -> bit history
  // As a cache optimization, the context does not include the last 1-2
  // bits of huffcode if the length (huffbits) is not a multiple of 3.
  // The 7 mapped values are for context+{"", 0, 00, 01, 1, 10, 11}.
int c1,c2,c3;
int Misses;
int m_e[14]={158, 1733, 2163, 1547, 749, 240, 354, 565, 925, 1687, 714, 796, 36, 55};
int m_s[14]={126, 14, 60, 4, 61, 67, 67, 68, 9, 250, 126, 15, 25, 7};
int m_m[14]={16, 27, 29, 24, 21, 17, 19, 45, 24, 24, 35, 19, 27, 4};
int m_sm[25]={};

int zzu[64]={  // zigzag coef -> u,v
  0,1,0,0,1,2,3,2,1,0,0,1,2,3,4,5,4,3,2,1,0,0,1,2,3,4,5,6,7,6,5,4,
  3,2,1,0,1,2,3,4,5,6,7,7,6,5,4,3,2,3,4,5,6,7,7,6,5,4,5,6,7,7,6,7};
int zzv[64]={
  0,0,1,2,1,0,0,1,2,3,4,3,2,1,0,0,1,2,3,4,5,6,5,4,3,2,1,0,0,1,2,3,
  4,5,6,7,7,6,5,4,3,2,1,2,3,4,5,6,7,7,6,5,4,3,4,5,6,7,7,6,5,6,7,7};
   int jstate,hc2,comp ;
   // State of parser
   int jpeg;  // 1 if JPEG is detected
   int next_jpeg;  // updated with jpeg on next byte boundary
   int app;  // Bytes remaining to skip in APPx or COM field
   int sof, sos, data;  // pointers to buf
   int ht[8]={};  // pointers to Huffman table headers
   int htsize;  // number of pointers in ht

   // Huffman decode state
   int huffcode;  // Current Huffman code including extra bits
   int huffbits;  // Number of valid bits in huffcode
   int huffsize;  // Number of bits without extra bits
   int rs;  // Decoded huffcode without extra bits.  It represents
  // 2 packed 4-bit numbers, r=run of zeros, s=number of extra bits for
  // first nonzero code.  huffcode is complete when rs >= 0.
  // rs is -1 prior to decoding incomplete huffcode.
   int mcupos;  // position in MCU (0-639).  The low 6 bits mark
  // the coefficient in zigzag scan order (0=DC, 1-63=AC).  The high
  // bits mark the block within the MCU, used to select Huffman tables.

   // Decoding tables
   // Tc*64+Th*16+m -> min, max, val
   int hufmin[128]={};
   int hufmax[128]={};
   int hufval[128]={};
   int mcusize;  // number of coefficients in an MCU
  // int linesize; // width of image in MCU
   int hufsel1[10]={}; // DC/AC, mcupos/64 -> huf decode table
   int hufsel2[10]={};
   // Image state
   int color[10]={};  // block -> component (0-3)
   int pred[4]={};;  // component -> last DC value
   int dc;  // DC value of the current block
   int width;  // Image width in MCU
   int row, column;  // in MCU (column 0 to width-1)
   char cbuf[0x20000]={}; // Rotating buffer of coefficients, coded as:
  // DC: level shifted absolute value, low 4 bits discarded, i.e.
  //   [-1023...1024] -> [0...255].
  // AC: as an RS code: a run of R (0-15) zeros followed by an S (0-15)
  //   bit number, or 00 for end of block (in zigzag order).
  //   However if R=0, then the format is ssss11xx where ssss is S,
  //   xx is the first 2 extra bits, and the last 2 bits are 1 (since
  //   this never occurs in a valid RS code).
   int cpos;  // position in cbuf
   //int huff1, huff2, huff3, huff4;  // hashes of last codes
   int rs1=-1;//, rs2, rs3, rs4;  // last 4 RS codes
   int ssum, ssum1, ssum2, ssum3;//, ssum4;
  // sum of S in RS codes in block and last 4 values
  // Context model
  int hbcount=2;
  int cxt[38]={};// context hashes
  
   int cbuf2[0x20000]={};
   int adv_pred[4]={},run_pred[6]={},adv_pred1[4]={};
  //for parsing Quantization tables
   int dqt_state= -1, dqt_end, qnum; 
   char qtab[256]={};// table
   int qmap[10]={};// block -> table number
   int hbuf[2048]={};
   int  zz , acomp , q , cpos_dc ,st,zz2,tq;
   int sumu[8]={}, sumv[8]={};
   int ls[10]={};  // block -> distance to previous block
   int lcp[7]={}, zpos[64]={};
   int blockW[10]={}, blockN[10]={},SamplingFactors[4]={};
   
   int zu, zv,a,b;
   int kk,prev_coef_rs,prev_coef,prev_coef2,rstpos,rstlen;
   int prev1,prev2,cnt1,cnt2;
   int miss,pr0,pos;
   
   char buffer[0x4000000]={};
   enum {BMASK=0x3FFFFFF};
   int bufpos,ccount;
   int  y1,w,h,c,xd,norst,offset_DC_W,offset_DC_N;

int min(int a, int b) {return a<b?a:b;}
int max(int a, int b) {return a<b?b:a;} 
int abs(int x){
    if (x>=0) return x;
    else return (0-x);
}
int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int bufr(int i){
    return buffer[(i)&BMASK];
}
// Detect invalid JPEG data.  The proper response is to silently
// fall back to a non-JPEG model.
void jassert(int x,int x2) {
  if (!(x))  jpeg=0;//,   printf("JPEG error at %d\n",x2); 
//  jpeg=0; \
//  return next_jpeg;
}

enum {SOF0=0xc0, SOF1, SOF2, SOF3, DHT, RST0=0xd0, SOI=0xd8, EOI, SOS, DQT,
  DNL, DRI, APP0=0xe0, COM=0xfe, FF};  // Second byte of 2 byte codes
}
int BitCount(int v) {
  v  =v- ((v >> 1) & 0x55555555);
  v = ((v >> 2) & 0x33333333) + (v & 0x33333333);
  v = ((v >> 4) + v) & 0x0f0f0f0f;
  v = ((v >> 8) + v) & 0x00ff00ff;
  v = ((v >> 16) + v) & 0x0000ffff;
  return v;
}
// ilog2
// returns floor(log2(x)), e.g. 30->4  31->4  32->5,  33->5
int ilog2(int x) {
  //copy the leading "1" bit to its left (0x03000000 -> 0x03ffffff)
  x =x | (x >> 1);
  x =x | (x >> 2);
  x =x | (x >> 4);
  x =x | (x >> 8);
  x =x | (x >>16);
  //how many trailing bits do we have (except the first)? 
  return BitCount(x >> 1);
}
int hash5(int a, int b, int c , int d, int e) {
  int h;
  h=a*200002979+b*30005491+c*50004239+d*70004807+e*110002499;
  return h^h>>9^a>>2^b>>3^c>>4^d>>5^e>>6;
}
int hash4(int a, int b, int c , int d) {
  int h;
  h=a*200002979+b*30005491+c*50004239+d*70004807;//+e*110002499u;
  return h^h>>9^a>>2^b>>3^c>>4^d>>5;
}
int hash3(int a, int b, int c) {
  int h;
  h=a*110002499+b*30005491+c*50004239; //+d*70004807u+e*110002499u;
  return h^h>>9^a>>3^b>>3^c>>4;
}
int jpegModel(int bpos,int y) {
  int i, j;
  int len,ac, sel;//,height;
  int p,end,count,tc,val;
  int code, th, hufi, ns;
  int nf,hmax, hv,x,r;
  int s,hc,coef;
  int  tttt,cpos_dc_ls_acomp, cpos_dc_mcusize_width,huc;
  
  // Be sure to quit on a byte boundary
  if (!bpos) next_jpeg=jpeg>1;
  if (bpos && !jpeg) return next_jpeg;
  if (!bpos && app>0) --app;
  if (app>0) return next_jpeg;
  if (!bpos) {

  // Detect JPEG (SOI, APPx)
  if (!jpeg && buf(4)==FF && buf(3)==SOI && buf(2)==FF && buf(1)>>4==0xe) {
    jpeg=1;
    app=sos=sof=htsize=data=mcusize=0;
    huffcode=huffbits=huffsize=mcupos=cpos=0, rs=-1;
    for (i=0;i<128;i++) hufmin[i]=0;
    for (i=0;i<128;i++) hufmax[i]=0;
    for (i=0;i<128;i++) hufval[i]=0;
    for (i=0;i<4;i++) pred[i]=0;
    prev1=0,prev2=0,cnt1=0,cnt2=0;
    prev_coef=0,prev_coef2=0;
    rstpos=rstlen=ccount=0;
  }

  // Detect end of JPEG when data contains a marker other than RSTx
  // or byte stuff (00).
  if (jpeg && data && buf(2)==FF && buf(1) && (buf(1)&0xf8)!=RST0) {
    jassert(buf(1)==EOI,1);
    jpeg=0;
  }
  if (!jpeg) return next_jpeg;

  // Detect APPx or COM field
  if (!data && !app && buf(4)==FF && (buf(3)>>4==0xe || buf(3)==COM))
    app=buf(2)*256+buf(1)+2;

  // Save pointers to sof, ht, sos, data,
  if (buf(5)==FF && buf(4)==SOS) {
     len=buf(3)*256+buf(2);
    if (len==6+2*buf(1) && buf(1) && buf(1)<=4)  // buf(1) is Ns
    {sos=pos-5, data=sos+len+2, jpeg=2;}
  }
  if (buf(4)==FF && buf(3)==DHT && htsize<8) ht[htsize++]=pos-4;
  if (buf(4)==FF && buf(3)==SOF0) sof=pos-4;
  
  // Parse Quantizazion tables
  if (buf(4)==FF && buf(3)==DQT) {
    dqt_end = pos + buf(2)*256 + buf(1) - 1;
    dqt_state = 0;
  } else if (dqt_state >=0) {
    if (pos >= dqt_end) {
    dqt_state = -1;
    } else {
    if (dqt_state % 65 == 0) {
      qnum = buf(1);
    } else {
      jassert(buf(1) > 0,29);
      jassert(qnum>=0 && qnum<4,30);
      qtab[qnum * 64 + ((dqt_state % 65) - 1)] = buf(1) - 1;
          //printf("%d %d, ",qnum * 64 + ((dqt_state % 65) - 1),buf(1) - 1);
    }
    dqt_state++;
    }
  }
  // Restart
  if (buf(2)==FF && (buf(1)&0xf8)==RST0) {
    huffcode=huffbits=huffsize=mcupos=0, rs=-1;
    for (i=0;i<4;i++) pred[i]=0;
    rstlen=column+row*width-rstpos;
      rstpos=column+row*width;
  }
  }

  {
  // Build Huffman tables
  // huf[Tc][Th][m] = min, max+1 codes of length m, pointer to byte values
  if (pos==data && bpos==1) {
    jassert(htsize>0,2);
    for ( i=0; i<htsize; ++i) {
     p=ht[i]+4;  // pointer to current table after length field
     end=p+bufr(p-2)*256+bufr(p-1)-2;  // end of Huffman table
     count=0;  // sanity check
     tttt=0;
    while (p<end && end<pos && end<(p+2100) && (++count)<10 || tttt==0) {
       tc=bufr(p)>>4, th=bufr(p)&15;
      if (tc>=2 || th>=4) tttt=1;
      if (tttt==0){
      jassert(tc>=0 && tc<2 && th>=0 && th<4,3);
       hufi=(tc*64+th*16);// [tc][th][0]; 
       val=p+17;  // pointer to values

       code=0;
      for ( j=0; j<16; ++j) {
         jassert( j+hufi<128,1288);
      hufmin[j+hufi]=code;
      code=code+bufr(p+j+1);
      hufmax[j+hufi]=code;
      hufval[j+hufi]=val;
      val=val+bufr(p+j+1);
      code=code<<1;
      }
      p=val;
      }
    }
    
    jassert(p==end,4);
    }
    huffcode=huffbits=huffsize=0, rs=-1;
// load default tables
       
    // Build Huffman table selection table (indexed by mcupos).
    // Get image width.
    if (!sof && sos) return next_jpeg;
     ns=bufr(sos+4);
     nf=bufr(sof+9);
     jassert(ns<=4 && nf<=4,5);
     mcusize=0;  // blocks per MCU
     hmax=0;  // MCU horizontal dimension
    for ( i=0; i<ns; ++i) {
    for ( j=0; j<nf; ++j) {
      if (bufr(sos+2*i+5)==bufr(sof+3*j+10)) { // Cs == C ?
       hv=bufr(sof+3*j+11);  // packed dimensions H x V
       SamplingFactors[j] = hv;
      if (hv>>4>hmax) hmax=hv>>4;
      hv=(hv&15)*(hv>>4);  // number of blocks in component C
      ccount=max(hv,ccount);
      jassert(hv>=1 && hv+mcusize<=10,6);
      while (hv) {
        jassert(mcusize<10,7);
        hufsel1[mcusize]=bufr(sos+2*i+6)>>4&15;
        hufsel2[mcusize]=bufr(sos+2*i+6)&15;
        jassert (hufsel1[mcusize]<4 && hufsel2[mcusize]<4,8);
        color[mcusize]=i;
         tq=bufr(sof+3*j+12);  // quantization table index (0..3)
        jassert(tq>=0 && tq<4,28);
        qmap[mcusize]=tq; // Quantizazion table mapping
        --hv;
        ++mcusize;
      }
      }
    }
    }
    jassert(mcusize<10,99);
    jassert(hmax>=1 && hmax<=10,9);
    for ( j=0; j<mcusize; ++j) {
    ls[j]=0;
    for ( i=1; i<mcusize; ++i) if (color[(j+i)%mcusize]==color[j]) ls[j]=i;
    ls[j]=(mcusize-ls[j])<<6;
    }
    for ( j=0; j<64; ++j) zpos[(zzu[j]+8*zzv[j])&0x3F]=j;
    width=bufr(sof+7)*256+bufr(sof+8);  // in pixels
    //height=bufr(sof+5)*256+bufr(sof+6);
    //printf("JPEG %dx%d ", width, height);
    width=(width-1)/(hmax*8)+1;  // in MCU
    jassert(width>0,10);
    mcusize=mcusize*64;  // coefficients per MCU
    row=column=0;
    // we can have more blocks than components then we have subsampling
        x=0, y1=0;
      for (j = 0; j<(mcusize>>6); j++) {
          i = color[j];
          w = SamplingFactors[i]>>4, h = SamplingFactors[i]&0xf;
        blockW[j] = x==0?mcusize-64*(w-1):64;
        blockN[j] = y1==0?mcusize*width-64*w*(h-1):w*64;
        x++;
        if (x>=w) { x=0; y1++; }
        if (y1>=h) { x=0; y1=0; }
      }
  }
  }

  // Decode Huffman
  {
  if (mcusize && buf(1+(!bpos))!=FF) {  // skip stuffed byte
    jassert(huffbits<=32,11);
    huffcode=(huffcode<<1)|y;
    ++huffbits;
    if (rs<0) {
    jassert(huffbits>=1 && huffbits<=16,12);
      ac=(mcupos&63)>0;
     jassert(mcupos>=0 && (mcupos>>6)<10,13);
    //jassert(ac==0 || ac==1,14);
    if (ac==0)      sel=hufsel1[mcupos>>6];
    else if (ac==1)     sel=hufsel2[mcupos>>6];
    //else printf("error ac");
    //jassert(sel>=0 && sel<4,15);
       i=huffbits-1;
    //jassert(i>=0 && i<16,16);
    hufi=ac*64+sel*16;// [ac][sel];
    //jassert(hufmin[i+hufi]<=hufmax[i+hufi] && hufval[i+hufi]<pos && huffbits>0,1777);
    if (huffcode<hufmax[i+hufi]) {
      //jassert(huffcode>=hufmin[i+hufi],17);
      //rs=hbuf[(hufval[i+hufi]+huffcode-hufmin[i+hufi])];
      rs=bufr(hufval[i+hufi]+huffcode-hufmin[i+hufi]);
      huffsize=huffbits;
    }
    }
    if (rs>=0) {
    if (huffsize+(rs&15)==huffbits) { // done decoding
      rs1=rs;
      x=0;  // decoded extra bits
      if (mcupos&63) {  // AC
      if (rs==0) { // EOB
        mcupos=mcupos+63&-64;
        //jassert(mcupos>=0 && mcupos<=mcusize && mcupos<=640,18);
        while (cpos&63) {
            cbuf2[cpos&0x1FFFF]=0;
            cbuf[cpos&0x1FFFF]=(!rs)?0:(63-(cpos&63))<<4; cpos++; rs++;

        }
      }
      else {  // rs = r zeros + s extra bits for the next nonzero value
          // If first extra bit is 0 then value is negative.
        jassert((rs&15)<=10,19);
        r=rs>>4;
        s=rs&15;
        jassert(mcupos>>6==mcupos+r>>6,20);
        mcupos=mcupos+(r+1);
        x=huffcode&((1<<s)-1);
        if (s && !(x>>s-1)) x=x-((1<<s)-1);
        for ( i=r; i>=1; --i) {
          cbuf2[cpos&0x1FFFF]=0;
          cbuf[(cpos++)&0x1FFFF]=i<<4|s;
        }
          cbuf2[cpos&0x1FFFF]=x;
        cbuf[(cpos++)&0x1FFFF]=(s<<4)|(((huffcode<<2)>>s)&3)|12;;
        ssum=ssum+s;
      }
      }
      else {  // DC: rs = 0S, s<12
      jassert(rs<12,21);
      ++mcupos;
      x=huffcode&((1<<rs)-1);
      if (rs && !(x>>rs-1)) x=x-((1<<rs)-1);
      jassert(mcupos>=0 && mcupos>>6<10,22);
        comp=color[mcupos>>6];
      jassert(comp>=0 && comp<4,23);
      pred[comp]=pred[comp]+x;
      dc=pred[comp];
      jassert((cpos&63)==0,24);
      cbuf2[cpos&0x1FFFF]=dc;
      cbuf[(cpos++)&0x1FFFF]=(dc+1023)>>3;
      if ((mcupos>>6)==0) {
              ssum1=0;
              ssum2=ssum3;
            } else {
              if (color[(mcupos>>6)-1]==color[0]) {ssum3=ssum,ssum1=ssum1+ssum;}
              ssum2=ssum1;
            }
      ssum=rs;
      }
      jassert(mcupos>=0 && mcupos<=mcusize,25);
      if (mcupos>=mcusize) {
      mcupos=0;
      if (++column==width) column=0, ++row;
      }
      huffcode=huffsize=huffbits=0, rs=-1;
      
      // UPDATE_ADV_PRED
      acomp=mcupos>>6, q=64*qmap[acomp];
      zz=mcupos&63, cpos_dc=cpos-zz;
      norst=rstpos!=column+row*width;
      if (zz==0) {
        for ( i=0; i<8; ++i) sumu[i]=sumv[i]=0;
        //cpos_dc_ls_acomp = cpos_dc-ls[acomp];
        //cpos_dc_mcusize_width = cpos_dc-mcusize*width;
        // position in the buffer of first (DC) coefficient of the block
        // of this same component that is to the west of this one, not
        // necessarily in this MCU
        offset_DC_W = cpos_dc - blockW[acomp];
        // position in the buffer of first (DC) coefficient of the block
        // of this same component that is to the north of this one, not
        // necessarily in this MCU
        offset_DC_N = cpos_dc - blockN[acomp];
        for ( i=0; i<64; ++i) {
        sumu[zzu[i]]=sumu[zzu[i]]+(zzv[i]&1?-1:1)*(zzv[i]?16*(16+zzv[i]):185)*(qtab[q+i]+1)*cbuf2[(offset_DC_N+i)&0x1FFFF];
        sumv[zzv[i]]=sumv[zzv[i]]+(zzu[i]&1?-1:1)*(zzu[i]?16*(16+zzu[i]):185)*(qtab[q+i]+1)*cbuf2[(offset_DC_W+i)&0x1FFFF];
        }
      }
      else {
        sumu[zzu[zz-1]]=sumu[zzu[zz-1]]-((zzv[zz-1]?16*(16+zzv[zz-1]):185)*(qtab[q+zz-1]+1)*cbuf2[(cpos-1)&0x1FFFF]);
        sumv[zzv[zz-1]]=sumv[zzv[zz-1]]-((zzu[zz-1]?16*(16+zzu[zz-1]):185)*(qtab[q+zz-1]+1)*cbuf2[(cpos-1)&0x1FFFF]);
      }
      for ( i=0; i<3; ++i){
        run_pred[i]=run_pred[i+3]=0;
        for ( st=0; st<10 && (zz+st)<64; ++st) {
         zz2 = zz+st;
         p=(sumu[zzu[zz2]]*i+sumv[zzv[zz2]]*(2-i));
        p=p/((qtab[q+zz2]+1)*185*(16+zzv[zz2])*(16+zzu[zz2])/128);
        if (zz2==0 && (norst || ls[acomp]==64))  p=p-cbuf2[(cpos_dc-ls[acomp])&0x1FFFF];
         p=(p<0?-1:+1)*il[(abs(p)+1)&0xffff];
        if (st==0) {
          adv_pred[i]=p;
        }
        if (st==1) {
          adv_pred1[i]=p;
        }
        else if (abs(p)>abs(adv_pred[i])+2 && abs(adv_pred[i]) < 210) {
          if (run_pred[i]==0) run_pred[i]=st*2+(p>0);
          if (abs(p)>abs(adv_pred[i])+21 && run_pred[i+3]==0) run_pred[i+3]=st*2+(p>0);
        }
       }
      }
       x=0;
      for ( i=0; i<8; ++i) x=x-((zzu[zz]<i)*sumu[i]+(zzv[zz]<i)*sumv[i]);
      x=(sumu[zzu[zz]]*(2+zzu[zz])+sumv[zzv[zz]]*(2+zzv[zz])-x*2)*4/(zzu[zz]+zzv[zz]+16);
      x=x/((qtab[q+zz]+1)*185);
      if (zz==0 && (norst || ls[acomp]==64)) x=x-cbuf2[(cpos_dc-ls[acomp])&0x1FFFF];
      adv_pred[3]=(x<0?-1:+1)*il[(abs(x)+1)&0xffff]/10;

      for ( i=0; i<4; ++i) {
         a=(i&1?zzv[zz]:zzu[zz]), b=(i&2?2:1);
        if (a<b) x=65535;
        else {
         zz2=zpos[zzu[zz]+8*zzv[zz]-(i&1?8:1)*b];
        x=((qtab[q+zz2]+1)*cbuf2[(cpos_dc+zz2)&0x1FFFF])/(qtab[q+zz]+1);
        x=(x<0?-1:+1)*il[ (abs(x)+1)&0xffff]/10;
        }
        lcp[i]=x;
      }
      if ((zzu[zz]*zzv[zz])!=0){
              zz2=zpos[zzu[zz]+8*zzv[zz]-9];
              x=(qtab[q+zz2]+1)*cbuf2[(cpos_dc+zz2)&0x1FFFF]/(qtab[q+zz]+1);
              lcp[4]=(x<0?-1:+1)*(il[ abs(x)+1]+(x!=0?17:0));

              x=(qtab[q+zpos[8*zzv[zz]]]+1)*cbuf2[(cpos_dc+zpos[8*zzv[zz]])&0x1FFFF]/(qtab[q+zz]+1);
              lcp[5]=(x<0?-1:+1)*(il[ abs(x)+1]+(x!=0?17:0));

              x=(qtab[q+zpos[zzu[zz]]]+1)*cbuf2[(cpos_dc+zpos[zzu[zz]])&0x1FFFF]/(qtab[q+zz]+1);
              lcp[6]=(x<0?-1:+1)*(il[ abs(x)+1]+(x!=0?17:0));
            }
            else
              lcp[4]=lcp[5]=lcp[6]=65535;
        r=s=cnt2=cnt1=prev1=prev2=0;
        prev_coef_rs = cbuf[(cpos-64)&0x1FFFF];
        for (i=0; i<acomp; i++) {
          x=0;
          x=x+cbuf2[(cpos-(acomp-i)*64)&0x1FFFF];
          if (zz==0 && (norst || ls[i]==64)) x=x-cbuf2[(cpos_dc-(acomp-i)*64-ls[i])&0x1FFFF];
          if (color[i]==color[acomp]-1) { prev1=prev1+x; cnt1++; r=r+(cbuf[(cpos-(acomp-i)*64)&0x1FFFF]>>4); s=s+(cbuf[(cpos-(acomp-i)*64)&0x1FFFF]&0xF); }
          if (color[acomp]>1 && color[i]==color[0]) { prev2=prev2+x; cnt2++; }
        }
        if (cnt1>0) prev1=prev1/cnt1, r=r/cnt1, s=s/cnt1, prev_coef_rs=(r<<4)|s;
        if (cnt2>0) prev2=prev2/cnt2;
        prev_coef=(prev1<0?-1:+1)*il[(11*abs(prev1)+1)&0xffff]+(cnt1<<20);
        prev_coef2=(prev2<0?-1:+1)*il[(11*abs(prev2)+1)&0xffff];
      if (column==0 && blockW[acomp]>64*acomp) run_pred[1]=run_pred[2], run_pred[0]=0, adv_pred[1]=adv_pred[2], adv_pred[0]=0;
      if (row==0 && blockN[acomp]>64*acomp) run_pred[1]=run_pred[0], run_pred[2]=0, adv_pred[1]=adv_pred[0], adv_pred[2]=0;

    }
    }
  }
  }

  // Estimate next bit probability
  if (!jpeg || !data) return next_jpeg;
   if (buf(1+(!bpos))==FF) {
  return 1;
  }

  // Update context
  if (++hbcount>2 || huffbits==0) hbcount=0;
  comp=color[acomp];
  hc=( huffcode*4+(zz==0)*2+(comp==0))|(1<<(huffbits+2));
  coef=zz|(comp<<6);
  zu=zzu[zz];
  zv=zzv[zz];
  jassert(coef>=0 && coef<256,26);
  if (hbcount==0) {
  i=hc*32;
  cxt[0]=hash5(++i,  coef, adv_pred[2]/12+(run_pred[2]<<8), ssum2>>6, prev_coef/72);
  cxt[1]=hash5(++i,  coef, adv_pred[0]/12+(run_pred[0]<<8), ssum2>>6, prev_coef/72);
  cxt[2]=hash4(++i,  coef , adv_pred[1]/11+(run_pred[1]<<8) , ssum2>>6);
  cxt[3]=hash5(++i,  rs1,  adv_pred[2]/7, run_pred[5]/2, prev_coef/10);
  cxt[4]=hash5(++i,  rs1,  adv_pred[0]/7, run_pred[3]/2, prev_coef/10);
  cxt[5]=hash4(++i,  rs1,  adv_pred[1]/11 , run_pred[4]) ;
  cxt[6]=hash5(++i,  adv_pred[2]/14,  run_pred[2], adv_pred[0]/14, run_pred[0]);
  cxt[7]=hash5(++i,  cbuf[(cpos-blockN[mcupos>>6])&0x1FFFF]>>4, adv_pred[3]/17, run_pred[1], run_pred[5]);
  cxt[8]=hash5(++i,  cbuf[(cpos-blockW[mcupos>>6])&0x1FFFF]>>4,  adv_pred[3]/17, run_pred[1], run_pred[3]);
  cxt[9]=hash5(++i,  lcp[0]/22, lcp[1]/22, adv_pred[1]/7, run_pred[1]) ;
  cxt[10]=hash4(++i, lcp[0]/22,  lcp[1]/22, zz, lcp[4]/30);
  cxt[11]=hash4(++i, zu/2, lcp[0]/13, lcp[2]/30, (prev_coef/40)+((prev_coef2/28)<<20));
  cxt[12]=hash4(++i, zv/2, lcp[1]/13, lcp[3]/30, (prev_coef/40)+((prev_coef2/28)<<20));
  cxt[13]=h2(h2(h2(h2(h2( h2( h2(++i, rs1), prev_coef/42), prev_coef2/34), lcp[0]/60),lcp[2]/14), lcp[1]/60),lcp[3]/14);
  cxt[14]=hash3(++i, zz, column>>1);
  cxt[15]=h2(h2(h2(h2(h2(h2(++i, column>>3), min(5+2*(!comp),zu+zv)), lcp[0]/10),lcp[2]/40),lcp[1]/10), lcp[3]/40);
  cxt[16]=hash3(++i, ssum>>3, zz);
  cxt[17]=hash4(++i, rs1 , zz , run_pred[1]);
  cxt[18]=hash4(++i, coef , ssum2>>5 , adv_pred[3]/30);
  cxt[19]=hash4(++i, lcp[0]/40 , lcp[1]/40 , adv_pred[1]/28);
  cxt[20]=hash5(++i, ccount>1?((zv<<8)|zu):zv,cbuf[(cpos-blockN[mcupos>>6])&0x1FFFF],adv_pred[2]/28, run_pred[2]);
  cxt[21]=hash5(++i, ccount>1?((zv<<8)|zu):zu,  cbuf[(cpos-blockW[mcupos>>6])&0x1FFFF], adv_pred[0]/28, run_pred[0]);
  cxt[22]=hash3(i, adv_pred[2]/7, run_pred[2]);
  cxt[23]=hash3(i, adv_pred[0]/7, run_pred[0]);
  cxt[24]=hash3(i, adv_pred[1]/7, run_pred[1]);
  cxt[25]=hash5(++i, ccount>1?((zv<<8)|zu):zv, lcp[1]/14, adv_pred[2]/16, run_pred[5]);
  cxt[26]=hash5(++i, ccount>1?((zv<<8)|zu):zu, lcp[0]/14, adv_pred[0]/16, run_pred[3]);
  cxt[27]=hash4(++i, lcp[0]/14, lcp[1]/14, adv_pred[3]/16);
  cxt[28]=hash4(++i, coef,  prev_coef/10, prev_coef2/20);
  cxt[29]=hash4(++i, coef, ssum>>2, prev_coef_rs);
  cxt[30]=h2(h2(h2(h2(h2(++i, coef), adv_pred[1]/17), lcp[(zu<zv)]/24),lcp[2]/20),lcp[3]/24) ;
  cxt[31]=h2(h2(h2(h2(h2(++i, coef), adv_pred[3]/11), lcp[(zu<zv)]/50),lcp[2+3*(zu*zv>1)]/50),lcp[3+3*(zu*zv>1)]/50);
  cxt[32]=h2(h2(h2(h2(h2(h2(++i, coef), adv_pred[2]/17), coef), adv_pred[1]/11) , ssum>>2),run_pred[0]);
  cxt[33]=h2(h2(h2(h2(h2(h2(h2(++i, ccount>1?0:1), zv), run_pred[2]/2), coef), run_pred[5]/2), min(7,zu+zv)),adv_pred[0]/12);
  cxt[34]=hash4(mcupos, column ,row , hc>>2) ;
  cxt[35]=h2(h2(h2(h2(h2(h2(h2(h2(hc,ccount>1?((zv<<8)|zu):zu),cbuf[(cpos-blockN[mcupos>>6])&0x1FFFF])  , adv_pred[2]/28), run_pred[2]),lcp[1]/14  ), adv_pred[0]/28), run_pred[0]),lcp[4]/14 ) ;
  cxt[36]=h2(h2(h2(h2(h2(h2(h2(h2(h2(h2(h2(++i, (zv<<8)|zu), lcp[0]/22), lcp[4]/30), ssum2>>6),prev_coef/28 ),  adv_pred[0]/30), adv_pred[1]/30),adv_pred[2]/30 ),  run_pred[0]), run_pred[1]),run_pred[2] );
  cxt[37]=hash4(hc, adv_pred[3] / 13 , prev_coef / 11 ,  (zu + zv < 4));
}

  // Predict next bit
  jassert(hbcount<=2,27);
  if (hbcount==0)      { for ( i=0; i<N; ++i)  vmx(DHS,0,cxt[i]);}
  else if (hbcount==1) { huc=1+(huffcode&1)*3; vmx(DHS,0,   huc);}
  else                 { huc=1+(huffcode&1);   vmx(DHS,0,   huc);}
  if (hbcount==0) {
  vmx(SM, 0,hash3(hc>> 2,coef, adv_pred[0]/11));
      vmx(SM, 1,hash3(hc>> 2,coef, adv_pred[1]/11));
      vmx(SM, 2,hash3(hc>> 2,coef, adv_pred[2]/11));
      vmx(SM, 3,hash3(hc>> 2,coef, adv_pred[3]/11));
      vmx(SM, 4,hash3(hc>> 2,coef, adv_pred1[0]/11));
      vmx(SM, 5,hash3(hc>> 2,coef, adv_pred1[1]/11));
      vmx(SM, 6,hash3(hc>> 2,coef, adv_pred1[2]/11));
      vmx(SM, 7,hash3(hc>> 2,coef, lcp[0]/7));
      vmx(SM, 8,hash3(hc>> 2,coef, lcp[1]/7));

      if (ccount==1){
          vmx(SM, 9,hash3(hc>> 2,coef, run_pred[0])); 
          vmx(SM,10,hash3(hc>> 2,coef, run_pred[1]));
          vmx(SM,11,hash3(hc>> 2,coef, run_pred[2]));
          vmx(SM,12,hash3(hc>> 2,coef, run_pred[3]));
          vmx(SM,13,hash3(hc>> 2,coef, run_pred[4]));
      }else {
          vmx(SM, 9,hash3(hc>> 2,coef, lcp[2]/7));
          vmx(SM,10,hash3(hc>> 2,coef, lcp[3]/7));
          vmx(SM,11,hash3(hc>> 2,coef, lcp[4]/7));
          vmx(SM,12,hash3(hc>> 2,coef, lcp[5]/7));
          vmx(SM,13,hash3(hc>> 2,coef, lcp[6]/7));
      }
      vmx(SM,14,hash3(hc>> 2,coef, rs1)); 
      vmx(SM,15,hash3(hc>> 2,coef, prev_coef));
      vmx(SM,16,hash3(hc>> 2,coef, prev_coef2));
      vmx(SM,17,hash3(hc>> 2,coef, ssum>>2));
      vmx(SM,18,hash3(hc>> 2,coef, ssum2>>2));
      vmx(SM,19,hash3(hc>> 2,coef, ssum3>>2)); 
      vmx(SM,20,hash3(hc>> 2,coef, prev_coef_rs));
      
      vmx(SM,21,hash3(hc>> 2, adv_pred[0]/16,prev_coef/42));
      vmx(SM,22,hash3(hc>> 2, adv_pred[1]/16,prev_coef/42));
      vmx(SM,23,hash3(hc>> 2, adv_pred[2]/16,prev_coef/42));
      vmx(SM,24,hash3(hc>> 2, adv_pred[3]/16,prev_coef/42));
  }
  vmx(SMC,3,hc&0xffff); 
  vmx(MX,0,column==0);
  vmx(MX,1,  coef+(min(3,huffbits)<<8));
  vmx(MX,2,  (hc&0x3FE)*2+min(3,ilog2(zu+zv)));
  vmx(MX,10, 1+(zu+zv<5)+(huffbits>8)*2+(column==0)*4);
  vmx(MX,11, 1+(hc&0xFF)+256*min(3,(zu+zv)/3));
  vmx(MX,12, coef+256*min(3,huffbits/2));

  vmx(APM1,0, hash3(hc,abs(adv_pred[1])/16,abs(adv_pred1[1])/16));
  vmx(APM1,1, hash3(hc&0xffff,coef,hbcount));
  return (hc&255);
}
// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pr){ 
  int d,c,isjpeg,i;
  if (bpos==0){
    buffer[bufpos]=c4&0xff;
    bufpos++;
    pos++;
    bufpos=bufpos&BMASK;
    c1=buf(1), c2=buf(2), c3=buf(3);
  }
  Misses=(Misses<<1)|((pr>>11)!=y);
  if (bpos== 0){
    for (i=7; i>0; --i)  // update order 0-7 context hashes
      t[i]=h2(h2(i,t[i-1]),c1);
    for (i=1; i<7; i++)
      vmx(CM, 0,t[i]); 
  }
  isjpeg=jpegModel(bpos,y); 
  hc2=(1<<(huffbits-huffsize))+((huffcode & ((1<<(huffbits - huffsize))-1))<<1)+(huffsize>0);
    jstate=0x1000|((hc2 & 0xFF)<<4)|((adv_pred[1]>0)<<3)|((huffbits>4)<<2)|((comp==0)<<1)|(zu+zv<5);
  if (isjpeg) {
    vmx(MX,4, 1);
    vmx(MX,5, isjpeg-1);
    vmx(MX,6, buf(1));
    vmx(MX,7,0);
    vmx(MX,8,0);
    vmx(MX,9,0);
    vmx(MX,13,0);
    vmx(SMC,0,0);
    vmx(SMC,1,0);
    vmx(SMC,2,jstate&0x1fff);
  }else{
  vmx(MX,4,c1+8);
  vmx(MX,5,c0);
  vmx(MX,6,c2);
  d= c0<<(8- bpos);
  vmx(MX,7, bpos*256+(((( 1<< bpos)&255)>> bpos)|(d&255)));
  if (bpos) {
    c=d;
    if (bpos==1)c =c+(c3>>1);
     c=(min( bpos,5))*256+(c1>>5)+8*(c2>>5)+(c&192);
   }
  else c=(c3>>7)+( c4>>31)*2+4*(c2>>6)+(c1&240); 

  vmx(MX,8,c);
  c=(width>64)?(min(63, column/max(1, width/64))):column;
  vmx(MX,9,c);
  
  vmx(SMC,0,(c0));
  vmx(SMC,1,(c0)|(c1<<8));
  vmx(SMC,3,0);
   }
   vmx(APM1,2, jstate);
  return 0;
}
void block(int a,int b) {
  int i;
  jpeg=app=sos=sof=htsize=data=mcusize=huffcode=huffbits=huffsize=mcupos=cpos=0;
  rs=dqt_state =  -1;
  for (i=0;i<128;i++) hufmin[i]=hufmax[i]=hufval[i]=0;
  for (i=0;i<4;i++) pred[i]=0;
}
// main is called only once after VM init.
int main() { 
  int i,x,NN;
  N=38;
  NN=N*3;
  // SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM
  vms(  2+1+1,   2+1,   0,  1,  0,  0, 1, 7+4+3,  1,6+4+1+N+N+N+3,1,9+5+3+4+4,0); 
  vmi(ST,0,144,0,0);
  vmi(CM,0,2,7-1,0);  
  vmi(ST,0,136,0,1);
  vmi(DHS,0,3,24 ,N);
  for (i=0;i<N;i++)            vmi(MM,i,1,i,0);     // stretch pr >> 1
  for (i=N;i<N*2;i++)          vmi(MM,i,3,i-N,1);   // pr-2048 >> 3
  for (i=N*2;i<N*3;i++)        vmi(MM,i,0,i-N*2,1); // stretch pr
  vmi(SMC,0,  0x100,1023,0);
  vmi(SMC,1,0x10000,1023,0);
  vmi(SMC,2, 0x2000,1023,1);
  vmi(SMC,3,0x10000,1023,0);
  for (i=0;i<25;i++) vmi(SM,i,16,3+256*m_sm[i],0);

  //jpeg
  vmi(MX,0,m_s[0] +256*m_e[0]+0x1000000*m_m[0],  2 ,1);  vmi(MM,NN,0,N,3);
  vmi(MX,1,m_s[1] +256*m_e[1]+0x1000000*m_m[1],1024 ,1);        vmi(MM,NN+1,0,N+1,3);
  vmi(MX,2,m_s[2] +256*m_e[2]+0x1000000*m_m[2],2048 ,1);        vmi(MM,NN+2,0,N+2,3);
  vmi(MX,3,m_s[3] +256*m_e[3]+0x1000000*m_m[3],1 ,3);   
  vmi(APM1,0,0x40000,7,N+3);   vmi(MM,NN+3,1,N+4,0);
  vmi(APM1,1,0x40000,7,N+4);   vmi(MM,NN+4,1,N+5,0);
  //main
  vmi(MX,4,m_s[4] +256*m_e[4]+0x1000000*m_m[4], 264 ,0);        vmi(MM,NN+5,0,N+6,2);
  vmi(MX,5,m_s[5] +256*m_e[5]+0x1000000*m_m[5], 256 ,0);        vmi(MM,NN+6,0,N+7,2);
  vmi(MX,6,m_s[6] +256*m_e[6]+0x1000000*m_m[6], 256 ,0);        vmi(MM,NN+7,0,N+8,2);
  vmi(MX,7,m_s[7] +256*m_e[7]+0x1000000*m_m[7],2048 ,0);        vmi(MM,NN+8,0,N+9,2);
  vmi(MX,8,m_s[8] +256*m_e[8]+0x1000000*m_m[8],1536 ,0);        vmi(MM,NN+9,0,N+10,2);
  vmi(MX,9,m_s[9] +256*m_e[9]+0x1000000*m_m[9],64 ,0);        vmi(MM,NN+10,0,N+11,2);
  vmi(MX,10,m_s[10]+256*m_e[10]+0x1000000*m_m[10],   9 ,0);       vmi(MM,NN+11,0,N+12,2);
  vmi(MX,11,m_s[11]+256*m_e[11]+0x1000000*m_m[11],1025 ,0);       vmi(MM,NN+12,0,N+13,2);
  vmi(MX,12,m_s[12]+256*m_e[12]+0x1000000*m_m[12],1024 ,0);       vmi(MM,NN+13,0,N+14,2);

  vmi(MX,13,m_s[13] +256*m_e[13]+0x1000000*m_m[13],1 ,2); //53
  vmi(APM1,2,0x2000,7,53);//54
  vmi(AVG,0,0,53,54); //55
  x=14155776;
  for ( i=2; i<65536; ++i) {
    x=(x+(774541002/((i<<1)-1)));    // numerator is 2^29/ln 2
    il[i]=x>>24;
  }
}
