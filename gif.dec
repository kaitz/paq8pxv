char etable[64] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',
                  'Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f',
                  'g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v',
                  'w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/'};
char *inn;
char*ptr,*output;
int *diffpos,*dict,*table;
enum {false=0,true}; //internal enum
enum {END=0xFFFFFFFE,START=0xFFFFFFFF}; //external enum
enum {LZW_TABLE_SIZE=9221,PHI=0x9E3779B1}; //internal enum
int bits,bsize,diffcount,curdiff,maxcode,clearpos,codesize,outsize,blocksize,buff,shift,input,code,offset,index,size,total;
int min(int a, int b) {return a<b?a:b;}

void lzw_reset() { 
int i;
for ( i=0; i<LZW_TABLE_SIZE; i++){
	table[i]=-1;
}
 }
void gif_write_block(int count) { 
output[0]=(count);
 //out->blockwrite(&output[0],  (count)+1  );
 write(output,(count)+1);
outsize=outsize+(count)+1; 
blocksize=0; 
}

void gif_write_code(int c) { 
 
buff=buff|((c)<<shift); shift=shift+bits;
while (shift>=8) {
	output[++blocksize]=buff&255; 
	buff=buff>>8;shift=shift-8;
    if (blocksize==bsize) gif_write_block(bsize); 
}
}
void lzw_find(int k) {
	 int stride,true;
	 true=0;
  offset = ((k)*PHI)>>19; 
   stride = (offset>0)?LZW_TABLE_SIZE-offset:1; 
  while (true==0){ 
  index=table[offset];
    if ((index)<0){ index=0-offset-1; true=1; } 
    else if (dict[index]==(k)){ true=1; } 
    else offset=offset-stride; 
    if (offset<0 && true==0) 
      offset=offset+LZW_TABLE_SIZE; 
  } 
}
int decode(int info,int len1) {
	int i,last,key;
	//printf("Decode len: %d",len1);
	size=len1;
	read(inn, 1);   diffcount=inn[0];//in->getc(), 
   curdiff=0;
   // Array<int> diffpos(4096);//, diffpos[4096];
  read(inn, 1); diffcount=((diffcount<<8)+inn[0]-6)/4;
  read(inn, 1); bsize=255-inn[0];//in->getc();
  read(inn, 1); clearpos=inn[0]; 
  read(inn, 1); clearpos=(clearpos<<8)+inn[0];//in->getc();
  clearpos=(69631-clearpos)&0xffff;
  // printf("encode clearpos %d\n",clearpos);
   read(inn, 1); codesize=inn[0],bits=codesize+1,shift=0,buff=0,blocksize=0;
  if (diffcount>4096 || clearpos<=(1<<codesize)+2) return 1;
   maxcode=(1<<codesize)+1, input,code,offset=0;
   // Array<int> dict(4096);
   //   Array<int> table(LZW_TABLE_SIZE);
  lzw_reset();
  for ( i=0; i<diffcount; i++) {
    read(inn, 1);diffpos[i]=inn[0];
    read(inn, 1);diffpos[i]=(diffpos[i]<<8)|inn[0];
    read(inn, 1);diffpos[i]=(diffpos[i]<<8)|inn[0];
    read(inn, 1);diffpos[i]=(diffpos[i]<<8)|inn[0];
    if (i>0) diffpos[i]=diffpos[i]+diffpos[i-1];
	printf ("%d\n",diffpos[i]);
  }
  //Array<U8,1> output(256);
  size=size-(6+diffcount*4);
   read(inn, 1);last=inn[0],total=size+1,outsize=1;
  //if (mode==FDECOMPRESS) 	  out->putc(codesize);
  inn[0]=codesize;write(inn,1);
  //else if (mode==FCOMPARE) if (codesize!=out->getc() && !diffFound) diffFound=1;
  if (diffcount==0 || diffpos[0]!=0) gif_write_code(1<<codesize); else curdiff++;
  while (size!=0 && read(inn, 1)!=0) {
	 //read(inn, 1); 
	 input=inn[0];
    size--;
    key=(last<<8)|input, code=-1,index=code;
    if (last<0) index=input; else lzw_find(key);
    code = index;
    if (curdiff<diffcount && total-size>diffpos[curdiff]) curdiff++, code=-1;
    if (code<0) {
      gif_write_code(last);
      if (maxcode==clearpos) { gif_write_code(1<<codesize); bits=codesize+1, maxcode=(1<<codesize)+1; lzw_reset(); }
      else
      {
        ++maxcode;
        if (maxcode<=4095) { dict[maxcode]=key; table[(index<0)?(0-index-1):offset]=maxcode; }
        if (maxcode>=(1<<bits) && bits<12) bits++;
      }
      code=input;
    }
    last=code;
  }
  printf("Decode end main loop: %d",outsize);
  gif_write_code(last);
  gif_write_code((1<<codesize)+1);
  if (shift>0) {
    output[++blocksize]=buff&255;
    if (blocksize==bsize) gif_write_block(bsize);
  }
  if (blocksize>0) gif_write_block(blocksize);
  //if (mode==FDECOMPRESS) out->putc(0);
  inn[0]=0;write(inn,1);
  //else if (mode==FCOMPARE) if (0!=out->getc() && !diffFound) diffFound=outsize+1;
  return outsize+1;
  }

int main() {
    if (!(inn = malloc(10,sizeof(char)))) exit(-1);
   // if (!(buff = malloc(10,sizeof(char)))) exit(-1);
    if (!(output = malloc(256,sizeof(char)))) exit(-1);
	 if (!(dict = malloc(4096,sizeof(int)))) exit(-1);
    if (!(diffpos = malloc(4096,sizeof(int)))) exit(-1);
	if (!(table = malloc(LZW_TABLE_SIZE,sizeof(int)))) exit(-1);
}