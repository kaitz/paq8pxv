// Model for text  - input wit processed, dictionary processed
// 
enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM,SK,APM2,ERR,TAPM,UAS,LMX,STA,BYT};
int t[14]={} ; //  ={} - let VM to alloc memory and set values to 0
int info;
int c1,c2,c3,c8,word0,word1,word2,word3,apmfails,words,spaces,wshift,w4,nl1,nl,col,fc,fc1,x4;
int wrt_w[256]={
    2, 3, 1, 3, 3, 0, 1, 2, 3, 3, 0, 0, 1, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 
    3, 2, 0, 2, 1, 3, 2, 1, 3, 3, 3, 3, 2, 3, 0, 2, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 3, 2, 2, 
    2, 2, 0, 0, 2, 3, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0, 
    2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 3,

    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

int wrt_t[256]={
    0, 0, 2, 0, 5, 6, 0, 6, 0, 2, 0, 4, 3, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    2, 4, 1, 4, 4, 7, 4, 7, 3, 7, 2, 2, 3, 5, 3, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 5, 3, 3, 5, 5, 
    0, 5, 5, 7, 5, 0, 1, 5, 4, 5, 0, 0, 6, 0, 7, 1, 
    3, 3, 7, 4, 5, 5, 7, 0, 2, 2, 5, 4, 4, 7, 4, 6, 

    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}; 

int t1[256]={};
int t2[0x10000]={};
int wp[0x10000]={};
int cpos[256]={};
int primes[14]={ 0, 257,251,241,239,233,229,227,223,211,199,197,193,191 };
// Parameters
//
int m_e[7]={256,256,256,256,256,256,0}; // mixer error
int m_s[7]={194, 237, 204, 70, 54, 55, 6};// mixer shift
int m_m[7]={36, 69, 19, 34, 23, 24, 4};// mixer error mul

int c_r[22]= { 3,  4,  6,  4,  6,  6,  2,  3,  3,  3,  6,  4,  3,  4,  5,  6,  2,  6};         // contextmap run mul
int c_s[22]= {28, 26, 28, 31, 34, 31, 33, 33, 35, 35, 29, 32, 33, 34, 30, 36, 31, 32};  // contextmap pr mul
int c_s2[22]={12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12};   // ...
int c_s3[22]={43, 33, 34, 28, 34, 29, 32, 33, 37, 35, 33, 28, 31, 35, 28, 30, 33, 34};
int c_s4[22]={ 9,  8,  9,  5,  8, 12, 15,  8,  8, 12, 10,  7,  7,  8, 12, 13, 13, 14};
int c_s5[22]={ 6,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2}; // This is obsolete.

//match
int m_o[7]={3, 30, 13, 8, 2, 7, 5};
//mix
int m_oi[34]={0,'!','"','#','$','%','&','\'','(',')','*','+',',','-','.','/',':',';','<','=','>','?','@','[','\\',']','^','_','{','|','}','~'};//'_`'
int m_ox[15]={4, 25, 29, 25, 9, 23};//index

int uasfails,uaslimit;
int e_l[8]={1830, 1997, 1973, 1851, 1897, 1690, 1998, 1842};
int e_h[8]={4024, 4060, 3962, 3981, 4027, 4070, 3996, 4082};

int oState, wtype,ttype;
int nState=-1;

int MAXLEN=62; // longest allowed match + 1
int tm[0x100000]={};    // hash table of pointers to contexts
int h;      // hash of last 7 bytes
int ptr;    // points to next byte of match if any
int len;    // length of match, or 0 if no match
int match,ord;
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int  pos;

int buf(int i){
    return buffer[(pos-i)&BMASK];
}
int bufr(int i){
    return buffer[i&BMASK];
}
int min(int a, int b) {return a<b?a:b;}
int matchMod(int y,int bpos){  
    int cx;
    if (bpos==0){
        //update match
        h=(h*887*8+c1+1)&0xfffff;  // update context hash
        if (len>3) len=len+(len<MAXLEN), ++ptr;
        else {  // find match
            len=1;
            ptr=tm[h];
            if (ptr && (pos-ptr)<0x400000)
            while (buf(len+1)==bufr(ptr-len-1) && len<MAXLEN) ++len;
        }
        tm[h]=pos;  // update hash table
        //if (len>3 ) printf("pos=%d len=%d ptr=%d\n", pos, len, ptr);
    }
    // predict match
    cx=0;
    if (len && c1==bufr(ptr-1)){
        match=(bufr(ptr)>>(7-bpos))&1;
        if (len<16) cx=len*2+match;
        else cx=(len>>2)*2+match+24;
        cx=cx*256+buf(1);
    }else {
        len=0;
    }
    vmx(SMC,0,cx);
    return len;
}

// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pr){
    int i,j,h1,c,v17,d,f;
    int ismatch,above;
    apmfails=apmfails<<1;
    uasfails=uasfails<<1;
    j=y?pr^4095:pr;
    j=vmx(ERR,bpos,j);
    apmfails=apmfails|j;
    uasfails=uasfails|(j&1);
    if (bpos== 0){
        uaslimit=uasfails;

        wshift=0;
        c8 = (c8 << 8) + (c4 >> 24);
        c3=c2;
        c2=c1;
        c1=c4&0xff;
        //if ((c1>31 && c1<97) || c1<16) w4=w4*4+vmx(BYT, c1,0);
        //else 
        i=wrt_w[c1];
        w4=w4*4+i;
        
        buffer[pos&BMASK]=c1;
        pos++;    
        //for (i=0;i<6;i++) m_ox[i]=vmx(BYT, i,0);
        if ( c1!=' '  )for (h1=0;h1<6;h1++) if (c1==(m_oi[m_ox[h1]])){ if ( c1!=c2  )// || c1=='(' //|| c2=='?' || c1=='{' || c1=='(' || c1=='['  //600 37 250
            for (i=13; i>0; --i)  // update order 0-11 context hashes
            t[i]=t[i-1]*primes[i];
            x4 =   (x4 << 8)+c2;
        }
        x4 =   (x4 << 8)+c1;
        for (i=13; i>0; --i)  // update order 0-11 context hashes
        t[i]=t[i-1]*primes[i]+c1+i*256;
        for (i=3; i<6; ++i)
        vmx(CM, 0,t[i]);
        vmx(CM, 1,t[6]);
        vmx(CM, 2,t[8]);
        vmx(CM, 3,t[13]);
        j=c1;
        //if ((c1>31 && c1<97) || c1<16)  nState=vmx(BYT, c1,0);
        // else 
        //  if (c1<97) nState=vmx(BYT, c1+97,0);
        //else 
        nState=wrt_t[c1];
        words= words<<1;spaces= spaces<<1;
        //if (j>='A' && j<='Z') j =j+32;
        if (j>='a' && j<='z' || (c1>127 && c2!=12)) {
            words=words|1;
            word0=word0*2104+j; //263*8
        }
        else {
            if (word0){
                word3=word2*47;
                word2=word1*53;
                word1=word0*83;
            }
            wp[word0&0xffff]=pos;
            word0=0;
            if (c1==32) spaces++;
            else if (c1==10 ) {fc=fc1=0;nl1=nl; nl=pos-1;wtype=(wtype<<3);
                w4=w4|0x3fc;
                words=0xfffffffc;
            }
            // : 16 J
            // ; 17 K
            // < 18 L
            // = 19 M
            // > 20 N
            // ? 21 O
            // ` 27 X
            // { 28 P
            // | 29 Q
            // } 30 R
            // ~ 31 S
            else if (c1=='.' || c1==')' || c1=='O'  ) {
                wtype= wtype&0xffffffc0;
                ttype= ttype&0xfffffff8;
                words = words | 0xfffffffe;
                w4=w4|204;
            } 
            else if (c1==',' ) {words = words | 0xfffffffc;}
            else if (c1=='J') {
                ttype= (ttype&0xfffffff8)+4;
                w4=w4|12;//      1100
            }   
            else if (c1=='R' || c1=='P') {
                words = words | 0xfffffffc;
                wtype= wtype&0xffffffc0;
                ttype= (ttype&0xfffffff8)+3;
            }   
            else if (c1=='L' || c2=='&') {
                words = words | 0xfffffffc;
            }   
            else if (c1=='M'  )  {
                ttype= (ttype&0xfffffff8)+4;
            }  
            if (c1=='!' && c2=='&' )  {// '&nbsp;' to '&!'  to ' '
                c1=' ';(c4=c4&0xffffff00)+' ';
                w4=(w4&0xfffffffc)+wrt_w[' '];
                ttype= (ttype&0xfffffff8)+wrt_t[' '];
            }  

            if (c1=='.')wshift=1;
        }
        
        // switch state if its new
        if (oState!=nState){
            wtype=(wtype<<3)+nState;
            oState=nState;
        }
        ttype=(ttype<<3)+nState;
        col=min(31, pos-nl);
        if (col<=2) {
            if (col==2) {
                fc=min(c1,96);
                if (fc=='@') fc1=1;
                else fc1=0;
            }
        }
        above=buffer[(nl1+col)&BMASK];
        if (fc=='[' && c1==32) { if(c2==']' || c3==']' ) {
                fc=64;fc1=0;
            }}
        if (fc==' ' && c1!=' ' )   { fc=min(c1,96);
            if (fc=='@') fc1=1;
            else fc1=0;
        }
        if (fc=='*' && c1!=' ' )    fc=min(c1,96);
        
        if (word0) {
            h1=word0*271+(c4&0xff);}
        else
        h1=word0*271+c1;
        if (c1==12)vmx(CM, 4,0); else vmx(CM, 4,word0); 

        if (c1==12)vmx(CM, 4,0); else vmx(CM, 4,h1+word1); 
        vmx(CM, 5,h1+ word2*71 );// 12 ???? -6k w9

        vmx(CM, 6,((ttype&0x3f)<<16)+(c4&0xffff));// 12 ???? -6k w9
        vmx(CM, 7,w4);
        
        vmx(CM, 8,(c4 & 0xffffff) + ((w4 << 18) & 0xff000000));
        vmx(CM, 8,wtype&0x3fffffff);
        vmx(CM, 8,(fc) + ((wtype & 0xfff) << 8 ) );
        
        vmx(CM, 9,col | (fc << 15) | ((ttype & 63) << 7));
        vmx(CM, 9,(fc | ((c4 & 0xffffff) << 7)));
        
        vmx(CM, 10, (w4 & 3)+word0*11 );
        vmx(CM, 10, c4 & 0xffff );
        vmx(CM, 10, ((fc << 11) | c1)+((w4 & 3)<< 18));
        
        vmx(CM, 11, (w4 & 15)+((ttype & 7) << 6 ) );
        vmx(CM, 11,c1 | ((col * (c1 == 32)) << 8)+((w4 & 15) << 16));

        vmx(CM, 11, fc<< 11)  ;
        if (c1==12)vmx(CM, 11,0); else vmx(CM, 11, (91 * word1 + 89 * word0)) ;

        vmx(CM, 12, (c1 + ((ttype & 0x38) << 6)));
        vmx(CM, 12, c1+word0);
        vmx(CM, 12, ((c4 & 0xffff) << 7) | fc) ;
        vmx(CM, 12,  ((wtype & 0xfff)<< 8)+((w4 & 0xfc))) ;
        
        vmx(CM, 13, above | ((ttype & 0x3f) << 9) | (col << 19)| ((w4 & 3) << 16) );
        
        vmx(CM, 13, h1+word1);
        vmx(CM, 13, above |   (c1 << 16));

        vmx(CM, 14, (x4 & 0xff00ff)  );
        vmx(CM, 14, (x4 & 0xff0000ff) | ((ttype & 0xE07) << 8) );
        
        f=(c4>>8)&0xffff;
        t2[f]=(t2[f]<<8)|c1; 
        f=c4&0xffff;
        f=f|(t2[f]<<16);
        d=(c4>>8)&0xff;
        t1[d]=(t1[d]<<8)|c1;
        d=c1|(t1[c1]<<8);
        c=d;
        vmx(CM, 14, (d& 0xffff) | ((ttype & 0x38) << 16) );
        vmx(CM, 13, (f& 0xffffff)   );
        vmx(CM, 18,d );//2,5k
        vmx(CM, 18,((d& 0xffff00)>>4) | ((w4 & 0xf) )| ((ttype & 0xfff) << 20) );//1k

        d = pos - cpos[c1];
        if ( d > 255 )
        d = 255;
        cpos[c1] = pos;
        vmx(CM, 15, (c1 << 8) | (d >> 2)| (fc << 16));
        vmx(CM, 15, (c4 & 0xffff)+(c2==c3?1:0));//
        vmx(CM, 16, (ttype & 0x3ffff) | ((w4 & 255) << 24));//
        vmx(CM, 16, x4 );


        vmx(CM, 17, 257 * word1 + 193 * (ttype & 0x7fff) );
        vmx(CM, 17, fc|((w4 & 0xfff) << 9)| ((c1  ) << 24) );
        vmx(CM, 17,(x4 & 0xffff00)| ((w4 & 3) ) );

        vmx(CM, 18,(x4 >>16) | ((w4 & 255) << 24));//1k
        vmx(CM, 18,(c1 << 11) | ((f & 0xffffff)>>16) );//0,9k so
        vmx(CM, 18,fc | ((c4 & 0xffff)<< 9)| ((w4 & 0xff) << 24) );
        vmx(CM, 18,   ((f >> 16) )| ((w4 & 0x3c)<< 25 )| (((ttype & 0x1ff))<< 16 ) ); 


        vmx(CM, 19, (words & 0xff)+((spaces & 0xff)<< 8)+((w4&15)<< 16)+(((ttype>>6)&511)<< 21)+(fc1<<30));

        
        vmx(CM, 19,  c1 + ((32 * ttype) & 0x1fffff00));
        vmx(CM, 19,ttype);
        vmx(CM, 19,  ((d& 0xffff)>>8) + ((64 * w4) & 0x3ffff00));

        d=pos-wp[word0&0xffff];
        if ( d > 255 ){
            d = 255+(c1 << 16);
        }
        else{
            d=(d)+(buf(d)<< 8)+(c1 << 16);
        }
        vmx(CM, 19, (d )| (fc << 24));

        vmx(CM, 20,  (x4&0xf0f00000)+((x4&0x0000f0f0) << 12)    );
        vmx(CM, 20,  word1*1471-word0*53);
        vmx(CM, 20,above | ((c4 &0xffffff)<< 8));

        if (c1==12) vmx(CM, 21, 0 ); else
        vmx(CM, 21, h1+word2*79+word3*71 ); 
        //
        vmx(SCM, 0, c1 );//500
        vmx(SCM, 1, c2*(fc1) );//300
        vmx(SCM, 2, (f & 0xffffff)>>16 );//180
        vmx(SCM, 3, ttype & 0x3f );//320
        vmx(SCM, 4, w4 & 0xff );//250
        vmx(SCM, 5,  (w4 & 0xf) + 4 * (words & 0x3c) );// 150
        vmx(SCM, 6, fc1 + 2 * ((wtype & 0x3f) ) );// 150
        vmx(SCM, 7, fc  );// 200
        vmx(SCM, 8, (c & 0xffff)>>8 );// 100
        if (wshift ||c1==10) {  word3=word3*47,word2=word2*53, word1=word1*83;

        }
    }
    vmx(UAS,0,uaslimit);
    ismatch=matchMod( y, bpos);
    if (ismatch) {
        ord=0;
        for (i=0;i<6;i++) {
            j=m_o[i];
            if (len>j)ord=ord+1;
        }
    }
    
    else ord=0;

    vmx(MX,0,ord << 3 | bpos);

    if (bpos==0)vmx(MX,1,(w4&63)*8+  (ttype&7) );
    else if (bpos > 3) {c=wrt_w[(c0<<(8-bpos))&255];
        vmx(MX,1,(((w4<<2)&63)+c)*8+(words&7));}
    else    
    vmx(MX,1,(w4&63)*8+  bpos );

    if (bpos){
        c=c0<<(8-bpos); if (bpos==1)c=c+16 * (words*2& 4);
        if (bpos>3)  c = wrt_w[(c0<<(8-bpos))&255]*64 ;
        c=(min(bpos,5))*256+(ttype&63)+(c&192);
    }
    else c=((words>>0)&12)*16+(ttype&63);
    // if(bpos)
    // {	
    //   c=c0<<(8-bpos); if(bpos==1)c=c+c3/2;
    //   c=(min(bpos,5))*256+c1/32+8*(c2/32)+(c&192);
    // }
    // else c=c3/128+(c4>>31)*2+4*(c2/64)+(c1&240);

    vmx(MX,2,c);
    vmx(MX,3,((2 * words) & 0xfc) + ord*256 + (w4 & 3));
    c= c0<<(8- bpos);
    vmx(MX,4,bpos*256+(((( words<< bpos)&255)>> bpos)|(c&255)));
    if (bpos>=1) {
        if (bpos==1){
            c=c + 16 * (ttype & 7);}
        else if (bpos==2) {
            c=c + 16 * (w4&3);}
        else if (bpos==3)    {
            c=c + 16 *(words & 1);}
        else  {
            c=bpos + (c&0xf0);
        }
        if (bpos < 4)
        c=bpos + (c&0xf0); 
    }else c=16 * (w4&0xf);
    ord=ord-1;
    if (ord<0)
    ord=0;
    if (ismatch)
    ord=ord+1;

    vmx(MX,5, c + ord*256 + 8 * fc1);
    //vmx(APM2,0,(apmfails*8)*8+(wtype&3)*8+bpos);
    return 0;
}
void block(int a,int b) {
    info=a;
}
// main is called only once after VM init.
int main() { 
    int i,x,c;
    vms(1,0,0,0,4+1+1+1+1+1,0,8+1+1+1+1+1+1+1+1+1+1+1+1+1+1,4+1+1+1,0,3+1+1+1,0,0,0,1-1,8,0,1,1,2+1+1+1,0);
    // state tables

    for (i=0;i<34;i++) {
        c=m_oi[i]; //printf("%c ",c);
        if (c>='{' && c<127) c=c+'P'-'{';
        else if (c>='P' && c<'T') c=c-'P'-'{';
        else if ( (c>=':' && c<='?') || (c>='J' && c<='O') ) c=c^0x70;
        if (c=='X' || c=='`') c=c^'X'^'`';
        m_oi[i]=c; //printf("%d %c\n",i,c);
    }
    vmi(STA,0, 28+(28<<16),31|(29<<16),23+(4<<16)+(17<<24));//28+(28<<16),32|(30<<16),22+(3<<16)+(19<<24));
    vmi(STA,1, 32+(28<<16),31|(28<<16),21+(5<<16)+(6<<24));
    vmi(STA,2, 29+(30<<16),28|(23<<16),29+(4<<16)+(22<<24));//1k on w8 same as sta0
    vmi(STA,3, 31+(27<<16),30|(27<<16),24+(4<<16)+(27<<24));
    //vmi(STA,4, 32+(28<<16),31|(28<<16),21+(5<<16)+(6<<24));//1

    //order 
    //for (i=0;i<6;i++) {
    //   x=m_ox[i];
    //   vmi(BYT,i,x,32,0);
    //}

    //for (i=0;i<256;i++) {
    //  wrt_w[i]=(255-i)>>6;
    //}
    // for (i=0;i<256;i++) {
    //  wrt_t[i]=(i)>>5;
    //}
    // for (i=0;i<16;i++) {
    //   x=wrt_w[i];
    //   vmi(BYT,i,x,3,0);
    //}
    // for (i=32;i<97;i++) {
    //   x=wrt_w[i];
    //   vmi(BYT,i,x,3,0);
    //}
    //wrt_t
    //for (i=0;i<97;i++) {
    //  x=wrt_t[i];
    //   vmi(BYT,i+96,x,7,0);
    //}
    //  for (i=32;i<97;i++) {
    //  x=wrt_t[i];
    //  vmi(BYT,i,x,7,0);
    //}

    // match
    for (i=0;i<8;i++)  vmi(ERR,i,e_l[i]+(e_h[i]<<16),0,0);
    vmi(UAS,0,13,0,5);
    vmi(SMC,0,64<<8,1023,0);
    for (i=0;i<9;i++)   
    vmi(SCM,i,8,0,0);
    // 
    vmi(CM,0,16*4096+(1<<24),4-1+256*c_r[0]+c_s[0]*0x10000+0x1000000*c_s2[0],0+256*c_s3[0]+0x10000*c_s4[0]+(c_s5[0]<<24)|(1<<28));
    vmi(CM,1,16*4096+(1<<24),1+256*c_r[1]+c_s[1]*0x10000+0x1000000*c_s2[1],0+256*c_s3[1]+0x10000*c_s4[1]+(c_s5[1]<<24)|(1<<28));
    vmi(CM,2,16*4096+(1<<24),1+256*c_r[2]+c_s[2]*0x10000+0x1000000*c_s2[2],0+256*c_s3[2]+0x10000*c_s4[2]+(c_s5[2]<<24)|(1<<28));
    vmi(CM,3,16*4096+(1<<24),1+256*c_r[3]+c_s[3]*0x10000+0x1000000*c_s2[3],0+256*c_s3[3]+0x10000*c_s4[3]+(c_s5[3]<<24)|(1<<28));
    vmi(CM,4,16*4096+(1<<24),2+256*c_r[4]+c_s[4]*0x10000+0x1000000*c_s2[4],0+256*c_s3[4]+0x10000*c_s4[4]+(c_s5[4]<<24)|(1<<28));
    vmi(CM,5,16*4096+(3<<24),1+256*c_r[5]+c_s[5]*0x10000+0x1000000*c_s2[5],0+256*c_s3[5]+0x10000*c_s4[5]+(c_s5[5]<<24)|(1<<28));
    vmi(CM,6,1*4096+(1<<24),1+256*c_r[6]+c_s[6]*0x10000+0x1000000*c_s2[6],0+256*c_s3[6]+0x10000*c_s4[6]+(c_s5[6]<<24)|(1<<28));
    vmi(CM,7,2*4096+(1<<24),1+256*c_r[7]+c_s[7]*0x10000+0x1000000*c_s2[7],0+256*c_s3[7]+0x10000*c_s4[7]+(c_s5[7]<<24)|(1<<28));
    vmi(CM,8,1*4096+(4<<24),3+256*c_r[8]+c_s[8]*0x10000+0x1000000*c_s2[8],0+256*c_s3[8]+0x10000*c_s4[8]+(c_s5[8]<<24)|(1<<28));
    vmi(CM,9,32+(1<<24),2+256*c_r[9]+c_s[9]*0x10000+0x1000000*c_s2[9],0+256*c_s3[9]+0x10000*c_s4[9]+(c_s5[9]<<24)|(1<<28));
    vmi(CM,10,32+(2<<24),3+256*c_r[10]+c_s[10]*0x10000+0x1000000*c_s2[10],0+256*c_s3[10]+0x10000*c_s4[10]+(c_s5[10]<<24)|(1<<28));
    vmi(CM,11,32+(2<<24),5-1+256*c_r[11]+c_s[11]*0x10000+0x1000000*c_s2[11],0+256*c_s3[11]+0x10000*c_s4[11]+(c_s5[11]<<24)|(1<<28));
    vmi(CM,12,16+(2<<24),4+256*c_r[12]+c_s[12]*0x10000+0x1000000*c_s2[12],0+256*c_s3[12]+0x10000*c_s4[12]+(c_s5[12]<<24)|(1<<28));
    vmi(CM,13,32+(1<<24),4+256*c_r[13]+c_s[13]*0x10000+0x1000000*c_s2[13],0+256*c_s3[13]+0x10000*c_s4[13]+(c_s5[13]<<24)|(1<<28));
    vmi(CM,14,64*2+(1<<24),3+256*c_r[14]+c_s[14]*0x10000+0x1000000*c_s2[14],0+256*c_s3[14]+0x10000*c_s4[14]+(c_s5[14]<<24)|(1<<28));
    vmi(CM,15,2+(2<<24),2+256*c_r[15]+c_s[15]*0x10000+0x1000000*c_s2[15],0+256*c_s3[15]+0x10000*c_s4[15]+(c_s5[15]<<24)|(1<<28));
    vmi(CM,16,128+(1<<24),2+256*c_r[16]+c_s[16]*0x10000+0x1000000*c_s2[16],0+256*c_s3[16]+0x10000*c_s4[16]+(c_s5[16]<<24)|(1<<28));
    vmi(CM,17,4*4096+(1<<24),3+256*c_r[17]+c_s[17]*0x10000+0x1000000*c_s2[17],0+256*c_s3[17]+0x10000*c_s4[17]+(c_s5[17]<<24)|(1<<28));
    vmi(CM,18,4*4096+(1<<24),6+256*c_r[18]+c_s[18]*0x10000+0x1000000*c_s2[18],0+256*c_s3[18]+0x10000*c_s4[18]+(c_s5[18]<<24)|(1<<28));
    vmi(CM,19,4096+(1<<24),5+256*c_r[19]+c_s[19]*0x10000+0x1000000*c_s2[19],0+256*c_s3[19]+0x10000*c_s4[19]+(c_s5[19]<<24)|(1<<28));
    vmi(CM,20,4096+(1<<24),3+256*c_r[20]+c_s[20]*0x10000+0x1000000*c_s2[20],0+256*c_s3[20]+0x10000*c_s4[20]+(c_s5[20]<<24)|(1<<28));
    vmi(CM,21,4096+(3<<24),1+256*c_r[21]+c_s[21]*0x10000+0x1000000*c_s2[21],0+256*c_s3[21]+0x10000*c_s4[21]+(c_s5[21]<<24)|(1<<28));

    vmi(MX,0,m_s[0]+256*m_e[0]+0x1000000*m_m[0],  64,0);
    vmi(MX,1,m_s[1]+256*m_e[1]+0x1000000*m_m[1],  512,0);
    vmi(MX,2,m_s[2]+256*m_e[2]+0x1000000*m_m[2], 1536,0);
    vmi(MX,3,m_s[3]+256*m_e[3]+0x1000000*m_m[3], 7*256,0);
    vmi(MX,4,m_s[4]+256*m_e[4]+0x1000000*m_m[4], 8*256,0);
    vmi(MX,5,m_s[5]+256*m_e[5]+0x1000000*m_m[5], 7*256,0);
    for (i=0;i<5+1+1;i++)   
    vmi(MM,i,0,i,1);
    vmi(MX,6,m_s[6]+256*m_e[6]+0x1000000*m_m[6], 1,1);

    //vmi(APM2,0,0x800,24+40*256,7);
}