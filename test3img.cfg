// Model for 1 bit image data

// StateMapContext  SMC
// APM1 APM1
// APM2 APM2 //not used
// RunContextMap RCM
// SmallStationaryContextMap  SCM
// MContextMap MCM
// ContextMap CM
// Mixer MX
// SMC,APM1,APM2,RCM,SCM,MCM,CM,MX (1,2,3,4,5,6,7,8,9)
enum {SMC=1,APM1,APM2,RCM,SCM,MCM,CM,MX,MC};
//int *t; 
int r0 ,r1 ,r2 ,r3 ,N ,w;
int*  cxt;  // contexts
// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pos){ 
    int i;
    //mxa(0,256); //add to mixer(0)
    //for (i=0; i<N; ++i)
    //t[cxt[i]]=smn(t[cxt[i]]); //get next state
    // update the contexts (pixels surrounding the predicted one)
    r0=(r0<<1)+y;
    r1=(r1<<1)+((buf(w-1)>>(7-bpos))&1);
    r2=(r2<<1)+((buf(w+w-1)>>(7-bpos))&1);
    r3=(r3<<1)+((buf(w+w+w-1)>>(7-bpos))&1);
    cxt[0]=(r0&0x7)+((r1>>4)&0x38)+((r2>>3)&0xc0);
    cxt[1]=((r0&1)|((r1>>4)&0x3e)|((r2>>2)&0x40)|((r3>>1)&0x80));
    cxt[2]=((r0&0x3f)^(r1&0x3ffe)^((r2<<2)&0x7f00)^((r3<<5)&0xf800));
    cxt[3]=((r0&0x3e)^(r1&0x0c0c)^(r2&0xc800));
    cxt[4]=(((r1&0x30)^(r3&0x0c0c))|(r0&3));
    cxt[5]=(((!r0)&0x444)|(r1&0xC0C)|(r2&0xAE3)|(r3&0x51C));
    cxt[6]=((r0&1)|((r1>>4)&0x1d)|((r2>>1)&0x60)|(r3&0xC0));
    cxt[7]=(((r0>>4)&0x2AC)|(r1&0xA4)|(r2&0x349)|((!r3)&0x14D));
	//pr=0;
    for (i=0; i<N; ++i)   smp(i,cxt[i],1023);
	//return pr>>3;
	//return apm(0,pr>>3,c0,7);
    mxc(0); //mix components into mixer(0)
    // set mixer(0) contexts 
    mxs(0, gcr(0,0,MC),256);  
    mxs(0, (r0&0x7)|((r1>>4)&0x38)|((r2>>3)&0xc0), 256);
    mxs(0, ((r1&0x30)^(r3&0x0c))|(r0&3),256);
    mxs(0, (r0&1)|((r1>>4)&0x3e)|((r2>>2)&0x40)|((r3>>1)&0x80), 256);
    mxs(0, (r0&0x3e)^((r1>>8)&0x0c)^((r2>>8)&0xc8),256);
    return mxp(0);//apm(0,mxp(0),c0,7); //predict mixer(0)
}
//VM calls this after every image block
void block(int a,int b) { 
    w=a; //get block info, image width
}
// main is called only once after VM init.
int main() { 
    //if (!(t = malloc(0x10200*sizeof(int)))) {  exit(-1); }
    if (!(cxt = malloc(8*sizeof(int)))) {  exit(-1); }
    vms( 8,0,0,0,0,0,0,1,1); //8 SMC,1 MX, 1 MC 
    vmi(MC,0,1,65534,0); //match(0), mem*1, maxlen 65534, mixer(0)
    vmi( SMC,0,8,0,0); //SMC(0), context size 256,0,mixer(0)
    vmi( SMC,1,8,0,0); //...
    vmi( SMC,2,15,0,0);
    vmi( SMC,3,15,0,0);
    vmi( SMC,4,15,0,0);
    vmi( SMC,5,15,0,0);
    vmi( SMC,6,15,0,0);
    vmi( SMC,7,15,0,0);
    vmi(MX,0,8*2+18+1,1280,5);  // mixer(0), 12 inputs, context size 1280, context sets 5
    r0=0,r1=0,r2=0,r3=0; 
    N=8;
}