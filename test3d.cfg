// Slow general model

// StateMapContext  SMC
// APM1 APM1
// APM2 APM2 //not used
// RunContextMap RCM
// SmallStationaryContextMap  SCM
// MContextMap MCM
// ContextMap CM
// Mixer MX
// SMC,APM1,APM2,RCM,SCM,MCM,CM,MX (1,2,3,4,5,6,7,8,9)
enum {SMC=1,APM1,APM2,RCM,SCM,MCM,CM,MX,MC};
int *t;
int pos00,pos20,posnl;
int *t1;
int *t2;
int word0,word1,word2,word3,word4,word5; 
int nl1,nl,text0;
int c1,c2,c3,frstchar,words,number1,number0,spaces,spacecount,wordcount,wordlen,wordlen1,spafdo;
int mask;
int rlen,rlen1,rlen2,rlen3,rlenl;  // run length and 2 candidates
int rcount1, rcount2,rcount3;  // candidate counts
int *cpos1,*cpos2,*cpos3,*cpos4,*wpos1;

int ic, bc, pc,vc, qc, lvc, wc,f4,w4,tt,prm;
//some custom functions and stuff :)
int min(int a, int b) {return a<b?a:b;}
int max(int a, int b) {return a<b?b:a;} 
int isspace (int c) {
    return ((c == 0x20) ||  (c == 0x09)  ||  (c >= 0x0a) || (c <= 0x0d) );
}
int ispunct (int c) {
    return (((c >= 0x21) && (c <= 0x2f)) || ((c >= 0x3a) && (c <= 0x40)) || ((c >= 0x5b) && (c <= 0x60)) || ((c >= 0x7b) && (c <= 0x7e)));
}
int isalpha (int c) {
    return ((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'));
}
int llog(int x) {
    if (x>=0x1000000)    return 256+ilog(x>>16);
    else if (x>=0x10000) return 128+ilog(x>>8);
    else    return ilog(x);
}
int mpw(int x) {
    if (x<2) return 4;
    if (x==2) return 3;
    if (x>=3 && x<=5) return 2;
    if (x>=6 && x<=11) return 1;
    if (x>=12 && x<=15) return 0;
    //{ 4, 4, 3, 2, 2, 2, 1, 1,  1, 1, 1, 1, 0, 0, 0, 0 };
}
int mpt(int x) {
    if (x<2) return 0;
    if (x==2) return 1;
    if (x==3 ) return 2;
	if (x==4) return 3;
    if (x==5 ) return 4;
    if (x>=6 && x<=7) return 5;
    if (x>=8 && x<=11) return 6;
	if (x>=12 && x<=15) return 7;
    //{ 0, 0, 1, 2, 3, 4, 5, 5,  6, 6, 6, 6, 7, 7, 7, 7 };
}
// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pos){ 
    int i;
    int pr0,pr;
    int d,c;
    int col,h,above;
    int fl,matched,r,vv,order;
    if (bpos== 0){
        c1= buf(1), c2= buf(2), c3= buf(3);
		if (c1>255 ||c2>255 ||c3>255) printf("suur ");
        f4= f4*16+(c1>>4);
        w4= w4*4+mpw(c1>>4);
		tt=tt*8+mpt(c1>>4);
        //normal
        for (i=13; i>0; --i)  // update order 0-11 context hashes
        t[i]=t[i-1]*257+c1;
        for (i=0; i<7; ++i)
        vmx(CM, 0,t[i]); // set context to CM(0)
        vmx(RCM,0,t[7]); // ...
        vmx(CM, 0,t[8]);
        vmx(RCM,1,t[10]);
        vmx(RCM,2,t[12]);
        vmx(CM, 0,t[13]);
        
        //distance
        if (c1==0x00) pos00=pos;
        if (c1==0x20) pos20=pos;
        if (c1==0xff||c1==10||c1==13) posnl=pos;
        vmx(CM, 1,(min(pos-pos00,255)|(c1<<8)));
        vmx(CM, 1,(min(pos-pos20,255)|(c1<<8)));
        vmx(CM, 1,(min(pos-posnl,255)|((c1<<8)+234567)));

        //indirect
        d=c4&0xffff; 
        t1[c2]=(t1[c2]<<8)|c1;
        i=(c4>>8)&0xffff;
        t2[i]=t2[i]<<8|c1;
        i=c1|(t1[c1]<<8);
        vmx(CM, 2,(i&0xffff));
        vmx(CM, 2,(i&0xffffff));
        vmx(CM, 2,(i));
        vmx(CM, 2,(i&0xff00));
        i=d|((int)t2[d]<<16);
        vmx(CM, 2,(i&0xffffff));
        vmx(CM, 2,(i));

        //word
        c=c1;
        if ( spaces&0x80000000) --spacecount;
        if ( words&0x80000000) --wordcount;
        spaces= spaces<<1;
        words= words<<1;
        if (c>='A' && c<='Z')
        c =c+'a'-'A';
        if (c>='a' && c<='z' || c>=128) {
            word0=h2(word0, c);
            text0=text0*15952+c;//997*16
            words=words+1;
            wordlen++;
            wordlen=min(wordlen,45);
        }
        else {
            if (word0) {
                word5=word4;
                word4=word3;
                word3=word2;
                word2=word1;
                word1=word0;
                word0=0;
                wordlen1= wordlen;
                wordlen=0;
            }
            if (c==32 || c==10) { ++spaces, ++spacecount; if (c==10 ) nl1=nl, nl=pos-1;}
            else if (c=='.' || c=='!' || c=='?' || c==',' || c==';' || c==':') spafdo=0; 
            else { ++spafdo; spafdo=min(63,spafdo); }
        }
        if (c>='0' && c<='9') {
             number0=h2(number0, c-'0');
        }
        else if (number0) {
            number1=number0;
            number0=0;
        }
        col=min(255, pos-nl), above=bufr(nl1+col); // text column context
        if (col<=2) frstchar=(col==2?min(c,96):0);
        
        vmx(CM, 3,h3(513,spafdo, spaces));
        vmx(CM, 3,h3(514,frstchar, c));
        vmx(CM, 3,h3(515,col, frstchar));
        vmx(CM, 3,h3(516,spaces, (words&255)));
        vmx(CM, 3,h3(518,wordlen1,col));
        vmx(CM, 3,h3(519,c,spacecount>>1));
        h=wordcount*64+spacecount;
        vmx(CM, 3,h3(517,frstchar,h));
        vmx(CM, 3,h3(521,h,spafdo));
        h=h2(word0,c1);//word0*271+c1;
        vmx(CM, 3,h);
        vmx(CM, 3,word0);
        vmx(CM, 3,h+word1);
        vmx(CM, 3,word0+word1);
        vmx(CM, 3,h+word1+word2);
        vmx(CM, 3,text0&0xffffff);
        vmx(CM, 3,text0&0xfffff);
        vmx(CM, 3,number0+ word2) ;
        vmx(CM, 3,number0+ word1)  ; 
        vmx(CM, 3,number0+ number1) ;
        vmx(CM, 3,word0+number1) ;
        vmx(CM, 3,h+word2);
        vmx(CM, 3,h+word3);
        vmx(CM, 3,h+word4);
        vmx(CM, 3,h+word5);
        vmx(CM, 3,c1|c3<<8|buf(5)<<16);
        vmx(CM, 3,c2|buf(4)<<8|buf(6)<<16);
        vmx(CM, 3,h+word1+word3);
        vmx(CM, 3,h+word2+word3);
        // Text column models
        vmx(CM, 3,col<<16|c1<<8|above);
        vmx(CM, 3,c1<<8|above);
        vmx(CM, 3,col<<8|c1);
        vmx(CM, 3,col);

        //sparse
        vmx(CM, 4, c4&0x00f0f0f0);
        vmx(CM, 4,(c4&0xf0f0f0f0)+1);
        vmx(CM, 4,(c4&0x00f8f8f8)+2);
        vmx(CM, 4,(c4&0xf8f8f8f8)+3);
        vmx(CM, 4,(c4&0x00e0e0e0)+4);
        vmx(CM, 4,(c4&0xe0e0e0e0)+5);
        vmx(CM, 4,(c4&0x00f0f0ff)+6);
        vmx(CM, 4,f4&0x00000fff);
        vmx(CM, 4,spaces&0x7fff);
        vmx(CM, 4,spaces&0xff);
        vmx(CM, 4,words&0x1ffff);
        vmx(CM, 4,(f4&0xffff)<<11| frstchar);
        vmx(CM, 4,c4&0x00ff00ff);
        vmx(CM, 4,c4&0xff0000ff);
        vmx(CM, 4,c1|buf(5)<<8);
        vmx(CM, 4,c1|buf(6)<<8);
        vmx(CM, 4,c3|buf(6)<<8);
        vmx(CM, 4,buf(4)|buf(8)<<8);
        for (  i=1; i<8; ++i) {
            vmx(CM, 4,(buf(i+1)<<8)|buf(i+2));
            vmx(CM, 4,(buf(i+1)<<8)|buf(i+3));
        }
        vmx(CM, 4,w4&0xf0f0f0ff);
        vmx(CM, 4,( w4&63)*128+(5<<17)); 
        vmx(CM, 4, spafdo*8*(( w4&3)==1));
        fl = 0;
        if( c1 != 0 ){
            if( isalpha( c1 ) ) fl = 1;
            else if( ispunct( c1 ) ) fl = 2;
            else if( isspace( c1 ) ) fl = 3;
            else if( c1 == 0xff ) fl = 4;
            else if( c1 < 16 ) fl = 5;
            else if( c1 < 64 ) fl = 6;
            else fl = 7;
        }
        mask = (mask<<3)|fl;
        vmx(CM, 4,mask);
        vmx(CM, 4,mask<<8|c1);
        vmx(CM, 4,mask<<8|col );
        vmx(CM, 4,mask<<17|c2<<8|c3);
        vmx(CM, 4,mask&0x1ff|((c4&0xf0f0f0f0)<<9));
        vmx(SCM, 0, words&127);
        vmx(SCM, 1,( words&12)*16+( w4&12)*4+( f4&0xf));
        vmx(SCM, 2, w4&15);
        vmx(SCM, 3, spafdo*(( w4&3)==1));
        vmx(SCM, 4, frstchar);

        //record
        r= pos-cpos1[c1];
        if (r>1 ){
            if (((r==cpos1[c1]-cpos2[c1])|| (r==cpos2[c1]-cpos3[c1]) || (r==cpos3[c1]-cpos4[c1])) && (r>10 || ((c1==buf(r*5+1)) && c1==buf(r*6+1)))) {
                if (r==rlen1) ++rcount1;
                else if (r==rlen2) ++rcount2;
                else if (r==rlen3) ++rcount3;
                else if (rcount1>rcount2) rlen2=r, rcount2=1;
                else if (rcount2>rcount3) rlen3=r, rcount3=1;
                else rlen1=r, rcount1=1;
            }
        }
        if (rcount1>12 && rlen!=rlen1 && rlenl*2!=rlen1) rlenl=rlen=rlen1, rcount1=rcount2=rcount3=0 ;
        if (rcount2>18 && rlen!=rlen2 && rlenl*2!=rlen2) rlenl=rlen,rlen=rlen2, rcount1=rcount2=rcount3=0 ;
        if (rcount3>24 && rlen!=rlen3 && rlenl*2!=rlen3) rlenl=rlen,rlen=rlen3, rcount1=rcount2=rcount3=0 ;
        // Set 2 dimensional contexts
         vmx(CM, 5,(c1<<8)| (min(255,  pos-cpos1[c1])>>2));
         vmx(CM, 5,(d<<9)| llog(  pos-wpos1[d])>>2);
          vmx(CM, 5,rlen|(buf(rlen)<<10)|(buf(rlen*2)<<18));
        vmx(CM,6,d|(rlen<<8));
        vmx(CM,6,c2|(rlen<<16));
        vmx(CM,6,c1|(rlen<<8));
         vmx(CM,7,(c1<<8)|min(255,  pos-cpos1[c1]));
         vmx(CM,7,(c1<<17)|(buf(2)<<9)|llog( pos-wpos1[d])>>2);
        col= pos%rlen;
		//if (rlen>1) printf("%d ",rlen);
         vmx(CM,7,(c1<<8)|buf(rlen));
      //  vmx(CM,8,rlen|(buf(rlen)<<10)|(col<<18));
       // vmx(CM,8,rlen|(c1<<10)|(col<<18));
       // vmx(CM,8,col|(rlen<<12));
        // update last context positions
        cpos4[c1]=cpos3[c1];
        cpos3[c1]=cpos2[c1];
        cpos2[c1]=cpos1[c1];
        cpos1[c1]= pos;
        wpos1[d]= pos;

        //nest
        matched=1;
		vv=0;
        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') vv = 1; else
        if (c >= 'a' && c <= 'z') vv = 2; else
        if (c == ' ' || c == '.' || c == ',' || c == '!' || c == '?' || c == '\n') vv = 3; else
        if (c >= '0' && c <= '9') vv = 4; else
        if (c == 'y') vv = 5; else
        if (c == '\'') vv = 6; else vv=(c1&32)?7:0;
        vc = (vc << 3) | vv;
        if (vv != lvc) {
            wc = (wc << 3) | vv;
            lvc = vv;
        }
        if (c1==' ')  qc = 0;  
        else if (c1=='(')    ic  =ic+ 513;   
        else if (c1== ')') ic  =ic- 513;  
        else if (c1== '[') ic  = ic+17;  
        else if (c1== ']') ic  =ic- 17; 
        else if (c1== '<') ic  =ic+ 23, qc  = qc+34;  
        else if (c1== '>') ic  =ic- 23, qc  = qc/5;  
        else if (c1== ':') pc = 20;  
        else if (c1== '{') ic  =ic+ 22;  
        else if (c1== '}') ic  =ic- 22;  
        else if (c1== '|') pc  =pc+ 223;  
        else if (c1== '"') pc  =pc+ 0x40;  
        else if (c1== '\'') pc  =pc+ 0x42;  
        else if (c1== '\n') pc = qc = 0;  
        else if (c1== '.') pc = 0;  
        else if (c1== '!') pc = 0;  
        else if (c1== '?') pc = 0;  
        else if (c1== '#') pc  =pc+ 0x08;  
        else if (c1== '%') pc  =pc+ 0x76;  
        else if (c1== '$') pc  =pc+ 0x45;  
        else if (c1== '*') pc  =pc+ 0x35;  
        else if (c1== '-') pc  =pc+ 0x3;  
        else if (c1== '@') pc  =pc+ 0x72;  
        else if (c1== '&') qc  =pc+ 0x12;  
        else if (c1== ';') qc  =qc/ 3;  
        else if (c1== '\\') pc  =pc+ 0x29;  
        else if (c1== '/') {pc  =pc+ 0x11;
            if (buf(1) == '<') qc  =qc+ 74;
        }
        else if (c1== '=') pc  =pc+ 87;  
        else matched = 0;
        
        if (matched) bc = 0; else bc  =bc+ 1;
        if (bc > 300) bc = ic = pc = qc = 0;
        
        vmx(CM,9,(3*vc+77*pc+373*ic+qc)&0xffff);
        vmx(CM,9,(31*vc+27*pc+281*qc)&0xffff);
        vmx(CM,9,(13*vc+271*ic+qc+bc)&0xffff);
        vmx(CM,9,(17*pc+7*ic)&0xffff);
        vmx(CM,9,(13*vc+ic)&0xffff);
        vmx(CM,9,(vc/3+pc)&0xffff);
        vmx(CM,9,(7*wc+qc)&0xffff);
        vmx(CM,9,(vc&0xffff)|(( f4&0xf)<<16));
        vmx(CM,9,((3*pc)&0xffff)|(( f4&0xf)<<16));
        vmx(CM,9,(ic&0xffff)|(( f4&0xf)<<16));
    }
    
    mxa(0,256); //add to mixer(0)
    mxc(0); //mix components into mixer(0) //must be called before gcr - get component result
    // set mixer(0) contexts 
    mxs(0,c1+8, 264); 
    mxs(0, c0,256);
    mxs(0,c2, 256);  
	mxs(0,mask&255, 256);
    mxs(0, gcr(0,0,MC),256); //get match result and set as mixer(0) context
    order=gcr(0,0,CM); //get CM result
    if(order>2) order=order-2; else order=0;
    mxs(0,order*256+( w4&240)+( c3>>4), 2048);
    d= c0<<(8- bpos);
    mxs(0, bpos*256+(((( words<< bpos)&255)>> bpos)|(d&255)),2048);
    if ( bpos) {
        c=d; 
        if ( bpos==1)c =c+(c3>>1);
         c=(min( bpos,5))*256+(c1>>5)+8*(c2>>5)+(c&192);
     }
    else c=(c3>>7)+( c4>>31)*2+4*(c2>>6)+(c1&240); 
    
     mxs(0,c, 1536);
	 mxs(0,prm, 2048);
	 
    pr0=mxp(0); //predict mixer(0)
    pr =apm(0,pr0,c0,7);
	prm=pr>>1;
    return (apm(2,pr, c0+256*c1,7)+apm(1,pr0, h2(c0,w4&0xfffff),7)+1)>>1;
}
void block(int a,int b) { 
     
}
// main is called only once after VM init.
int main() { 
    if (!(t = malloc(14*sizeof(int)))) {  exit(-1); }
    if (!(t1 = malloc(256*sizeof(int)))) {  exit(-1); }
    if (!(t2 = malloc(0x10000*sizeof(int)))) {   exit(-1); }
    if (!(cpos1 = malloc(256*sizeof(int)))) {   exit(-1); }
    if (!(cpos2 = malloc(256*sizeof(int)))) {  exit(-1); }
    if (!(cpos3 = malloc(256*sizeof(int)))) {   exit(-1); }
    if (!(cpos4 = malloc(256*sizeof(int)))) {  exit(-1); }
    if (!(wpos1 = malloc(0x10000*sizeof(int)))) {   exit(-1); }
    //SMC,APM1,APM2,RCM,SCM,MCM,CM,MX,MC (1,2,3,4,5,6,7,8,9)
    vms( 0,3,0,3,5,0,10,1,1) ; //set 3 apm, 3 rcm,1 scm,9 cm, 1 mixer,1 match
    vmi(RCM,0,-4,0,0); //RCM(0) mem/4, 0, mixer 0
    vmi(RCM,1,-4,0,0); //RCM(1) mem/4, 0, mixer 0
    vmi(RCM,2,-2,0,0); //RCM(2) mem/2, 0, mixer 0
    vmi(CM,0,32,9,0);  //CM(0) mem*32, 9 contexts, mixer 0  //normal
    vmi(CM,1,-2,3,0);  //CM(1) mem/2, 3 contexts, mixer 0   //dictance
    vmi(CM,2,1,6,0);   //indirect
    vmi(CM,3,32,31,0); //wordmodel
    vmi(CM,4,2,48,0);  //sparse
    vmi(CM,5,-2 ,3,0); //record
    vmi(CM,6,-2,3,0);  //record
    vmi(CM,7,1,3,0);   //record
    vmi(CM,8,2,3,0);   //record
    vmi(CM,9,-2,10,0); //nest
    vmi(MC,0,-2,4096,0);//match(0), mem/2,len 4096,mixer(0)
    vmi(SCM,0,16,0,0);
    vmi(SCM,1,16,0,0);
    vmi(SCM,2,16,0,0);
    vmi(SCM,3,15,0,0);
    vmi(SCM,4,16,0,0);
    vmi(APM1,0,256,0,-1);  //APM1(0) contexts, 0, no mixer
    vmi(APM1,1,0x10000,0,-1);
    vmi(APM1,2,0x10000,0,-1);
    vmi(MX,0,682+200+18,6665+256+2048,9);  //MX(0) 51 inputs, contexts, context count
    // init variables
    pos00=pos20=posnl=0;
    word0=word1=word2=word3=word4=word5=text0=0;
    nl1=-3, nl=-2;
    mask=c1=c2=c3=0;
    rlen=2, rlen1=3, rlen2=4, rlen3=5,rlenl=rcount1=rcount2=rcount3=0;
    ic=bc=pc=vc=qc=lvc=wc=f4=words=number1=number0=0;
    frstchar=spaces=spacecount=wordcount=wordlen=wordlen1=spafdo=w4=f4=tt=0;
    prm=1024;
}
