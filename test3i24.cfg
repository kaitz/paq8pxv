// Model for 24 bit image data

enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM};

il[65536]={}; 
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int w,col,c1,c2,c3,bufpos,color;
int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int sqrbuf(int i) {
    return buffer[(bufpos-i)&BMASK]*buffer[(bufpos-i)&BMASK];
}

// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pos){ 
    int i,logvar,var,mean,cw;
    int hc3,hcw,hcwc1;
    if (bpos== 0){ 
        buffer[bufpos]=c4&0xff;
        bufpos++;
        bufpos=bufpos&BMASK;
        c3=c2,c2=c1;
        c1= buf(1);
        color=bufpos%3;
        cw= buf(w); 
        mean=c3+buf(w-3)+cw+buf(w+3);
        var=(sqrbuf(3)+sqrbuf(w-3)+sqrbuf(w)+sqrbuf(w+3)-mean*mean/4)>>2;
        mean=mean>>2;
        logvar=il[var];
        i=color<<4;
        hc3=h2(c3,0);
        hcw=h2(cw,0);
        hcwc1=h2(hcw, c1);
        vmx(CM, 0,hc3);
        vmx(CM, 0,h2(hc3, c1));
        vmx(CM, 0,h2(h2(h2(++i, c3), c1), c2));
        vmx(CM, 0,hcw);
        vmx(CM, 0,hcwc1);
        vmx(CM, 0,h2(hcwc1, c2));
        vmx(CM, 0,h2(h2(h2(++i, (c3+cw)>>3), c1>>4), c2>>4));
        vmx(CM, 0,h2(h2(++i,c1),c2));
        vmx(CM, 0,h2(h2(++i, c3), c1-buf(4)));
        vmx(CM, 0,h2(++i, c3+c1-buf(4)));
        vmx(CM, 0,h2(hcw, c1-buf(w+1)));
        vmx(CM, 0,h2(++i, cw+c1-buf(w+1)));
        vmx(CM, 0,h2(h2(++i, buf(w*3-3)), buf(w*3-6)));
        vmx(CM, 0,h2(h2(++i, buf(w*3+3)), buf(w*3+6)));
        vmx(CM, 0,h2(h2(++i, mean), logvar>>4));
        vmx(SCM, 0,c3+cw-buf(w+3));
        vmx(SCM, 1,c3+buf(w-3)-cw);
        vmx(SCM, 2,c3*2-buf(6));
        vmx(SCM, 3,cw*2-buf(w*2));
        vmx(SCM, 4,buf(w+3)*2-buf(w*2+6));
        vmx(SCM, 5,buf(w-3)*2-buf(w*2-6));
        vmx(SCM, 6,buf(w-3)+c1-buf(w-2));
        vmx(SCM, 7,cw+buf(w-3)-buf(w*2-3));
        vmx(SCM, 8,(mean>>1)|(logvar<<1&0x180));
         
    }
    if (++col>=24) col=0;
    // set mixer(0) contexts 
    vmx(MX,0,5);               //   6
    vmx(MX,0,(c3+buf(6))>>6);  //   8
    vmx(MX,0,col);             //  24
    vmx(MX,0,(c1>>4)*3+color); //  48
    vmx(MX,0,c0);              // 256
    vmx(APM1,0,h2(h2(c0, c3), buf(6)));
    vmx(APM1,1,h2(h2(c0, buf(w)), buf(w*2)));
    return 0;
}
//VM calls this after every image block
void block(int a,int b) { 
    w=a; //get block info, image width
}
// main is called only once after VM init.
int main() { 
int x,i;
    //{SMC,APM1,DS,AVG,SCM,RCM,CM,MX,ST};
    vms( 0,   2, 0,  1, 10,  0, 1, 1, 1,0); 
    vmi(ST,0,144,0,0);
    vmi(CM,0,4,15,0); 
    vmi(SCM,0,16,0,0);
    vmi(SCM,1,16,0,0);
    vmi(SCM,2,16,0,0);
    vmi(SCM,3,16,0,0);
    vmi(SCM,4,16,0,0);
    vmi(SCM,5,16,0,0);
    vmi(SCM,6,16,0,0);
    vmi(SCM,7,16,0,0);
    vmi(SCM,8,16,0,0);
    vmi(SCM,9,9,0,0);
    vmi(MX,0,15*6+9*2+1+18,598,5);//pr[0]=mixer(0)
    mxs(0,6);
    mxs(0,8);
    mxs(0,24);
    mxs(0,48);
    mxs(0,256);
    vmi(APM1,0,0x10000,7,0);     // pr[1]=apm(pr[0])
    vmi(APM1,1,0x10000,7,0);     // pr[2]=apm(pr[0])
    vmi(AVG,0,0,1,2);            // pr[4]=avg(pr[1],pr[2])
    
    col=bufpos=c1=c2=c3=color=0;
    x=14155776;
  for ( i=2; i<65536; ++i) {
    x=(x+(774541002/((i<<1)-1)))&0x7FFFFFFF;  // numerator is 2^29/ln 2
    il[i]=x>>24;
  }
}
