// Model for 24 bit image data

enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST};

int mpw[16]= {4,4,3,2,2,2,1,1,1,1,1,1,0,0,0,0};
il[65536]={}; 
int w,col,w4;
int sqrbuf(int i) {
    return buf(i)*buf(i);
}
// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pos){ 
    int i,logvar,var,mean,color,c1,c3,cw;
    int pr0,pr;
    c1= buf(1);
    color=pos%3;
    if (bpos== 0){ 
        cw= buf(w); 
        c3= buf(3);
        w4= w4*4+mpw[c1>>4];
        mean=c3+buf(w-3)+cw+buf(w+3);
        var=(sqrbuf(3)+sqrbuf(w-3)+sqrbuf(w)+sqrbuf(w+3)-mean*mean/4)>>2;
        mean=mean>>2;
        logvar=il[var];
        i=color<<4;
        vmx(CM, 0,h2(++i, c3));
        vmx(CM, 0,h3(++i, c3, c1));
        vmx(CM, 0,h4(++i, c3, c1, buf(2)));
        vmx(CM, 0,h2(++i, cw));
        vmx(CM, 0,h3(++i, cw, c1));
        vmx(CM, 0,h4(++i, cw, c1, buf(2)));
        vmx(CM, 0,h4(++i, (c3+cw)>>3, c1>>4, buf(2)>>4));
        vmx(CM, 0,h3(++i, c1, buf(2)));
        vmx(CM, 0,h3(++i, c3, c1-buf(4)));
        vmx(CM, 0,h2(++i, c3+c1-buf(4)));
        vmx(CM, 0,h3(++i, cw, c1-buf(w+1)));
        vmx(CM, 0,h2(++i, cw+c1-buf(w+1)));
        vmx(CM, 0,h3(++i, buf(w*3-3), buf(w*3-6)));
        vmx(CM, 0,h3(++i, buf(w*3+3), buf(w*3+6)));
        vmx(CM, 0,h3(++i, mean, logvar>>4));
        vmx(SCM, 0,c3+cw-buf(w+3));
        vmx(SCM, 1,c3+buf(w-3)-cw);
        vmx(SCM, 2,c3*2-buf(6));
        vmx(SCM, 3,cw*2-buf(w*2));
        vmx(SCM, 4,buf(w+3)*2-buf(w*2+6));
        vmx(SCM, 5,buf(w-3)*2-buf(w*2-6));
        vmx(SCM, 6,buf(w-3)+c1-buf(w-2));
        vmx(SCM, 7,cw+buf(w-3)-buf(w*2-3));
        vmx(SCM, 8,(mean>>1)|(logvar<<1&0x180));
         
    }
    if (++col>=24) col=0;
    // set mixer(0) contexts 
    vmx(MX,0,(buf(3)+buf(6))>>6);// 8
    vmx(MX,0,col);//, 24);
    vmx(MX,0,(c1>>4)*3+color);// 48
    vmx(MX,0,c0);//, 256);
    //vmx(MX,0,w4&0xff);// 256
   //  vmx(APM1,0,c0);
   //  vmx(APM1,1,c0+256*c1);
   //  vmx(APM1,2,h2(c0,w4&0xfffff));
    return 0;
}
//VM calls this after every image block
void block(int a,int b) { 
    w=a; //get block info, image width
}
// main is called only once after VM init.
int main() { 
int x,i;
    //{SMC,APM1,DS,AVG,SCM,RCM,CM,MX,ST};
    vms( 0,   0, 0,  0, 10,  0, 1, 1, 1); 
    vmi(ST,0,144,0,0);
    vmi(CM,0,4,15,0); 
    vmi(SCM,0,16,0,0);
    vmi(SCM,1,16,0,0);
    vmi(SCM,2,16,0,0);
    vmi(SCM,3,16,0,0);
    vmi(SCM,4,16,0,0);
    vmi(SCM,5,16,0,0);
    vmi(SCM,6,16,0,0);
    vmi(SCM,7,16,0,0);
    vmi(SCM,8,16,0,0);
    vmi(SCM,9,9,0,0);
    vmi(MX,0,15*6+9*2+1+18,848-256,4);//pr[0]=mixer(0)
    mxs(0,8);
    mxs(0,24);
    mxs(0,48);
    mxs(0,256);
   // mxs(0,256);
    //mxs(0,8); 
   // vmi(APM1,0,256,7,0);         // pr[1]=apm(pr[0])
   // vmi(APM1,1,0x10000,7,1);     // pr[2]=apm(pr[1])
   // vmi(APM1,2,0x10000,7,0);     // pr[3]=apm(pr[0])
   // vmi(AVG,0,0,2,3);            // pr[4]=avg(pr[2],pr[3])
    
    col=0;
    x=14155776;
  for ( i=2; i<65536; ++i) {
    x=(x+(774541002/((i<<1)-1)))&0x7FFFFFFF;  // numerator is 2^29/ln 2
    il[i]=x>>24;
  }
}
