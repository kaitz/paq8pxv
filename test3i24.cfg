// Model for 24 bit image data

// StateMapContext  SMC
// APM1 APM1
// APM2 APM2 //not used
// RunContextMap RCM
// SmallStationaryContextMap  SCM
// MContextMap MCM
// ContextMap CM
// Mixer MX
// SMC,APM1,APM2,RCM,SCM,MCM,CM,MX (1,2,3,4,5,6,7,8,9)
enum {SMC=1,APM1,APM2,RCM,SCM,MCM,CM,MX,MC};
 
int w,col,w4;

int mpw(int x) {
    if (x<2) return 4;
    if (x==2) return 3;
    if (x>=3 && x<=5) return 2;
    if (x>=6 && x<=11) return 1;
    if (x>=12 && x<=15) return 0;
    //{ 4, 4, 3, 2, 2, 2, 1, 1,  1, 1, 1, 1, 0, 0, 0, 0 };
}
int sqrbuf(int i) {
    return buf(i)*buf(i);
}
// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pos){ 
    int i,logvar,var,mean,color,c1,c3,cw;
    int pr0,pr;
    c1= buf(1);
    color=pos%3;
    if (bpos== 0){ 
        cw= buf(w); 
        c3= buf(3);
        w4= w4*4+mpw(c1>>4);
        mean=c3+buf(w-3)+cw+buf(w+3);
        var=(sqrbuf(3)+sqrbuf(w-3)+sqrbuf(w)+sqrbuf(w+3)-mean*mean/4)>>2;
        mean=mean>>2;
        logvar=ilog(var);
        i=color<<4;
        vmx(CM, 0,h2(++i, c3));
        vmx(CM, 0,h3(++i, c3, c1));
        vmx(CM, 0,h4(++i, c3, c1, buf(2)));
        vmx(CM, 0,h2(++i, cw));
        vmx(CM, 0,h3(++i, cw, c1));
        vmx(CM, 0,h4(++i, cw, c1, buf(2)));
        vmx(CM, 0,h4(++i, (c3+cw)>>3, c1>>4, buf(2)>>4));
        vmx(CM, 0,h3(++i, c1, buf(2)));
        vmx(CM, 0,h3(++i, c3, c1-buf(4)));
        vmx(CM, 0,h2(++i, c3+c1-buf(4)));
        vmx(CM, 0,h3(++i, cw, c1-buf(w+1)));
        vmx(CM, 0,h2(++i, cw+c1-buf(w+1)));
        vmx(CM, 0,h3(++i, buf(w*3-3), buf(w*3-6)));
        vmx(CM, 0,h3(++i, buf(w*3+3), buf(w*3+6)));
        vmx(CM, 0,h3(++i, mean, logvar>>4));
        vmx(SCM, 0,c3+cw-buf(w+3));
        vmx(SCM, 1,c3+buf(w-3)-cw);
        vmx(SCM, 2,c3*2-buf(6));
        vmx(SCM, 3,cw*2-buf(w*2));
        vmx(SCM, 4,buf(w+3)*2-buf(w*2+6));
        vmx(SCM, 5,buf(w-3)*2-buf(w*2-6));
        vmx(SCM, 6,buf(w-3)+c1-buf(w-2));
        vmx(SCM, 7,cw+buf(w-3)-buf(w*2-3));
        vmx(SCM, 8,(mean>>1)|(logvar<<1&0x180));
         
    }
    mxa(0,256);//add to mixer(0)
    mxc(0); //mix components into mixer(0)
    if (++col>=24) col=0;
    // set mixer(0) contexts 
    mxs(0,(buf(3)+buf(6))>>6, 8);
    mxs(0,col, 24);
    mxs(0,(c1>>4)*3+color, 48);
    mxs(0,c0, 256);
    mxs(0,w4&0xff, 256);
    mxs(0, gcr(0,0,MC),256); //get match result and set as mixer(0) context
     
    pr0=mxp(0); //predict mixer(0)
    pr =apm(0,pr0,c0,7);
    return (apm(2,pr, c0+256*c1,7)+apm(1,pr0, h2(c0,w4&0xfffff),7)+1)>>1;
}
//VM calls this after every image block
void block(int a,int b) { 
    w=a; //get block info, image width
}
// main is called only once after VM init.
int main() { 
    //SMC,APM1,APM2,RCM,SCM,MCM,CM,MX,MC (1,2,3,4,5,6,7,8,9)
    vms( 0,3,0,0,10,0,1,1,1); 
    vmi(CM,0,4,15,0); 
    vmi(MC,0,1,4096,0);//match(0), mem*1, maxlen 4096, mixer(0)
    vmi(SCM,0,16,0,0);
    vmi(SCM,1,16,0,0);
    vmi(SCM,2,16,0,0);
    vmi(SCM,3,16,0,0);
    vmi(SCM,4,16,0,0);
    vmi(SCM,5,16,0,0);
    vmi(SCM,6,16,0,0);
    vmi(SCM,7,16,0,0);
    vmi(SCM,8,16,0,0);
    vmi(SCM,9,9,0,0);
    vmi(APM1,0,256,0,-1);
    vmi(APM1,1,0x10000,0,-1);
    vmi(APM1,2,0x10000,0,-1);
    vmi(MX,0,15*6+9*2+1+18,848,6);// mixer(0), 104 inputs, context size 848, context sets 6
    col=0;
}
