// Model for 24 bit image data

enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM,SK,APM2,ERR,TAPM,UAS,LMX,STA,BYT};
il[65536]={}; 
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int w,col,c1,c2,c3,bufpos,color;
int m_m[6]={14, 33, 22, 25, 33, 23};
int m_e[6]={128, 104, 240, 250, 149, 71};
int m_s[6]={10, 12, 48, 62, 35, 9};
int cm_sm[15]={};  // run
int cm_cm1[15]={44, 34, 34, 37, 32, 36, 21, 29, 32, 30, 40, 35, 37, 41, 39}; // sm 1
int cm_cm2[15]={14, 13, 14, 11, 23, 17, 14,  8, 14, 15, 21, 10, 13, 17, 18}; // sm 2
int m_sm[2]={12,15};
int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int sqrbuf(int i) {
    return buffer[(bufpos-i)&BMASK]*buffer[(bufpos-i)&BMASK];
}

// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pr){ 
    int i,logvar,var,mean,cw,j,b;
    int hc3,hcw,hcwc1;
    if (bpos== 0){ 
        buffer[bufpos]=c4&0xff;
        bufpos++;
        bufpos=bufpos&BMASK;
        c3=c2,c2=c1;
        c1= buf(1);
        color=bufpos%3;
        cw= buf(w); 
        mean=c3+buf(w-3)+cw+buf(w+3);
        var=(sqrbuf(3)+sqrbuf(w-3)+sqrbuf(w)+sqrbuf(w+3)-mean*mean/4)>>2;
        mean=mean>>2;
        logvar=il[var];
        i=color<<4;
        hc3=h2(c3,0);
        hcw=h2(cw,0);
        hcwc1=h2(hcw, c1);
        j=0;
        vmx(CM, j++,hc3);
        vmx(CM, j++,h2(hc3, c1));
        vmx(CM, j++,h2(h2(h2(++i, c3), c1), c2));
        vmx(CM, j++,hcw);
        vmx(CM, j++,hcwc1);
        vmx(CM, j++,h2(hcwc1, c2));
        vmx(CM, j++,h2(h2(h2(++i, (c3+cw)>>3), c1>>4), c2>>4));
        vmx(CM, j++,h2(h2(++i,c1),c2));
        vmx(CM, j++,h2(h2(++i, c3), c1-buf(4)));
        vmx(CM, j++,h2(++i, c3+c1-buf(4)));
        vmx(CM, j++,h2(hcw, c1-buf(w+1)));
        vmx(CM, j++,h2(++i, cw+c1-buf(w+1)));
        vmx(CM, j++,h2(h2(++i, buf(w*3-3)), buf(w*3-6)));
        vmx(CM, j++,h2(h2(++i, buf(w*3+3)), buf(w*3+6)));
        vmx(CM, j++,h2(h2(++i, mean), logvar>>4));
        vmx(SCM, 0,c3+cw-buf(w+3));
        vmx(SCM, 1,c3+buf(w-3)-cw);
        vmx(SCM, 2,c3*2-buf(6));
        vmx(SCM, 3,cw*2-buf(w*2));
        vmx(SCM, 4,buf(w+3)*2-buf(w*2+6));
        vmx(SCM, 5,buf(w-3)*2-buf(w*2-6));
        vmx(SCM, 6,buf(w-3)+c1-buf(w-2));
        vmx(SCM, 7,cw+buf(w-3)-buf(w*2-3));
        vmx(SCM, 8,(mean>>1)|(logvar<<1&0x180));
    }
    b=(c0<<(8-bpos)); 
    vmx(SM, 0,(buf(3)+cw-buf(3+w)-b)<<3|bpos);
    vmx(SM, 1,(cw-b)<<3|bpos);
    if (++col>=24) col=0;
    vmx(MX,0,5);               //   6
    vmx(MX,1,(c3+buf(6))>>6);  //   8
    vmx(MX,2,col);             //  24
    vmx(MX,3,(c1>>4)*3+color); //  48
    vmx(MX,4,c0);              // 256
    //vmx(MX,5,0);  
    vmx(APM1,0,h2(h2(c0, c3), buf(6)));
    vmx(APM1,1,h2(h2(c0, cw), buf(w*2)));
    return 0;
}
//VM calls this after every image block
void block(int a,int b) { 
    w=a; //get block info, image width
}
// main is called only once after VM init.
int main() { 
    int x,i;
    vms(0,2,0,1,10,0,15,6,1,5,0,2,0,0,0,0,0,0,0,0); 
    vmi(ST,0,144,0,0);
    for (i=0;i<15;i++) vmi(CM,i,1024,1+cm_sm[i]*256+cm_cm1[i]*0x10000+cm_cm2[i]*0x1000000,0);
    for (i=0;i<9;i++)  vmi(SCM,i,16,0,0);
    vmi(SCM,9,9,0,0);
    for (i=0;i<2;i++) vmi(SM,i,11,1+256*m_sm[i],0);
    vmi(MX,0,m_s[0]+256*m_e[0] +0x1000000*m_m[0],6 ,0);   vmi(MM,0,0,0,1);
    vmi(MX,1,m_s[1]+256*m_e[1] +0x1000000*m_m[1],8 ,0);   vmi(MM,1,0,1,1);
    vmi(MX,2,m_s[2]+256*m_e[2] +0x1000000*m_m[2],24 ,0);  vmi(MM,2,0,2,1);
    vmi(MX,3,m_s[3]+256*m_e[3] +0x1000000*m_m[3],48 ,0);  vmi(MM,3,0,3,1);
    vmi(MX,4,m_s[4]+256*m_e[4] +0x1000000*m_m[4],256 ,0); vmi(MM,4,0,4,1);
    vmi(MX,5,m_s[5]+256*m_e[5] +0x1000000*m_m[5],1 ,1);
    vmi(APM1,0,0x10000,7,5);
    vmi(APM1,1,0x10000,7,5);
    vmi(AVG,0,1|(1<<8),0,6+7*256);

    // calc log table
    x=14155776;
    for (i=2; i<65536; ++i) {
        x=(x+(774541002/((i<<1)-1)));  // numerator is 2^29/ln 2
        il[i]=x>>24;
    }
}
