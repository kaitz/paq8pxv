// Model for 24 bit image data

enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM};
il[65536]={}; 
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int w,col,c1,c2,c3,bufpos,color;
int s_m[15]={7, 7, 11, 8, 7, 8, 8, 8, 7, 9, 7, 9, 6, 8, 9};
int m_m[6]={14, 33, 22, 25, 33, 23};
int m_e[6]={128, 104, 240, 250, 149, 71};
int m_s[6]={10, 12, 48, 62, 35, 9};

int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int sqrbuf(int i) {
    return buffer[(bufpos-i)&BMASK]*buffer[(bufpos-i)&BMASK];
}

// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pr){ 
    int i,logvar,var,mean,cw;
    int hc3,hcw,hcwc1;
    if (bpos== 0){ 
        buffer[bufpos]=c4&0xff;
        bufpos++;
        bufpos=bufpos&BMASK;
        c3=c2,c2=c1;
        c1= buf(1);
        color=bufpos%3;
        cw= buf(w); 
        mean=c3+buf(w-3)+cw+buf(w+3);
        var=(sqrbuf(3)+sqrbuf(w-3)+sqrbuf(w)+sqrbuf(w+3)-mean*mean/4)>>2;
        mean=mean>>2;
        logvar=il[var];
        i=color<<4;
        hc3=h2(c3,0);
        hcw=h2(cw,0);
        hcwc1=h2(hcw, c1);
        vmx(CM, 0,hc3);
        vmx(CM, 0,h2(hc3, c1));
        vmx(CM, 0,h2(h2(h2(++i, c3), c1), c2));
        vmx(CM, 0,hcw);
        vmx(CM, 0,hcwc1);
        vmx(CM, 0,h2(hcwc1, c2));
        vmx(CM, 0,h2(h2(h2(++i, (c3+cw)>>3), c1>>4), c2>>4));
        vmx(CM, 0,h2(h2(++i,c1),c2));
        vmx(CM, 0,h2(h2(++i, c3), c1-buf(4)));
        vmx(CM, 0,h2(++i, c3+c1-buf(4)));
        vmx(CM, 0,h2(hcw, c1-buf(w+1)));
        vmx(CM, 0,h2(++i, cw+c1-buf(w+1)));
        vmx(CM, 0,h2(h2(++i, buf(w*3-3)), buf(w*3-6)));
        vmx(CM, 0,h2(h2(++i, buf(w*3+3)), buf(w*3+6)));
        vmx(CM, 0,h2(h2(++i, mean), logvar>>4));
        vmx(SCM, 0,c3+cw-buf(w+3));
        vmx(SCM, 1,c3+buf(w-3)-cw);
        vmx(SCM, 2,c3*2-buf(6));
        vmx(SCM, 3,cw*2-buf(w*2));
        vmx(SCM, 4,buf(w+3)*2-buf(w*2+6));
        vmx(SCM, 5,buf(w-3)*2-buf(w*2-6));
        vmx(SCM, 6,buf(w-3)+c1-buf(w-2));
        vmx(SCM, 7,cw+buf(w-3)-buf(w*2-3));
        vmx(SCM, 8,(mean>>1)|(logvar<<1&0x180));
    }
    if (++col>=24) col=0;
    vmx(MX,0,5);               //   6
    vmx(MX,1,(c3+buf(6))>>6);  //   8
    vmx(MX,2,col);             //  24
    vmx(MX,3,(c1>>4)*3+color); //  48
    vmx(MX,4,c0);              // 256
    //vmx(MX,5,0);  
    //vmx(SMC,0,c0); 
    //vmx(SMC,1,c0|(c1<<8)); 
    vmx(APM1,0,h2(h2(c0, c3), buf(6)));
    vmx(APM1,1,h2(h2(c0, buf(w)), buf(w*2)));
    return 0;
}
//VM calls this after every image block
void block(int a,int b) { 
    w=a; //get block info, image width
}
// main is called only once after VM init.
int main() { 
    int x,i;
    //{SMC,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM};
    vms( 0,   2, 0,  1, 10,  0, 1, 6, 1,5,0,0,0,0); 
    vmi(ST,0,144,0,0);          // output prediction to input[0]
    vmi(CM,0,4*4096,15+256*4,0); 
    //for (i=0;i<15;i++) vmi(SM,i,16,8+s_m[i]*256,0);
    //vmi(SMC,0,0x100,1023,0);
    //vmi(SMC,1,0x10000,1023,0);
    vmi(SCM,0,16,0,0);
    vmi(SCM,1,16,0,0);
    vmi(SCM,2,16,0,0);
    vmi(SCM,3,16,0,0);
    vmi(SCM,4,16,0,0);
    vmi(SCM,5,16,0,0);
    vmi(SCM,6,16,0,0);
    vmi(SCM,7,16,0,0);
    vmi(SCM,8,16,0,0);
    vmi(SCM,9,9,0,0);
    //MX -> index,shift ,context limit ,inputsindex
    vmi(MX,0,m_s[0]+256*m_e[0] +0x1000000*m_m[0],6 ,0);    // pr[0]=mixer.p(input[0],5,6)      mix predictions from intput[0], shift final prediction by 5, with context upto 6, output to pr[x] //
        vmi(MM,0,0,0,1);        // input[1].add(pr[mixer(0)])       add prediction from pr[x] to input[1]
    vmi(MX,1,m_s[1]+256*m_e[1] +0x1000000*m_m[1],8 ,0);    // pr[1]=mixer.p(input[0],5,8)
        vmi(MM,1,0,1,1);        // input[1].add(pr[mixer(1)]) 
    vmi(MX,2,m_s[2]+256*m_e[2] +0x1000000*m_m[2],24 ,0);  // pr[2]=mixer.p(input[0],5,24)
        vmi(MM,2,0,2,1);        // input[1].add(pr[mixer(2)]) 
    vmi(MX,3,m_s[3]+256*m_e[3] +0x1000000*m_m[3],48 ,0);  // pr[3]=mixer.p(input[0],5,48)
        vmi(MM,3,0,3,1);        // input[1].add(pr[mixer(3)]) 
    vmi(MX,4,m_s[4]+256*m_e[4] +0x1000000*m_m[4],256 ,0); // pr[4]=mixer.p(input[0],5,256)
        vmi(MM,4,0,4,1);        // input[1].add(pr[mixer(4)]) 
    vmi(MX,5,m_s[5]+256*m_e[5] +0x1000000*m_m[5],1 ,1);    // pr[5]=mixer.p(input[1],8,1)      mix predictions from intput[1], shift final prediction by 8, with context upto 1, output to pr[x] //   final mixer
    vmi(APM1,0,0x10000,7,5);    // pr[6]=apm(pr[0])
    vmi(APM1,1,0x10000,7,5);    // pr[7]=apm(pr[0])
    vmi(AVG,0,0,6,7);           // pr[8]=avg(pr[1],pr[2])

    // calc log table
    x=14155776;
    for (i=2; i<65536; ++i) {
        x=(x+(774541002/((i<<1)-1)));  // numerator is 2^29/ln 2
        il[i]=x>>24;
    }
}
