// Model for exe

enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM,SK,APM2,ERR,TAPM,UAS,LMX};
int t[14]={},t1[256]={},t3[256]={}; //  ={} - let VM to alloc memory and set values to 0
int pos00,pos20,posnl,info,opr;
short t2[0x10000]={};
int c1,c2,c3,ord;
int mask,Misses;
int rlen=2, rlen1=3, rlen2=4, rlen3=5,rlenl;  // run length and 2 candidates
int rcount1, rcount2,rcount3;  // candidate counts
int cpos1[256]={},cpos2[256]={},cpos3[256]={},cpos4[256]={},wpos1[0x10000]={};
int ic, bc, pc,vc, qc, lvc, wc,f4,w4,tt,x1;
int mpw[16]= {4,4,3,2,2,2,1,1,1,1,1,1,0,0,0,0};
int mtt[16]= {0,0,1,2,3,4,5,5,6,6,6,6,7,7,7,7};
int m_m[13]={22, 26, 32, 37, 35, 24, 7, 31, 37, 34, 23, 29, 15};
int c_s[12]= {36, 31, 40, 38, 30, 33, 31, 31, 38, 26, 28, 36};
int c_r[12]= {6, 2, 4, 6, 6, 3, 2, 2, 4, 5, 4, 5};
int m_s[13]={9,26,65,10,51,21,20,46,33,14,3,73,12};
int m_e[13]={1856, 2433, 1167, 782, 2303, 1523, 329, 972, 869, 3726, 1172, 1313, 63};

int il[65536]={};
int primes[14]={ 0, 257,251,241,239,233,229,227,223,211,199,197,193,191 };
int MAXLEN=65534; // longest allowed match + 1
int tm[0x100000]={};    // hash table of pointers to contexts
int h;      // hash of last 7 bytes
int ptr;    // points to next byte of match if any
int len;    // length of match, or 0 if no match
int match;
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int bufpos,pos;

int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int bufr(int i){
    return buffer[(i)&BMASK];
}
// exe
enum InstructionFormat {
  // encoding mode
  fNM = 0x0,      // no ModRM
  fAM = 0x1,      // no ModRM, "address mode" (jumps or direct addresses)
  fMR = 0x2,      // ModRM present
  fMEXTRA = 0x3,  // ModRM present, includes extra bits for opcode
  fMODE = 0x3,    // bitmask for mode

  // no ModRM: size of immediate operand
  fNI = 0x0,      // no immediate
  fBI = 0x4,      // byte immediate
  fWI = 0x8,      // word immediate
  fDI = 0xc,      // dword immediate
  fTYPE = 0xc,    // type mask

  // address mode: type of address operand
  fAD = 0x0,      // absolute address
  fDA = 0x4,      // dword absolute jump target
  fBR = 0x8,      // byte relative jump target
  fDR = 0xc,      // dword relative jump target

  // others
  fERR = 0xf     // denotes invalid opcodes
};
char Table1[256] = {
  // 0       1       2       3       4       5       6       7       8       9       a       b       c       d       e       f
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fBI,fNM|fDI,fNM|fNI,fNM|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fBI,fNM|fDI,fNM|fNI,fNM|fNI, // 0
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fBI,fNM|fDI,fNM|fNI,fNM|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fBI,fNM|fDI,fNM|fNI,fNM|fNI, // 1
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fBI,fNM|fDI,fNM|fNI,fNM|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fBI,fNM|fDI,fNM|fNI,fNM|fNI, // 2
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fBI,fNM|fDI,fNM|fNI,fNM|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fBI,fNM|fDI,fNM|fNI,fNM|fNI, // 3

  fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI, // 4
  fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI, // 5
  fNM|fNI,fNM|fNI,fMR|fNI,fMR|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fDI,fMR|fDI,fNM|fBI,fMR|fBI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI, // 6
  fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR, // 7

  fMR|fBI,fMR|fDI,fMR|fBI,fMR|fBI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // 8
  fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fAM|fDA,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI, // 9
  fAM|fAD,fAM|fAD,fAM|fAD,fAM|fAD,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fBI,fNM|fDI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI, // a
  fNM|fBI,fNM|fBI,fNM|fBI,fNM|fBI,fNM|fBI,fNM|fBI,fNM|fBI,fNM|fBI,fNM|fDI,fNM|fDI,fNM|fDI,fNM|fDI,fNM|fDI,fNM|fDI,fNM|fDI,fNM|fDI, // b

  fMR|fBI,fMR|fBI,fNM|fWI,fNM|fNI,fMR|fNI,fMR|fNI,fMR|fBI,fMR|fDI,fNM|fBI,fNM|fNI,fNM|fWI,fNM|fNI,fNM|fNI,fNM|fBI,fERR   ,fNM|fNI, // c
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fBI,fNM|fBI,fNM|fNI,fNM|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // d
  fAM|fBR,fAM|fBR,fAM|fBR,fAM|fBR,fNM|fBI,fNM|fBI,fNM|fBI,fNM|fBI,fAM|fDR,fAM|fDR,fAM|fAD,fAM|fBR,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI, // e
  fNM|fNI,fERR   ,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fMEXTRA,fMEXTRA,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fMEXTRA,fMEXTRA, // f
};

// 2 byte opcodes
char Table2[256] = {
  // 0       1       2       3       4       5       6       7       8       9       a       b       c       d       e       f
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fNM|fNI,fERR   ,fNM|fNI,fNM|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 0
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 1
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // 2
  fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fERR   ,fNM|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 3

  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // 4
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // 5
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // 6
  fMR|fBI,fMR|fBI,fMR|fBI,fMR|fBI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fMR|fNI,fMR|fNI, // 7

  fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR,fAM|fDR, // 8
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // 9
  fNM|fNI,fNM|fNI,fNM|fNI,fMR|fNI,fMR|fBI,fMR|fNI,fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fMR|fNI,fMR|fBI,fMR|fNI,fERR   ,fMR|fNI, // a
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // b

  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI,fNM|fNI, // c
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // d
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // e
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fERR   , // f
};

// 3 byte opcodes $0F38XX
char Table3_38[256] = {
  // 0       1       2       3       4       5       6       7       8       9       a       b       c       d       e       f
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fERR   , // 0
  fMR|fNI,fERR   ,fERR   ,fERR   ,fMR|fNI,fMR|fNI,fERR   ,fMR|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fMR|fNI,fMR|fNI,fMR|fNI,fERR   , // 1
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fERR   ,fERR   ,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fERR   , // 2
  fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fERR   ,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // 3
  fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 4
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 5
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 6
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 7
  fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 8
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 9
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // a
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // b
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // c
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // d
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // e
  fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // f
};

// 3 byte opcodes $0F3AXX
char Table3_3A[256] = {
  // 0       1       2       3       4       5       6       7       8       9       a       b       c       d       e       f
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fMR|fBI,fMR|fBI,fMR|fBI,fMR|fBI,fMR|fBI,fMR|fBI,fMR|fBI,fMR|fBI, // 0
  fERR   ,fERR   ,fERR   ,fERR   ,fMR|fBI,fMR|fBI,fMR|fBI,fMR|fBI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 1
  fMR|fBI,fMR|fBI,fMR|fBI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 2
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 3
  fMR|fBI,fMR|fBI,fMR|fBI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 4
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 5
  fMR|fBI,fMR|fBI,fMR|fBI,fMR|fBI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 6
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 7
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 8
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // 9
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // a
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // b
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // c
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // d
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // e
  fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // f
};

// escape opcodes using ModRM byte to get more variants
char TableX[32] = {
  // 0       1       2       3       4       5       6       7
  fMR|fBI,fERR   ,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // escapes for 0xf6
  fMR|fDI,fERR   ,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI,fMR|fNI, // escapes for 0xf7
  fMR|fNI,fMR|fNI,fERR   ,fERR   ,fERR   ,fERR   ,fERR   ,fERR   , // escapes for 0xfe
  fMR|fNI,fMR|fNI,fMR|fNI,fERR   ,fMR|fNI,fERR   ,fMR|fNI,fERR   , // escapes for 0xff
};
enum {
    CodeShift            =3,
    CodeMask             =0x7f8,//(0xFF<<CodeShift),
    ClearCodeMask        =0xfffff807,//((-1)^CodeMask),
    PrefixMask           =7,//((1<<CodeShift)-1),
    OperandSizeOverride  =0x800,//(0x01<<(8+CodeShift)),
    MultiByteOpcode      =0x1000,//(0x02<<(8+CodeShift)),
    PrefixREX            =0x2000,//(0x04<<(8+CodeShift)),
    Prefix38             =0x4000,//(0x08<<(8+CodeShift)),
    Prefix3A             =0x8000,//(0x10<<(8+CodeShift)),
    HasExtraFlags        =0x10000,//(0x20<<(8+CodeShift)),
    HasModRM             =0x20000,//(0x40<<(8+CodeShift)),
    ModRMShift           =0x12,//(7+8+CodeShift),
    SIBScaleShift        =0x14,//(ModRMShift+8-6),
    RegDWordDisplacement =0x10000000,//(0x01<<(8+SIBScaleShift)),
    AddressMode          =0x20000000,//(0x02<<(8+SIBScaleShift)),
    TypeShift            =0x1e,//(2+8+SIBScaleShift),
    CategoryShift        =5,
    CategoryMask         =0x1f,//((1<<CategoryShift)-1),
    ModRM_mod            =0xC0,
    ModRM_reg            =0x38,
    ModRM_rm             =0x07,
    SIB_scale            =0xC0,
    SIB_index            =0x38,
    SIB_base             =0x07,
    REX_w                =0x08
};
enum InstructionCategory {
  OP_INVALID              =  0,
  OP_PREFIX_SEGREG        =  1,
  OP_PREFIX               =  2,
  OP_PREFIX_X87FPU        =  3,
  OP_GEN_DATAMOV          =  4,
  OP_GEN_STACK            =  5,
  OP_GEN_CONVERSION       =  6,
  OP_GEN_ARITH_DECIMAL    =  7,
  OP_GEN_ARITH_BINARY     =  8,
  OP_GEN_LOGICAL          =  9,
  OP_GEN_SHF_ROT          = 10,
  OP_GEN_BIT              = 11,
  OP_GEN_BRANCH           = 12,
  OP_GEN_BRANCH_COND      = 13,
  OP_GEN_BREAK            = 14,
  OP_GEN_STRING           = 15,
  OP_GEN_INOUT            = 16,
  OP_GEN_FLAG_CONTROL     = 17,
  OP_GEN_SEGREG           = 18,
  OP_GEN_CONTROL          = 19,
  OP_SYSTEM               = 20,
  OP_X87_DATAMOV          = 21,
  OP_X87_ARITH            = 22,
  OP_X87_COMPARISON       = 23,
  OP_X87_TRANSCENDENTAL   = 24,
  OP_X87_LOAD_CONSTANT    = 25,
  OP_X87_CONTROL          = 26,
  OP_X87_CONVERSION       = 27,
  OP_STATE_MANAGEMENT     = 28,
  OP_MMX                  = 29,
  OP_SSE                  = 30,
  OP_SSE_DATAMOV          = 31
};

char TypeOp1[256] = {
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //03
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_STACK         , OP_GEN_STACK         , //07
  OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , //0B
  OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_STACK         , OP_PREFIX            , //0F
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //13
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_STACK         , OP_GEN_STACK         , //17
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //1B
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_STACK         , OP_GEN_STACK         , //1F
  OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , //23
  OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_PREFIX_SEGREG     , OP_GEN_ARITH_DECIMAL , //27
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //2B
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_PREFIX_SEGREG     , OP_GEN_ARITH_DECIMAL , //2F
  OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , //33
  OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_PREFIX_SEGREG     , OP_GEN_ARITH_DECIMAL , //37
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //3B
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_PREFIX_SEGREG     , OP_GEN_ARITH_DECIMAL , //3F
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //43
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //47
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //4B
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //4F
  OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_STACK         , //53
  OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_STACK         , //57
  OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_STACK         , //5B
  OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_STACK         , //5F
  OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_BREAK         , OP_GEN_CONVERSION    , //63
  OP_PREFIX_SEGREG     , OP_PREFIX_SEGREG     , OP_PREFIX            , OP_PREFIX            , //67
  OP_GEN_STACK         , OP_GEN_ARITH_BINARY  , OP_GEN_STACK         , OP_GEN_ARITH_BINARY  , //6B
  OP_GEN_INOUT         , OP_GEN_INOUT         , OP_GEN_INOUT         , OP_GEN_INOUT         , //6F
  OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , //73
  OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , //77
  OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , //7B
  OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , //7F
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //83
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //87
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //8B
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_STACK         , //8F
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //93
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //97
  OP_GEN_CONVERSION    , OP_GEN_CONVERSION    , OP_GEN_BRANCH        , OP_PREFIX_X87FPU     , //9B
  OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //9F
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //A3
  OP_GEN_STRING        , OP_GEN_STRING        , OP_GEN_STRING        , OP_GEN_STRING        , //A7
  OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_STRING        , OP_GEN_STRING        , //AB
  OP_GEN_STRING        , OP_GEN_STRING        , OP_GEN_STRING        , OP_GEN_STRING        , //AF
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //B3
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //B7
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //BB
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //BF
  OP_GEN_SHF_ROT       , OP_GEN_SHF_ROT       , OP_GEN_BRANCH        , OP_GEN_BRANCH        , //C3
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //C7
  OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_BRANCH        , OP_GEN_BRANCH        , //CB
  OP_GEN_BREAK         , OP_GEN_BREAK         , OP_GEN_BREAK         , OP_GEN_BREAK         , //CF
  OP_GEN_SHF_ROT       , OP_GEN_SHF_ROT       , OP_GEN_SHF_ROT       , OP_GEN_SHF_ROT       , //D3
  OP_GEN_ARITH_DECIMAL , OP_GEN_ARITH_DECIMAL , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //D7
  OP_X87_ARITH         , OP_X87_DATAMOV       , OP_X87_ARITH         , OP_X87_DATAMOV       , //DB
  OP_X87_ARITH         , OP_X87_DATAMOV       , OP_X87_ARITH         , OP_X87_DATAMOV       , //DF
  OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , //E3
  OP_GEN_INOUT         , OP_GEN_INOUT         , OP_GEN_INOUT         , OP_GEN_INOUT         , //E7
  OP_GEN_BRANCH        , OP_GEN_BRANCH        , OP_GEN_BRANCH        , OP_GEN_BRANCH        , //EB
  OP_GEN_INOUT         , OP_GEN_INOUT         , OP_GEN_INOUT         , OP_GEN_INOUT         , //EF
  OP_PREFIX            , OP_GEN_BREAK         , OP_PREFIX            , OP_PREFIX            , //F3
  OP_SYSTEM            , OP_GEN_FLAG_CONTROL  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , //F7
  OP_GEN_FLAG_CONTROL  , OP_GEN_FLAG_CONTROL  , OP_GEN_FLAG_CONTROL  , OP_GEN_FLAG_CONTROL  , //FB
  OP_GEN_FLAG_CONTROL  , OP_GEN_FLAG_CONTROL  , OP_GEN_ARITH_BINARY  , OP_GEN_BRANCH         //FF
};
char TypeOp2[256] = {
  OP_SYSTEM            , OP_SYSTEM            , OP_SYSTEM            , OP_SYSTEM            , //03
  OP_INVALID           , OP_SYSTEM            , OP_SYSTEM            , OP_SYSTEM            , //07
  OP_SYSTEM            , OP_SYSTEM            , OP_INVALID           , OP_GEN_CONTROL       , //0B
  OP_INVALID           , OP_GEN_CONTROL       , OP_INVALID           , OP_INVALID           , //0F
  OP_SSE_DATAMOV       , OP_SSE_DATAMOV       , OP_SSE_DATAMOV       , OP_SSE_DATAMOV       , //13
  OP_SSE               , OP_SSE               , OP_SSE_DATAMOV       , OP_SSE_DATAMOV       , //17
  OP_SSE               , OP_GEN_CONTROL       , OP_GEN_CONTROL       , OP_GEN_CONTROL       , //1B
  OP_GEN_CONTROL       , OP_GEN_CONTROL       , OP_GEN_CONTROL       , OP_GEN_CONTROL       , //1F
  OP_SYSTEM            , OP_SYSTEM            , OP_SYSTEM            , OP_SYSTEM            , //23
  OP_SYSTEM            , OP_INVALID           , OP_SYSTEM            , OP_INVALID           , //27
  OP_SSE_DATAMOV       , OP_SSE_DATAMOV       , OP_SSE               , OP_SSE               , //2B
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //2F
  OP_SYSTEM            , OP_SYSTEM            , OP_SYSTEM            , OP_SYSTEM            , //33
  OP_SYSTEM            , OP_SYSTEM            , OP_INVALID           , OP_INVALID           , //37
  OP_PREFIX            , OP_INVALID           , OP_PREFIX            , OP_INVALID           , //3B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //3F
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //43
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //47
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //4B
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //4F
  OP_SSE_DATAMOV       , OP_SSE               , OP_SSE               , OP_SSE               , //53
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //57
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //5B
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //5F
  OP_MMX               , OP_MMX               , OP_MMX               , OP_MMX               , //63
  OP_MMX               , OP_MMX               , OP_MMX               , OP_MMX               , //67
  OP_MMX               , OP_MMX               , OP_MMX               , OP_MMX               , //6B
  OP_INVALID           , OP_INVALID           , OP_MMX               , OP_MMX               , //6F
  OP_SSE               , OP_MMX               , OP_MMX               , OP_MMX               , //73
  OP_MMX               , OP_MMX               , OP_MMX               , OP_MMX               , //77
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //7B
  OP_INVALID           , OP_INVALID           , OP_MMX               , OP_MMX               , //7F
  OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , //83
  OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , //87
  OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , //8B
  OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , OP_GEN_BRANCH_COND   , //8F
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //93
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //97
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //9B
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //9F
  OP_GEN_STACK         , OP_GEN_STACK         , OP_GEN_CONTROL       , OP_GEN_BIT           , //A3
  OP_GEN_SHF_ROT       , OP_GEN_SHF_ROT       , OP_INVALID           , OP_INVALID           , //A7
  OP_GEN_STACK         , OP_GEN_STACK         , OP_SYSTEM            , OP_GEN_BIT           , //AB
  OP_GEN_SHF_ROT       , OP_GEN_SHF_ROT       , OP_STATE_MANAGEMENT  , OP_GEN_ARITH_BINARY  , //AF
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_BIT           , //B3
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_CONVERSION    , OP_GEN_CONVERSION    , //B7
  OP_INVALID           , OP_GEN_CONTROL       , OP_GEN_BIT           , OP_GEN_BIT           , //BB
  OP_GEN_BIT           , OP_GEN_BIT           , OP_GEN_CONVERSION    , OP_GEN_CONVERSION    , //BF
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_SSE               , OP_SSE               , //C3
  OP_SSE               , OP_SSE               , OP_SSE               , OP_GEN_DATAMOV       , //C7
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //CB
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , //CF
  OP_INVALID           , OP_MMX               , OP_MMX               , OP_MMX               , //D3
  OP_SSE               , OP_MMX               , OP_INVALID           , OP_SSE               , //D7
  OP_MMX               , OP_MMX               , OP_SSE               , OP_MMX               , //DB
  OP_MMX               , OP_MMX               , OP_SSE               , OP_MMX               , //DF
  OP_SSE               , OP_MMX               , OP_SSE               , OP_MMX               , //E3
  OP_SSE               , OP_MMX               , OP_INVALID           , OP_SSE               , //E7
  OP_MMX               , OP_MMX               , OP_SSE               , OP_MMX               , //EB
  OP_MMX               , OP_MMX               , OP_SSE               , OP_MMX               , //EF
  OP_INVALID           , OP_MMX               , OP_MMX               , OP_MMX               , //F3
  OP_SSE               , OP_MMX               , OP_SSE               , OP_SSE               , //F7
  OP_MMX               , OP_MMX               , OP_MMX               , OP_SSE               , //FB
  OP_MMX               , OP_MMX               , OP_MMX               , OP_INVALID            //FF
};

char TypeOp3_38[256] = {
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //03
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //07
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //0B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //0F
  OP_SSE               , OP_INVALID           , OP_INVALID           , OP_INVALID           , //13
  OP_SSE               , OP_SSE               , OP_INVALID           , OP_SSE               , //17
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //1B
  OP_SSE               , OP_SSE               , OP_SSE               , OP_INVALID           , //1F
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //23
  OP_SSE               , OP_SSE               , OP_INVALID           , OP_INVALID           , //27
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //2B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //2F
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //33
  OP_SSE               , OP_SSE               , OP_INVALID           , OP_SSE               , //37
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //3B
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //3F
  OP_SSE               , OP_SSE               , OP_INVALID           , OP_INVALID           , //43
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //47
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //4B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //4F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //53
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //57
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //5B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //5F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //63
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //67
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //6B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //6F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //73
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //77
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //7B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //7F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //83
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //87
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //8B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //8F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //93
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //97
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //9B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //9F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //A3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //A7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //AB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //AF
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //B3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //B7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //BB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //BF
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //C3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //C7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //CB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //CF
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //D3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //D7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //DB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //DF
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //E3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //E7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //EB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //EF
  OP_GEN_DATAMOV       , OP_GEN_DATAMOV       , OP_INVALID           , OP_INVALID           , //F3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //F7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //FB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID            //FF
};

char TypeOp3_3A[256] = {
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //03
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //07
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //0B
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //0F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //13
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //17
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //1B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //1F
  OP_SSE               , OP_SSE               , OP_SSE               , OP_INVALID           , //23
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //27
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //2B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //2F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //33
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //37
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //3B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //3F
  OP_SSE               , OP_SSE               , OP_SSE               , OP_INVALID           , //43
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //47
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //4B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //4F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //53
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //57
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //5B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //5F
  OP_SSE               , OP_SSE               , OP_SSE               , OP_SSE               , //63
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //67
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //6B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //6F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //73
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //77
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //7B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //7F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //83
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //87
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //8B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //8F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //93
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //97
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //9B
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //9F
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //A3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //A7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //AB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //AF
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //B3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //B7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //BB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //BF
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //C3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //C7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //CB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //CF
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //D3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //D7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //DB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //DF
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //E3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //E7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //EB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //EF
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //F3
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //F7
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           , //FB
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID            //FF
};

char TypeOpX[32] = {
  // escapes for F6
  OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_ARITH_BINARY  ,
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  ,
  // escapes for F7
  OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_LOGICAL       , OP_GEN_ARITH_BINARY  ,
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  ,
  // escapes for FE
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_INVALID           , OP_INVALID           ,
  OP_INVALID           , OP_INVALID           , OP_INVALID           , OP_INVALID           ,
  // escapes for FF
  OP_GEN_ARITH_BINARY  , OP_GEN_ARITH_BINARY  , OP_GEN_BRANCH        , OP_GEN_BRANCH        ,
  OP_GEN_BRANCH        , OP_GEN_BRANCH        , OP_GEN_STACK         , OP_INVALID           
};
char InvalidX64Ops[19] = {0x06, 0x07, 0x16, 0x17, 0x1E, 0x1F, 0x27, 0x2F, 0x37, 0x3F, 0x60, 0x61, 0x62, 0x82, 0x9A, 0xD4, 0xD5, 0xD6, 0xEA};
char X64Prefixes[8] = {0x26, 0x2E, 0x36, 0x3E, 0x9B, 0xF0, 0xF2, 0xF3};
enum Prefixes {
  ES_OVERRIDE = 0x26,
  CS_OVERRIDE = 0x2E,
  SS_OVERRIDE = 0x36,
  DS_OVERRIDE = 0x3E,
  FS_OVERRIDE = 0x64,
  GS_OVERRIDE = 0x65,
  AD_OVERRIDE = 0x67,
  WAIT_FPU    = 0x9B,
  LOCK        = 0xF0,
  REP_N_STR   = 0xF2,
  REP_STR     = 0xF3
};

enum Opcodes {
  // 1-byte opcodes of special interest (for one reason or another)
  OP_2BYTE  = 0x0f,     // start of 2-byte opcode
  OP_OSIZE  = 0x66,     // operand size prefix
  OP_CALLF  = 0x9a,
  OP_RETNI  = 0xc2,     // ret near+immediate
  OP_RETN   = 0xc3,
  OP_ENTER  = 0xc8,
  OP_INT3   = 0xcc,
  OP_INTO   = 0xce,
  OP_CALLN  = 0xe8,
  OP_JMPF   = 0xea,
  OP_ICEBP  = 0xf1
};

enum ExeState {
  Start             =  0,
  Pref_Op_Size      =  1,
  Pref_MultiByte_Op =  2,
  ParseFlags        =  3,
  ExtraFlags        =  4,
  ReadModRM         =  5,
  Read_OP3_38       =  6,
  Read_OP3_3A       =  7,
  ReadSIB           =  8,
  Read8             =  9,
  Read16            = 10,
  Read32            = 11,
  Read8_ModRM       = 12,
  Read16_f          = 13,
  Read32_ModRM      = 14,
  Error             = 15,
  CacheSize =32,
  MinRequired =8,
  N1=10
};

int Cache_Op[32]={};
int Cache_Index;
char B;
int Op_Data;
char Op_Prefix, Op_Code, Op_ModRM, Op_SIB, Op_REX, Op_Flags, Op_BytesRead, Op_Size, Op_Category;
int Op_MustCheckREX;
int Op_Decoding;
int Op_o16;
int Op_imm8;
int pState,State;
int TotalOps, OpMask, OpCategMask, Context, BrkPoint , BrkCtx;
int Valid;
int StateBH[256]={};

int IsValidX64Prefix(char Prefix){
    int i;
  for ( i=0; i<8; i++){
    if (Prefix == X64Prefixes[i])
      return 1;
  }
  return ((Prefix>=0x40 && Prefix<=0x4F) || (Prefix>=0x64 && Prefix<=0x67));
}

void ProcessMode(){
    int ft;
    ft=Op_Flags&fTYPE;
  if ((Op_Flags&fMODE)==fAM){
    Op_Data=Op_Data|AddressMode;
    Op_BytesRead = 0;

    if (ft==fDR)   Op_Data=Op_Data|(2<<TypeShift),State = Read32;
    else if (ft==fDA)  Op_Data=Op_Data|(1<<TypeShift)|(2<<TypeShift),State = Read32;
    else if (ft==fAD) {
        State = Read32;
    }
    else if (ft==fBR) {
        Op_Data=Op_Data|(2<<TypeShift);
        State = Read8;
      }
   
  }
  else{
     
     if (ft==fBI)  State = Read8;  
     else if (ft==fWI)   {
        State = Read16;
        Op_Data=Op_Data|(1<<TypeShift);
        Op_BytesRead = 0;
         
      }
    else if (ft==fDI) {
        // x64 Move with 8byte immediate? [REX.W is set, opcodes 0xB8+r]
        Op_imm8=((Op_REX & REX_w)>0 && (Op_Code&0xF8)==0xB8);
        if (!Op_o16 || Op_imm8){
          State = Read32;
          Op_Data=Op_Data|(2<<TypeShift);
        }
        else{
          State = Read16;
          Op_Data=Op_Data|(3<<TypeShift);
        }
        Op_BytesRead = 0;
        
      }
    else  State = Start; //no immediate
     
  }
}
void ProcessFlags2( ){
  //if arriving from state ExtraFlags, we've already read the ModRM byte
  if ((Op_Flags&fMODE)==fMR && State!=ExtraFlags){
    State = ReadModRM;
    return;
  }
  ProcessMode( );
}

void ProcessFlags( ){
  if (Op_Code==OP_CALLF || Op_Code==OP_JMPF || Op_Code==OP_ENTER){
    Op_BytesRead = 0;
    State = Read16_f;
    return; //must exit, ENTER has ModRM too
  }
  ProcessFlags2();
}
void resetOp(){
    Op_Data=0;
   Op_Prefix=Op_Code=Op_ModRM=Op_SIB=Op_REX=Op_Flags=Op_BytesRead=Op_Size=Op_Category=0;
   Op_MustCheckREX=Op_Decoding=Op_o16=Op_imm8=0;
}
void CheckFlags( ){
  //must peek at ModRM byte to read the REG part, so we can know the opcode
  if (Op_Flags==fMEXTRA)
    State = ExtraFlags;
  else if (Op_Flags==fERR){
    //memset(&Op, 0, sizeof(Instruction));
     resetOp();
    State = Error;
  }
  else
    ProcessFlags();
}

void ReadFlags(){
  Op_Flags = Table1[Op_Code];
  Op_Category = TypeOp1[Op_Code];
  CheckFlags();
}

void ProcessModRM(){
  if ((Op_ModRM & ModRM_mod)==0x40)
    State = Read8_ModRM; //register+byte displacement
  else if ((Op_ModRM & ModRM_mod)==0x80 || (Op_ModRM & (ModRM_mod|ModRM_rm))==0x05 || (Op_ModRM<0x40 && (Op_SIB & SIB_base)==0x05) ){
    State = Read32_ModRM; //register+dword displacement
    Op_BytesRead = 0;
  }
  else
    ProcessMode();
}

void ApplyCodeAndSetFlag( int Flag ){
  Op_Data =Op_Data&ClearCodeMask;  
  Op_Data =Op_Data|(Op_Code<<CodeShift)|Flag;
}

int OpN( int n){
  return Cache_Op[ (Cache_Index-n)&(CacheSize-1) ];
}

int IsInvalidX64Op(char Op){
  int i;
  for ( i=0; i<19; i++){
    if (Op == InvalidX64Ops[i])
      return 1;
  }
  return 0;
}

int pref(int i) { return (buf(i)==0x0f)+2*(buf(i)==0x66)+3*(buf(i)==0x67); }

// Get context at buf(i) relevant to parsing 32-bit x86 code
int execxt1(int i, int x) {
  int prefix, opcode, modrm, sib;
  prefix=opcode=modrm=sib=0;
  if (i) prefix =prefix+4*pref(i--);
  if (i) prefix =prefix+pref(i--);
  if (i) opcode =opcode+buf(i--);
  if (i) modrm =modrm+buf(i--)&(ModRM_mod|ModRM_rm);
  if (i&&((modrm&ModRM_rm)==4)&&(modrm<ModRM_mod)) sib=buf(i)&SIB_scale;
  return prefix|opcode<<4|modrm<<12|x<<20|sib<<(28-6);
}
int hash5(int a, int b, int c , int d, int e) {
  int h;
  h=a*200002979+b*30005491+c*50004239+d*70004807+e*110002499;
  return h^h>>9^a>>2^b>>3^c>>4^d>>5^e>>6;
}
int hash4(int a, int b, int c , int d) {
  int h;
  h=a*200002979+b*30005491+c*50004239+d*70004807;
  return h^h>>9^a>>2^b>>3^c>>4^d>>5;
}
int hash3(int a, int b, int c) {
  int h;
  h=a*110002499+b*30005491+c*50004239;
  return h^h>>9^a>>3^b>>3^c>>4;
}
int hash2(int a, int b) {
  int h;
  h=a*110002499+b*30005491;
  return h^h>>9^a>>3^b>>3;
}
void doExe(int bpos,int c4){
    int Skip;
    int i;
    if (bpos==0 ) {
         Skip = 0;
    pState = State;
    B = c4&255;
    Op_Size++;
    if (State==Start || State==Error) {
        // previous code may have just been a REX prefix
        //bool Skip = false;
        if (Op_MustCheckREX){
          Op_MustCheckREX = 0;
          // valid x64 code?
          if (!IsInvalidX64Op(B) && !IsValidX64Prefix(B)){
            Op_REX = Op_Code;
            Op_Code = B;
            Op_Data = PrefixREX|(Op_Code<<CodeShift)|(Op_Data&PrefixMask); 
            Skip = 1;
          }
        }

        Op_ModRM = Op_SIB = Op_REX = Op_Flags = Op_BytesRead = 0;
        if (!Skip){
          Op_Code = B;
          // possible REX prefix?
          Op_MustCheckREX = ((Op_Code&0xF0)==0x40) && (!(Op_Decoding && ((Op_Data&PrefixMask)==1)));

          // check prefixes
          Op_Prefix = (Op_Code==ES_OVERRIDE || Op_Code==CS_OVERRIDE || Op_Code==SS_OVERRIDE || Op_Code==DS_OVERRIDE) + //invalid in x64
                      (Op_Code==FS_OVERRIDE)*2 +
                      (Op_Code==GS_OVERRIDE)*3 +
                      (Op_Code==AD_OVERRIDE)*4 +
                      (Op_Code==WAIT_FPU)*5 +
                      (Op_Code==LOCK)*6 +
                      (Op_Code==REP_N_STR || Op_Code==REP_STR)*7;

          if (!Op_Decoding){
            TotalOps =TotalOps+(Op_Data!=0)-(Cache_Index && Cache_Op[ Cache_Index&(CacheSize-1) ]!=0);
            OpMask = (OpMask<<1)|(State!=Error);
            OpCategMask = (OpCategMask<<CategoryShift)|(Op_Category);
            Op_Size = 0;

            Cache_Op[ Cache_Index&(CacheSize-1) ] = Op_Data;
            Cache_Index++;

            if (!Op_Prefix)
              Op_Data = Op_Code<<CodeShift;
            else{
              Op_Data = Op_Prefix;
              Op_Category = TypeOp1[Op_Code];
              Op_Decoding = 1;
              BrkCtx = hash3(1+(BrkPoint = 0), Op_Prefix, OpCategMask&CategoryMask);
              return;
            }
          }
          else{
            // we only have enough bits for one prefix, so the
            // instruction will be encoded with the last one
            if (!Op_Prefix){
              Op_Data =Op_Data|(Op_Code<<CodeShift);
              Op_Decoding = 0;
            }
            else{
              Op_Data = Op_Prefix;
              Op_Category = TypeOp1[Op_Code];
              BrkCtx = hash3(1+(BrkPoint = 1), Op_Prefix, OpCategMask&CategoryMask);
              return;
            }
          }
        }

        if ((Op_o16=(Op_Code==OP_OSIZE)))
          State = Pref_Op_Size;
        else if (Op_Code==OP_2BYTE)
          State = Pref_MultiByte_Op;
        else
          ReadFlags();
        BrkCtx = hash5(1+(BrkPoint = 2), State, Op_Code, (OpCategMask&CategoryMask), OpN(1)&((ModRM_mod|ModRM_reg|ModRM_rm)<<ModRMShift));

      }
      else if (State==Pref_Op_Size ) {
        Op_Code = B;
        ApplyCodeAndSetFlag( OperandSizeOverride);
        ReadFlags();
        BrkCtx = hash2(1+(BrkPoint = 3), State);
 
      }
      else if (State==Pref_MultiByte_Op ) {
        Op_Code = B; 
        Op_Data =Op_Data|MultiByteOpcode;
        if (Op_Code==0x38)
          State = Read_OP3_38;
        else if (Op_Code==0x3A)
          State = Read_OP3_3A;
        else{
          ApplyCodeAndSetFlag(0);
          Op_Flags = Table2[Op_Code];
          Op_Category = TypeOp2[Op_Code];
          CheckFlags();
        }
        BrkCtx = hash2(1+(BrkPoint = 4), State);
      }
      else if (State==ParseFlags ) {
        ProcessFlags();
        BrkCtx = hash2(1+(BrkPoint = 5), State);
      }
       else if (State==ExtraFlags ||State==ReadModRM ) {
        Op_ModRM = B;
        Op_Data =Op_Data|(Op_ModRM<<ModRMShift)|HasModRM;
        Op_SIB = 0;
        if (Op_Flags==fMEXTRA){
          Op_Data =Op_Data|HasExtraFlags;
          i = ((Op_ModRM>>3)&0x07) | ((Op_Code&0x01)<<3) | ((Op_Code&0x08)<<1);
          Op_Flags = TableX[i];
          Op_Category = TypeOpX[i];
          if (Op_Flags==fERR){
            resetOp();
            State = Error;
            BrkCtx = hash2(1+(BrkPoint = 6), State);
          }else{
          ProcessFlags();
          BrkCtx = hash2(1+(BrkPoint = 7), State);
         }
        }
        else if ((Op_ModRM & ModRM_rm)==4 && Op_ModRM<ModRM_mod){
          State = ReadSIB;
          BrkCtx = hash2(1+(BrkPoint = 8), State);
        }else {
        ProcessModRM( );
        BrkCtx = hash3(1+(BrkPoint = 9), State, Op_Code );
       }
      }
       else if (State==Read_OP3_38 ||State== Read_OP3_3A) {
        Op_Code = B;
        ApplyCodeAndSetFlag( Prefix38<<(State-Read_OP3_38));
        if (State==Read_OP3_38){
          Op_Flags = Table3_38[Op_Code];
          Op_Category = TypeOp3_38[Op_Code];
        }
        else{
          Op_Flags = Table3_3A[Op_Code];
          Op_Category = TypeOp3_3A[Op_Code];
        }
        CheckFlags();
        BrkCtx = hash2(1+(BrkPoint = 10), State);
      }
       else if (State==ReadSIB ) {
        Op_SIB = B;
        Op_Data =Op_Data|((Op_SIB & SIB_scale)<<SIBScaleShift);
        ProcessModRM( );
        BrkCtx = hash3(1+(BrkPoint = 11), State, Op_SIB&SIB_scale);
      }
       else if (State==Read8 ||State== Read16||State==Read32)   {
           Op_BytesRead++;
        if (Op_BytesRead>=((State-Read8)<<(Op_imm8+1))){
          Op_BytesRead = 0;
          Op_imm8 = 0;
          State = Start;
        }
        BrkCtx = hash3(1+(BrkPoint = 12), State, Op_Flags&fMODE, Op_BytesRead, ((Op_BytesRead>1)?(buf(Op_BytesRead)<<8):0)|((Op_BytesRead)?B:0) );
      }
       else if (State==Read8_ModRM )   {
        ProcessMode();
        BrkCtx = hash2(1+(BrkPoint = 13), State);
      }
       else if (State==Read16_f ) {
        if (++Op_BytesRead==2){
          Op_BytesRead = 0;
          ProcessFlags2();
        }
        BrkCtx = hash2(1+(BrkPoint = 14), State);
      }
       else if (State==Read32_ModRM ) {
        Op_Data =Op_Data|RegDWordDisplacement;
        if (++Op_BytesRead==4){
          Op_BytesRead = 0;
          ProcessMode();
        }
        BrkCtx = hash2(1+(BrkPoint = 15), State);
        
      }
    }
}

//some custom functions and stuff :)
int min(int a, int b) {return a<b?a:b;}
int max(int a, int b) {return a<b?b:a;}

int llog(int x) {
  if (x>=0x1000000 || x&0x80000000)  return 256+il[x>>16];
  else if (x>=0x10000) return 128+il[x>>8];
  else  return il[x];
}
int matchMod(int y,int bpos){ 
    if (bpos==0){
        //update match
        h=(h*997*8+buf(1)+1)&0xfffff;  // update context hash
            if (len>4) len=len+(len<MAXLEN), ++ptr;
            else {  // find match
                len=1;
                ptr=tm[h];
                if (ptr && (pos-ptr)<0x1000000)
                while (buf(len+1)==bufr(ptr-len-1) && len<MAXLEN) ++len;
            }
            tm[h]=pos;  // update hash table
                //if (len>3 ) printf("pos=%d len=%d ptr=%d\n", pos, len, ptr);
            //vmx(SCM, 5, pos);
    }
    // predict match
    if (len && buf(1)==bufr(ptr-1)){
        match=(bufr(ptr)>>(7-bpos))&1;
        match= (match*2-1)*8;
        vmx(SK,0,match*il[len]);
    }else {vmx(SK,0,0);len=0;}
    return len;
  }

// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pr){
  int i,j;
  int d,c;
  int col,h,above;
  int fl,matched,r,vv,order,ismatch;
  int emask, count0;
 char s;
  if (bpos== 0){
       buffer[bufpos]=c4&0xff;
        bufpos++;
        pos++;
        bufpos=bufpos&BMASK;
    c1= buf(1), c2= buf(2), c3= buf(3);
    f4= f4<<4|(c1>>4);
    w4= w4<<2|mpw[c1>>4];
    //tt=tt<<3|mtt[c1>>4];
    //normal
    for (i=13; i>0; --i)  // update order 0-11 context hashes
    t[i]=t[i-1]*primes[i]+c1;
    for (i=0; i<7; ++i)
    vmx(CM, 0,t[i]); // set context to CM(0)
    vmx(RCM,0,t[7]); // ...
    vmx(CM, 0,t[8]);
    vmx(RCM,1,t[10]);
    vmx(RCM,2,t[12]);
    vmx(CM, 0,t[13]);

    //distance
    //if (c1==0x00) pos00=pos;
    //if (c1==0x20) pos20=pos;
    //if (c1==0xff) posnl=pos;
    //vmx(CM, 1,(min(pos-pos00,255)|(c1<<8)));
    //vmx(CM, 1,(min(pos-pos20,255)|(c1<<8)));
    //vmx(CM, 1,(min(pos-posnl,255)|((c1<<8)+234567)));

    //indirect
    d=c4&0xffff; 
    t1[c2]=(t1[c2]<<8)|c1;
    i=(c4>>8)&0xffff;
    t2[i]=t2[i]<<8|c1;
    i=c1|(t1[c1]<<8);
    vmx(CM, 2,(i&0xffff));
    vmx(CM, 2,(i&0xffffff));
    vmx(CM, 2,(i));
    vmx(CM, 2,(i&0xff00));
    
    i=d|((int)t2[d]<<16);
    vmx(CM, 11,(i&0xffffff));
    vmx(CM, 11,(i));
    vmx(CM, 11,(i&0xffff));
    t3[c2]=t3[c2]<<8|c1;
     
    i=c1|t3[buf(3)]<<8;
    vmx(CM, 10,(i&0xffff));
    vmx(CM, 10,(i&0xffffff));
    vmx(CM, 10,(i));
    c=c1;

    
    //sparse
    vmx(CM, 4, c4&0x00f0f0f0);
    vmx(CM, 4,(c4&0xf0f0f0f0)+1);
    vmx(CM, 4,(c4&0x00f8f8f8)+2);
    vmx(CM, 4,(c4&0xf8f8f8f8)+3);
    vmx(CM, 4,(c4&0x00e0e0e0)+4);
    vmx(CM, 4,(c4&0xe0e0e0e0)+5);
    vmx(CM, 4,(c4&0x00f0f0ff)+6);
    vmx(CM, 4,c4&0x00ff00ff);
    vmx(CM, 4,c4&0xff0000ff);
    vmx(CM, 4,f4&0x00000fff);

    
    vmx(CM, 4,c1|buf(5)<<8);
    vmx(CM, 4,c1|buf(6)<<8);
    vmx(CM, 4,c3|buf(6)<<8);
    vmx(CM, 4,buf(4)|buf(8)<<8);
    for (  i=1; i<8; ++i) {
      vmx(CM, 4,(buf(i+1)<<8)|buf(i+2));
      vmx(CM, 4,(buf(i+1)<<8)|buf(i+3));
    }
    vmx(CM, 4,w4&0xf0f0f0ff);
    vmx(CM, 4,( w4&63)*128+(5<<17)); 
    
    
    vmx(SCM, 0, c1);
    vmx(SCM, 1,buf(4));
    vmx(SCM, 2, w4&15);
    vmx(SCM, 3, c2);
    vmx(SCM, 4, c3);

    //record
    r= pos-cpos1[c1];
    if (r>1 ){
      if (((r==cpos1[c1]-cpos2[c1])|| (r==cpos2[c1]-cpos3[c1]) || (r==cpos3[c1]-cpos4[c1])) && (r>10 || ((c1==buf(r*5+1)) && c1==buf(r*6+1)))) {
        if (r==rlen1) ++rcount1;
        else if (r==rlen2) ++rcount2;
        else if (r==rlen3) ++rcount3;
        else if (rcount1>rcount2) rlen2=r, rcount2=1;
        else if (rcount2>rcount3) rlen3=r, rcount3=1;
        else rlen1=r, rcount1=1;
      }
    }
    if (rcount1>12 && rlen!=rlen1 && rlenl*2!=rlen1) rlenl=rlen=rlen1, rcount1=rcount2=rcount3=0 ;
    if (rcount2>18 && rlen!=rlen2 && rlenl*2!=rlen2) rlenl=rlen,rlen=rlen2, rcount1=rcount2=rcount3=0 ;
    if (rcount3>24 && rlen!=rlen3 && rlenl*2!=rlen3) rlenl=rlen,rlen=rlen3, rcount1=rcount2=rcount3=0 ;
    // Set 2 dimensional contexts
    vmx(CM, 5,(c1<<8)| (min(255,  pos-cpos1[c1])>>2));
    vmx(CM, 5,(d<<9)| llog(  pos-wpos1[d])>>2);
    vmx(CM, 5,rlen|(buf(rlen)<<10)|(buf(rlen*2)<<18));
    vmx(CM,6,d|(rlen<<8));
    vmx(CM,6,c2|(rlen<<16));
    vmx(CM,6,c1|(rlen<<8));
    vmx(CM,7,(c1<<8)|min(255,  pos-cpos1[c1]));
    vmx(CM,7,(c1<<17)|(c2<<9)|llog( pos-wpos1[d])>>2);
    col= pos%rlen;
    x1 = min(0x1F,col/max(1,rlen/32));
    vmx(CM,7,(c1<<8)|buf(rlen));
    vmx(CM,8,rlen|(buf(rlen)<<10)|(col<<18));
    vmx(CM,8,rlen|(c1<<10)|(col<<18));
    vmx(CM,8,col|(rlen<<12));
    // update last context positions
    cpos4[c1]=cpos3[c1];
    cpos3[c1]=cpos2[c1];
    cpos2[c1]=cpos1[c1];
    cpos1[c1]= pos;
    wpos1[d]= pos;
    //exe
    doExe(bpos,c4);
    count0=emask=0;
    for ( i=0; i<N1; ++i){
        if (i>1) emask=emask*2+(buf(i-1)==0), count0 =count0+(emask&1);
        j=(i<4)?(i+1):(5+(i-4)*(2+(i>6)));
        vmx(CM,9,hash3(execxt1(j, buf(1)*(j>6)), ((1<<N1)|emask)*(count0*N1/2>=i), (0x08|( pos&0x07))*(i<4)));
    }
    Valid = (TotalOps>2*MinRequired) && ((OpMask&((1<<MinRequired)-1))==((1<<MinRequired)-1));
    Context = State+16*Op_BytesRead+16*(Op_REX & REX_w);
    StateBH[Context] = (StateBH[Context]<<8)|B;
    //printf("%d\n",State);
    vmx(CM, 3, BrkCtx);
    vmx(CM, 3,  State+16*Op_BytesRead );
    emask = PrefixMask|(0xF8<<CodeShift)|MultiByteOpcode|Prefix38|Prefix3A;
    vmx(CM, 3, hash5(OpN( 1)&(emask|RegDWordDisplacement|AddressMode), State+16*Op_BytesRead, Op_Data&emask, Op_REX, Op_Category));
    emask = 0x04|(0xFE<<CodeShift)|MultiByteOpcode|Prefix38|Prefix3A|((ModRM_mod|ModRM_reg)<<ModRMShift);
    vmx(CM, 3,hash5(
        OpN( 1)&emask, OpN( 2)&emask, OpN( 3)&emask,
        Context+256*((Op_ModRM & ModRM_mod)==ModRM_mod),
        Op_Data&((emask|PrefixREX)^(ModRM_mod<<ModRMShift))
      ));
    emask = 0x04|CodeMask;
    vmx(CM, 3,hash5(OpN( 1)&emask, OpN( 2)&emask, OpN( 3)&emask, OpN( 4)&emask, (Op_Data&emask)|(State<<11)|(Op_BytesRead<<15)));
    emask = 0x04|(0xFC<<CodeShift)|MultiByteOpcode|Prefix38|Prefix3A;
    vmx(CM, 3,hash5(State+16*Op_BytesRead, Op_Data&emask, Op_Category*8 + (OpMask&0x07), Op_Flags, ((Op_SIB & SIB_base)==5)*4+((Op_ModRM & ModRM_reg)==ModRM_reg)*2+((Op_ModRM & ModRM_mod)==0)));
    emask = PrefixMask|CodeMask|OperandSizeOverride|MultiByteOpcode|PrefixREX|Prefix38|Prefix3A|HasExtraFlags|HasModRM|((ModRM_mod|ModRM_rm)<<ModRMShift);
    vmx(CM, 3,hash3(Op_Data&emask, State+16*Op_BytesRead, Op_Flags));
    emask = PrefixMask|CodeMask|OperandSizeOverride|MultiByteOpcode|Prefix38|Prefix3A|HasExtraFlags|HasModRM;
    vmx(CM, 3,hash4(OpN( 1)&emask, State, Op_BytesRead*2+((Op_REX&REX_w)>0), Op_Data&((emask^OperandSizeOverride)&0xffff)));
    emask = 0x04|(0xFE<<CodeShift)|MultiByteOpcode|Prefix38|Prefix3A|(ModRM_reg<<ModRMShift);
    vmx(CM, 3,hash4(OpN( 1)&emask, OpN( 2)&emask, State+16*Op_BytesRead, Op_Data&(emask|PrefixMask|CodeMask)));
    vmx(CM, 3,hash3(
        (0x100|B)*(Op_BytesRead>0),
        State+16*pState+256*Op_BytesRead,
        ((Op_Flags&fMODE)==fAM)*16 + (Op_REX & REX_w) + (Op_o16)*4 + ((Op_Code & 0xFE)==0xE8)*2 + ((Op_Data & MultiByteOpcode)!=0 && (Op_Code & 0xF0)==0x80)
      ));
emask = 0x04|CodeMask|MultiByteOpcode;
    vmx(CM, 3,hash5(OpN( 1)&emask, OpN( 3)&emask, OpN( 5)&emask, OpN( 7)&emask, (Op_Data&emask)|(State<<11)|(Op_BytesRead<<15)|(Op_Category<<20)));
    
         // printf("%d\n",OpN( 1)&(0x04|CodeMask));
  }
  vmx(SMC,0,c0); 
  vmx(SMC,1,c0|(c1<<8));
  ismatch=matchMod( y, bpos);
  if (ismatch)ord=2+(len>=4) + (len>=5) +(len>=8)+(len>=12)+(len>=10);else ord=0;
  vmx(MX,0,c1+8);
  vmx(MX,1,c0);
     s = ((StateBH[Context]>>(28-bpos))&0x08) |
         ((StateBH[Context]>>(21-bpos))&0x04) |
         ((StateBH[Context]>>(14-bpos))&0x02) |
         ((StateBH[Context]>>( 7-bpos))&0x01) |
         ((Op_Category==OP_GEN_BRANCH)<<4)|
         (((c0&((1<<bpos)-1))==0)<<5);
  vmx(MX,2,(State*64+bpos*8+(Op_BytesRead>0)*4+(s>>4)));
  vmx(MX,3,ord+8*(c4>>6&3)+32*(bpos==0)+64*(c1==c2)+128*Valid);
  vmx(MX,4,il[(ismatch)]);
  vmx(MX,5,ord*256+( w4&240)+( c3>>4));
  d= c0<<(8- bpos);
  vmx(MX,6,bpos*256+(d&255));
  if ( bpos) {
    c=d;
    if ( bpos==1)c =c+(c3>>1);
     c=(min( bpos,5))*256+(c1>>5)+8*(c2>>5)+(c&192);
  }
  else c=(c3>>7)+( c4>>31)*2+4*(c2>>6)+(c1&240);
  
  vmx(MX,7,c);
  vmx(MX,8,State);
  vmx(MX,9,ord*8+bpos);
  vmx(MX,10,(( (buf(rlen))^d )>>4)|(x1<<4));
  vmx(MX,11,(BrkCtx&0x1FF)|((s&0x20)<<4));
  Misses=(Misses<<1)|((pr>>11)!=y);
  vmx(APM1,0,(c0<<6)|(State<<1)|(Misses&1));
  vmx(APM1,1,h2(c0,w4&0xfffff));
  vmx(APM1,2,c0+256*c1);
  return 0;
}
void block(int a,int b) {
   info=a;
}
// main is called only once after VM init.
int main() { 
int i,x;
  //SMC,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM
  vms(2,3,0,1,5,3,12,12+1,1,12,0,0,1,0,0,0,0,0);
  vmi(ST,0,144,0,0);
  vmi(SMC,0,256,1023,0);
  vmi(SMC,1,256*256,1023,0);
  vmi(SK,0,0,0,0);
  vmi(RCM,0,1024,0,0); //RCM(0) mem/4
  vmi(RCM,1,1024,0,0); //RCM(1) mem/4 400000 4194304/4096=1024
  vmi(RCM,2,2048,0,0); //RCM(2) mem/2 800000 8388608/4096=2048
  vmi(CM,0,32*4096,9+c_r[0]*256+c_s[0]*0x10000,0);  //CM(0) mem*32, 9 contexts //normal
  vmi(CM,1,4096/2,2 +c_r[1]*256+c_s[1]*0x10000,0);  //CM(1) mem/2, 3 contexts  //dictance
  vmi(CM,2,1*4096,4 +c_r[2]*256+c_s[2]*0x10000,0);   //indirect 1000000 /4096=4096
  vmi(CM,3,8*4096,10+1+c_r[3]*256+c_s[3]*0x10000,0); //exe
  vmi(CM,4,2*4096,38+c_r[4]*256+c_s[4]*0x10000,0);  //sparse
  vmi(CM,5,4096/2 ,3+c_r[5]*256+c_s[5]*0x10000,0); //record
  vmi(CM,6,4096/2,3 +c_r[6]*256+c_s[6]*0x10000,0);  //record
  vmi(CM,7,1*4096,3 +c_r[7]*256+c_s[7]*0x10000,0);   //record
  vmi(CM,8,2*4096,3 +c_r[8]*256+c_s[8]*0x10000,0);   //record
  vmi(CM,9,4*4096,10+c_r[9]*256+c_s[9]*0x10000,0); //exe
  vmi(CM,10,1*4096,3+c_r[10]*256+c_s[10]*0x10000,0);
  vmi(CM,11,1*4096,3+c_r[11]*256+c_s[11]*0x10000,0);
  for (i=0;i<5;i++)
      vmi(SCM,i,16,0,0);
  //vmi(SCM,5,17,0,0);
  vmi(MX,0,m_s[0]+256*m_e[0]+0x1000000*m_m[0], 264,0);
  vmi(MX,1,m_s[1]+256*m_e[1]+0x1000000*m_m[1], 256,0);
  vmi(MX,2,m_s[2]+256*m_e[2]+0x1000000*m_m[2], 1024,0);
  vmi(MX,3,m_s[3]+256*m_e[3]+0x1000000*m_m[3], 256,0);
  vmi(MX,4,m_s[4]+256*m_e[4]+0x1000000*m_m[4], 256,0);
  vmi(MX,5,m_s[5]+256*m_e[5]+0x1000000*m_m[5],2048,0);
  vmi(MX,6,m_s[6]+256*m_e[6]+0x1000000*m_m[6],2048,0);
  vmi(MX,7,m_s[7]+256*m_e[7]+0x1000000*m_m[7],1536,0);
  vmi(MX,8,m_s[8]+256*m_e[8]+0x1000000*m_m[8],32,0);
  vmi(MX,9,m_s[9]+256*m_e[9]+0x1000000*m_m[9],  64,0);
  vmi(MX,10,m_s[10]+256*m_e[10]+0x1000000*m_m[10], 512,0);
  vmi(MX,11,m_s[11]+256*m_e[11]+0x1000000*m_m[11], 1024,0);
  for (i=0;i<12;i++) vmi(MM,i,0,i,1);
  vmi(MX,12,m_s[12]+256*m_e[12]+0x1000000*m_m[12], 1,1);
  vmi(APM1,0,0x4000,7,12);  //15
  vmi(APM1,1,0x10000,7,12); //16
  vmi(APM1,2,0x10000,7,13); //17
  vmi(AVG,0,1|(1<<8),0,15+14*256); 

  // calc log table
    x=14155776;
    for (i=2; i<65536; ++i) {
        x=(x+(774541002/((i<<1)-1)));  // numerator is 2^29/ln 2
        il[i]=x>>24;
    }
}
