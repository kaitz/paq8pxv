// Model for 4 bit image data

enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS};
il[65536]={}; 
enum {S=14}; // N number of contexts
cxt[14]={};
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int w,bufpos;
char WW, W, NWW, NW, N, NE, NEE, NNWW , NNW, NN, NNE, NNEE;
int col, line, run, prevColor, px;
int m_s[7]={31, 38, 10, 46, 65, 58, 12};
int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int min(int a, int b) {return a<b?a:b;}
int max(int a, int b) {return a<b?b:a;}
// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pr){ 
    int i,j;
    if (bpos== 0){ 
        buffer[bufpos]=c4&0xff;
        bufpos++;
        bufpos=bufpos&BMASK;
    }
    if (bpos==0 || bpos==4){
        WW=W; NWW=NW; NW=N; N=NE; NE=NEE; NNWW=NWW; NNW=NN; NN=NNE; NNE=NNEE;
        if (bpos==0){
            W=c4&0xF; NEE=buf(w-1)>>4; NNEE=buf(w*2-1)>>4;
        }else{
            W=c0&0xF; NEE=buf(w-1)&0xF; NNEE=buf(w*2-1)&0xF;
        }
        if (W!=WW || col==0){
            prevColor=WW;
            run=0;
        }else{
            run=min(0xFFF,run+1);
        }
        px=1; //partial pixel (4 bits) with a leading "1"
        i=0; cxt[i]=h2(h2(W,NW),N);
        i++; cxt[i]=h2(N, min(0xFFF, col/8));
        i++; cxt[i]=h2(h2(W,NW),h2(N,h2(NN,NE)));
        i++; cxt[i]=h2(h2(W, N),h2( NE+NNE*16, NEE+NNEE*16));
        i++; cxt[i]=h2(h2(W, N), h2(NW+NNW*16, NWW+NNWW*16));
        i++; cxt[i]=h2(h2(W, il[(run+1)]), h2(prevColor, col/max(1,w/2) ));
        i++; cxt[i]=h2(NE, min(0x3FF, (col+line)/max(1,w*8)));
        i++; cxt[i]=h2(NW, (col-line)/max(1,w*8));
        i++; cxt[i]=h2(h2(WW*16+W,NN*16+N),NNWW*16+NW);
        i++; cxt[i]=h2(N,NN);
        i++; cxt[i]=h2(W,WW);
        i++; cxt[i]=h2(W,NE);
        i++; cxt[i]=h2(h2(WW,NN),NEE);
        i++; cxt[i]=h2(1,1);;
        
        col++;
        if(col==w*2){col=0;line++;}
        for ( i=0; i<S; i++) {  vmx(DHS,0,cxt[i]);}
    }else{
        px=(px+px)+y;
        j=(y+1)<<(bpos&3);
        vmx(DHS,0,j);
    }
    vmx(MX,0,(W<<4) | px);
    vmx(MX,1,min(31,col/max(1,w/16)) | (N<<5));
    vmx(MX,2,(bpos&3) | (W<<2) | (min(7,il[(run+1)])<<6));
    vmx(MX,3,W | (NE<<4) | ((bpos&3)<<8)); 
    vmx(MX,4,px);             
    //vmx(MX,5,0);  
    //vmx(MX,6,0);
    vmx(SMC,0,px); 
    return 0;
}
//VM calls this after every image block
void block(int a,int b) { 
    w=a; //get block info, image width
}
// main is called only once after VM init.
int main() { 
    int x,i;
    //SMC,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS
    vms( 1,   0, 0,  0, 0,  0, 0, 6+1, 1,5+1+S,1,0,0); 
    vmi(ST,0,144,0,0);          // output prediction to input[0]
    vmi(DHS,0,4,24 ,14);
    for (i=0;i<S;i++) vmi(MM,i,0,i,0);
    vmi(SMC,0,0x100,1023,0);
    vmi(MX,0,m_s[0] +256*1473+0x1000000*25,256 ,0);        vmi(MM,S,0,S,1);
    vmi(MX,1,m_s[1] +256*67+0x1000000*28,512 ,0);       vmi(MM,S+1,0,S+1,1);
    vmi(MX,2,m_s[2] +256*1135+0x1000000*28,512 ,0);     vmi(MM,S+2,0,S+2,1);
    vmi(MX,3,m_s[3] +256*490+0x1000000*28,1024 ,0);       vmi(MM,S+3,0,S+3,1);
    vmi(MX,4,m_s[4] +256*50+0x1000000*19,16 ,0);       vmi(MM,S+4,0,S+4,1);
    vmi(MX,5,m_s[5] +256*1681+0x1000000*32,1 ,0);        vmi(MM,S+5,0,S+5,1);
    vmi(MX,6,m_s[6] +256*47+0x1000000*32,1 ,1);

    // calc log table
    x=14155776;
    for (i=2; i<65536; ++i) {
        x=(x+(774541002/((i<<1)-1)));  // numerator is 2^29/ln 2
        il[i]=x>>24;
    }
}
