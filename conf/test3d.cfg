// Slow general model

enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM,SK,APM2,ERR,TAPM,UAS,LMX};
int t[14]={},t1[256]={}; //  ={} - let VM to alloc memory and set values to 0
int pos00,pos20,posnl,info;
short t2[0x10000]={};
int word0,word1,word2,word3,word4,word5; 
int nl1=-3, nl=-2,text0,lastLetter,lastUpper,wordGap,linespace,lastDigit;
int c1,c2,c3,frstchar,words,number1,number0,spaces,spacecount,wordcount,wordlen,wordlen1,spafdo,keyword,firstWord;
int mask,m1mask,m2mask,Misses,pr;
int rlen=2, rlen1=3, rlen2=4, rlen3=5,rlenl;  // run length and 2 candidates
int rcount1, rcount2,rcount3;  // candidate counts
int cpos1[256]={},cpos2[256]={},cpos3[256]={},cpos4[256]={},wpos1[0x10000]={};
int ic, bc, pc,vc, qc, lvc, wc,f4,w4,tt,prm=1024,grp,x1;
int mpw[16]= { 4,4,3,2,2,2,1,1,1,1,1,1,0,0,0,0 };
int mtt[16]= { 0,0,1,2,3,4,5,5,6,6,6,6,7,7,7,7 };
int il[65536]={};
int m_m[15]={36, 27, 40, 34, 18, 35, 28, 32, 29, 32, 34, 34, 30, 29, 17};
int m_e[15]={754, 1237, 1431, 201, 166, 2134, 473, 187, 501, 423, 752, 307, 64, 1487, 4};
int m_s[15]={64,64,64,64,64,64,64,64,64,64,64,64,64,64,8};//36, 21, 26, 20, 6, 15, 9, 5, 14, 36, 71, 18, 42, 34, 23};
char AsciiGroupC0[254] ={
  0,10,
  0,1,10,10,
  0,4,2,3,10,10,10,10,
  0,0,5,4,2,2,3,3,10,10,10,10,10,10,10,10,
  0,0,0,0,5,5,9,4,2,2,2,2,3,3,3,3,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  0,0,0,0,0,0,0,0,5,8,8,5,9,9,6,5,2,2,2,2,2,2,2,8,3,3,3,3,3,3,3,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,8,8,8,5,5,9,9,9,9,9,7,8,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
};
  int MAXLEN=65534; // longest allowed match + 1
  int tm[0x100000]={};    // hash table of pointers to contexts
  int h;      // hash of last 7 bytes
  int ptr;    // points to next byte of match if any
  int len;    // length of match, or 0 if no match
  int mm1,mm3;
  int match;
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int  bufpos,pos ;
int buf(int i){
    return buffer[(bufpos-i)&BMASK];
}
int bufr(int i){
    return buffer[(i)&BMASK];
}
//some custom functions and stuff :)
int min(int a, int b) {return a<b?a:b;}
int max(int a, int b) {return a<b?b:a;}
int isspace (int c) {
  return ((c==0x20) || (c==0x09) || (c>=0x0a) || (c<=0x0d));
}
int ispunct (int c) {
  return (((c>=0x21) && (c<=0x2f)) || ((c>=0x3a) && (c<=0x40)) || ((c>=0x5b) && (c<=0x60)) || ((c>=0x7b) && (c<=0x7e)));
}
int isalpha (int c) {
  return ((c>='A') && (c<='Z')) || ((c>='a') && (c<='z'));
}
int llog(int x) {
  if (x>=0x1000000 || x&0x80000000)  return 256+il[x>>16];
  else if (x>=0x10000) return 128+il[x>>8];
  else  return il[x];
}
int matchMod(int y,int bpos){
    if (bpos==0){
        //update match
        h=(h*997*8+buf(1)+1)&0xfffff;  // update context hash
            if (len) len=len+(len<MAXLEN), ++ptr;
            else {  // find match
                ptr=tm[h];
                if (ptr && (pos-ptr)<0x1000000)
                while (buf(len+1)==bufr(ptr-len-1) && len<MAXLEN) ++len;
            }
            tm[h]=pos;  // update hash table
            //    if (result>0 && !(result&0xfff)) printf("pos=%d len=%d ptr=%d\n", pos, len, ptr);
            //vmx(SCM, 5, pos);
    }
    // predict match
    if (len && buf(1)==bufr(ptr-1)){
        match=(bufr(ptr)>>(7-bpos))&1;
        match= (match*2-1)*8;
        vmx(SK,0,match*il[len]);
    }else {vmx(SK,0,0);len=0;}
    return len;
  }
int execxt(int i, int x){
   int prefix,opcode,modrm;
   prefix=(buf(i+2)==0x0f)+2*(buf(i+2)==0x66)+3*(buf(i+2)==0x67)+4*(buf(i+3)==0x0f)+8*(buf(i+3)==0x66)+12*(buf(i+3)==0x67);
   opcode=buf(i+1);
   modrm=i ? buf(i)&0xc7 : 0;
  return prefix|opcode<<4|modrm<<12|x<<20;
}
// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pr){
  int i;
  int d,c;
  int col,h,above;
  int fl,matched,r,vv,order,ismatch;
  grp = (bpos>0)?AsciiGroupC0[(1<<bpos)-2+(c0&((1<<bpos)-1))]:0;
  if (bpos== 0){
       buffer[bufpos]=c4&0xff;
        bufpos++;
        pos++;
        bufpos=bufpos&BMASK;
    c1= buf(1), c2= buf(2), c3= buf(3);
    f4= f4<<4|(c1>>4);
    w4= w4<<2|mpw[c1>>4];
    tt=tt<<3|mtt[c1>>4];
    //normal
    for (i=13; i>0; --i)  // update order 0-11 context hashes
    t[i]=h2(t[i-1],c1);
    for (i=0; i<7; ++i)
    vmx(CM, 0,t[i]); // set context to CM(0)
    vmx(RCM,0,t[7]); // ...
    vmx(CM, 0,t[8]);
    vmx(RCM,1,t[10]);
    vmx(RCM,2,t[12]);
    vmx(CM, 0,t[13]);

    //distance
    if (c1==0x00) pos00=pos;
    if (c1==0x20) pos20=pos;
    if (c1==0xff||c1==10||c1==13) posnl=pos;
    vmx(CM, 1,(min(pos-pos00,255)|(c1<<8)));
    vmx(CM, 1,(min(pos-pos20,255)|(c1<<8)));
    vmx(CM, 1,(min(pos-posnl,255)|((c1<<8)+234567)));

    //indirect
    d=c4&0xffff; 
    t1[c2]=(t1[c2]<<8)|c1;
    i=(c4>>8)&0xffff;
    t2[i]=t2[i]<<8|c1;
    i=c1|(t1[c1]<<8);
    vmx(CM, 2,(i&0xffff));
    vmx(CM, 2,(i&0xffffff));
    vmx(CM, 2,(i));
    vmx(CM, 2,(i&0xff00));
    i=d|((int)t2[d]<<16);
    vmx(CM, 2,(i&0xffffff));
    vmx(CM, 2,(i));

    //word
    lastLetter=min(lastLetter+1,255);
    lastUpper=min(lastUpper+1,255);
    lastDigit=min(0xFF,lastDigit+1);
    c=c1;
    if ( spaces&0x80000000) --spacecount;
    if ( words&0x80000000) --wordcount;
    spaces= spaces<<1;
    words= words<<1;
    if (c>='A' && c<='Z') c =c+'a'-'A', lastUpper=0;
    if (c>='a' && c<='z' || c>=128) {
      if (!wordlen) wordGap = lastLetter;
      lastLetter=0;
      word0=h2(word0, c);
      text0=h2(text0*15952,c);//997*16
      words=words|1;
      wordlen++;
      wordlen=min(wordlen,45);
    }
    else {
         if( firstWord == 0 ) {
        firstWord = word0;
      }
        if( c == ':' || c == '=' ) {
        keyword = word0+firstWord*2104; // enwik, world95.txt, html/xml
      }
      if (word0) {
        word5=word4;
        word4=word3;
        word3=word2;
        word2=word1;
        word1=word0;
        word0=0;
        wordlen1= wordlen;
        wordlen=0;
      }
      if (c==32 || c==10) {if (c2!=32)linespace++, ++spaces, ++spacecount; if (c==10 ) nl1=nl, nl=pos-1,linespace=0;}
      else if (c=='.' || c=='!' || c=='?' || c==',' || c==';' || c==':') spafdo=0; 
      else { ++spafdo; spafdo=min(63,spafdo); }
    }
    if (c>='0' && c<='9') {
      number0=h2(number0, c-'0');
      lastDigit = 0;
    }
    else if (number0) {
      number1=number0;
      number0=0;
    }
    col=min(255, pos-nl), above=bufr(nl1+col); // text column context
    if (col<=2) frstchar=(col==2?min(c,96):0);

    vmx(CM, 3,h2(spafdo, spaces));
    vmx(CM, 3,h2(frstchar, c));
    vmx(CM, 3,h2(col, frstchar));
    vmx(CM, 3,h2(spaces, (words&255)));
    vmx(CM, 3,h2(wordlen1,col));
    vmx(CM, 3,h2(c,spacecount>>1));
    h=wordcount*64+spacecount;
    vmx(CM, 3,h2(frstchar,h));
    vmx(CM, 3,h2(h,spafdo));
    h=h2(word0,c1);
    vmx(CM, 3,h);
    vmx(CM, 3,word0);
    vmx(CM, 3,h+word1);
    vmx(CM, 3,word0+word1);
    vmx(CM, 3,h+word1+word2);
    vmx(CM, 3,text0&0xffffff);
    vmx(CM, 3,text0&0xfffff);
    vmx(CM, 3,number0+ word2);
    vmx(CM, 3,number0+ word1);
    vmx(CM, 3,number0+ number1);
    vmx(CM, 3,word0+number1);
    vmx(CM, 3,h+word2);
    vmx(CM, 3,h+word3);
    vmx(CM, 3,h+word4);
    vmx(CM, 3,h+word5);
    vmx(CM, 3,c1|c3<<8|buf(5)<<16);
    vmx(CM, 3,c2|buf(4)<<8|buf(6)<<16);
    vmx(CM, 3,h+word1+word3);
    vmx(CM, 3,h+word2+word3);
    // Text column models
    vmx(CM, 3,col<<16|c1<<8|above);
    vmx(CM, 3,c1<<8|above);
    vmx(CM, 3,col<<8|c1);
    vmx(CM, 3,col);
    fl = 0;
    if( c1 != 0 ){
      if( isalpha( c1 ) ) fl = 1;
      else if( ispunct( c1 ) ) fl = 2;
      else if( isspace( c1 ) ) fl = 3;
      else if( c1 == 0xff ) fl = 4;
      else if( c1 < 16 ) fl = 5;
      else if( c1 < 64 ) fl = 6;
      else fl = 7;
    }
    mask = (mask<<3)|fl;
    vmx(CM, 3,mask);
    vmx(CM, 3,mask<<8|c1);
    vmx(CM, 3,mask<<8|col );
    vmx(CM, 3,mask<<17|c2<<8|c3);
    vmx(CM, 3,mask&0x1ff|((c4&0xf0f0f0f0)<<9));
    vmx(CM, 3,h2(h2(h, llog(wordGap)), h2(mask&0x1FF,
       ((linespace > 4)<<7)|
       ((wordlen1 > 3)<<6)|
       ((wordlen > 0)<<5)|
       ((spafdo == wordlen + 2)<<4)|
       ((spafdo == wordlen + wordlen1 + 3)<<3)|
       ((spafdo >= lastLetter + wordlen1 + wordGap)<<2)|
       ((lastUpper < lastLetter + wordlen1)<<1)|
       (lastUpper < wordlen + wordlen1 + wordGap)
       )));
	   vmx(CM, 3,spaces&0x7fff);
    vmx(CM, 3,spaces&0xff);
    vmx(CM, 3,words&0x1ffff);
    vmx(CM, 3,(f4&0xffff)<<11| frstchar);
    vmx(CM, 3,h+keyword);
    //sparse
    if (c4==0){
        for ( i=0; i<10; ++i) vmx(CM, 4, 0);
    }else{
    vmx(CM, 4, c4&0x00f0f0f0);
    vmx(CM, 4,(c4&0xf0f0f0f0)+1);
    vmx(CM, 4,(c4&0x00f8f8f8)+2);
    vmx(CM, 4,(c4&0xf8f8f8f8)+3);
    vmx(CM, 4,(c4&0x00e0e0e0)+4);
    vmx(CM, 4,(c4&0xe0e0e0e0)+5);
    vmx(CM, 4,(c4&0x00f0f0ff)+6);
    vmx(CM, 4,c4&0x00ff00ff);
    vmx(CM, 4,c4&0xff0000ff);
    vmx(CM, 4,f4&0x00000fff);
    }
    
    vmx(CM, 4,c1|buf(5)<<8);
    vmx(CM, 4,c1|buf(6)<<8);
    vmx(CM, 4,c3|buf(6)<<8);
    vmx(CM, 4,buf(4)|buf(8)<<8);
    for (  i=1; i<8; ++i) {
      vmx(CM, 4,(buf(i+1)<<8)|buf(i+2));
      vmx(CM, 4,(buf(i+1)<<8)|buf(i+3));
    }
    vmx(CM, 4,w4&0xf0f0f0ff);
    vmx(CM, 4,( w4&63)*128+(5<<17)); 
    vmx(CM, 4, spafdo*8*(( w4&3)==1));
    
    vmx(SCM, 0, words&127);
    vmx(SCM, 1,( words&12)*16+( w4&12)*4+( f4&0xf));
    vmx(SCM, 2, w4&15);
    vmx(SCM, 3, spafdo*(( w4&3)==1));
    vmx(SCM, 4, frstchar);

    //record
    r= pos-cpos1[c1];
    if (r>1 ){
      if (((r==cpos1[c1]-cpos2[c1])|| (r==cpos2[c1]-cpos3[c1]) || (r==cpos3[c1]-cpos4[c1])) && (r>10 || ((c1==buf(r*5+1)) && c1==buf(r*6+1)))) {
        if (r==rlen1) ++rcount1;
        else if (r==rlen2) ++rcount2;
        else if (r==rlen3) ++rcount3;
        else if (rcount1>rcount2) rlen2=r, rcount2=1;
        else if (rcount2>rcount3) rlen3=r, rcount3=1;
        else rlen1=r, rcount1=1;
      }
    }
    if (rcount1>12 && rlen!=rlen1 && rlenl*2!=rlen1) rlenl=rlen=rlen1, rcount1=rcount2=rcount3=0 ;
    if (rcount2>18 && rlen!=rlen2 && rlenl*2!=rlen2) rlenl=rlen,rlen=rlen2, rcount1=rcount2=rcount3=0 ;
    if (rcount3>24 && rlen!=rlen3 && rlenl*2!=rlen3) rlenl=rlen,rlen=rlen3, rcount1=rcount2=rcount3=0 ;
    // Set 2 dimensional contexts
    vmx(CM, 5,(c1<<8)| (min(255,  pos-cpos1[c1])>>2));
    vmx(CM, 5,(d<<9)| llog(  pos-wpos1[d])>>2);
    vmx(CM, 5,rlen|(buf(rlen)<<10)|(buf(rlen*2)<<18));
    vmx(CM,6,d|(rlen<<8));
    vmx(CM,6,c2|(rlen<<16));
    vmx(CM,6,c1|(rlen<<8));
    vmx(CM,7,(c1<<8)|min(255,  pos-cpos1[c1]));
    vmx(CM,7,(c1<<17)|(c2<<9)|llog( pos-wpos1[d])>>2);
    col= pos%rlen;
    x1 = min(0x1F,col/max(1,rlen/32));
    vmx(CM,7,(c1<<8)|buf(rlen));
    vmx(CM,8,rlen|(buf(rlen)<<10)|(col<<18));
    vmx(CM,8,rlen|(c1<<10)|(col<<18));
    vmx(CM,8,col|(rlen<<12));
    // update last context positions
    cpos4[c1]=cpos3[c1];
    cpos3[c1]=cpos2[c1];
    cpos2[c1]=cpos1[c1];
    cpos1[c1]= pos;
    wpos1[d]= pos;

    //nest
    matched=1;
    vv=0;
    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') vv = 1; else
    if (c >= 'a' && c <= 'z') vv = 2; else
    if (c == ' ' || c == '.' || c == ',' || c == '!' || c == '?' || c == '\n') vv = 3; else
    if (c >= '0' && c <= '9') vv = 4; else
    if (c == 'y') vv = 5; else
    if (c == '\'') vv = 6; else vv=(c1&32)?7:0;
    vc = (vc << 3) | vv;
    if (vv != lvc) {
      wc = (wc << 3) | vv;
      lvc = vv;
    }
    if (c1==' ')  qc = 0;
    else if (c1=='(')  ic  =ic+ 513;
    else if (c1== ')') ic  =ic- 513;
    else if (c1== '[') ic  = ic+17;
    else if (c1== ']') ic  =ic- 17; 
    else if (c1== '<') ic  =ic+ 23, qc  = qc+34;
    else if (c1== '>') ic  =ic- 23, qc  = qc/5;
    else if (c1== ':') pc = 20;
    else if (c1== '{') ic  =ic+ 22;
    else if (c1== '}') ic  =ic- 22;
    else if (c1== '|') pc  =pc+ 223;
    else if (c1== '"') pc  =pc+ 0x40;
    else if (c1== '\'') pc  =pc+ 0x42;
    else if (c1== '\n') pc = qc = 0;
    else if (c1== '.') pc = 0;
    else if (c1== '!') pc = 0;
    else if (c1== '?') pc = 0;
    else if (c1== '#') pc  =pc+ 0x08;
    else if (c1== '%') pc  =pc+ 0x76;
    else if (c1== '$') pc  =pc+ 0x45;
    else if (c1== '*') pc  =pc+ 0x35;
    else if (c1== '-') pc  =pc+ 0x3;
    else if (c1== '@') pc  =pc+ 0x72;
    else if (c1== '&') qc  =pc+ 0x12;
    else if (c1== ';') qc  =qc/ 3;
    else if (c1== '\\') pc  =pc+ 0x29;
    else if (c1== '/') {pc  =pc+ 0x11;
      if (c1 == '<') qc  =qc+ 74;
    }
    else if (c1== '=') pc  =pc+ 87;
    else matched = 0;

    if (matched) bc = 0; else bc  =bc+ 1;
    if (bc > 300) bc = ic = pc = qc = 0;

    vmx(CM,9,(3*vc+77*pc+373*ic+qc)&0xffff);
    vmx(CM,9,(31*vc+27*pc+281*qc)&0xffff);
    vmx(CM,9,(13*vc+271*ic+qc+bc)&0xffff);
    vmx(CM,9,(17*pc+7*ic)&0xffff);
    vmx(CM,9,(13*vc+ic)&0xffff);
    vmx(CM,9,(vc/3+pc)&0xffff);
    vmx(CM,9,(7*wc+qc)&0xffff);
    vmx(CM,9,(vc&0xffff)|(( f4&0xf)<<16));
    vmx(CM,9,((3*pc)&0xffff)|(( f4&0xf)<<16));
    vmx(CM,9,(ic&0xffff)|(( f4&0xf)<<16));
    m1mask=(lastDigit<wordlen+wordGap)|
    ((lastUpper<lastLetter+wordlen1)<<1)|
    ((spafdo<wordlen+ wordGap)<<2)|
    ((lastUpper<wordlen)<<3);
    m2mask=
    (lastUpper<wordlen)|
    ((lastUpper<lastLetter+wordlen1)<<1)|
    ((spafdo<lastLetter)<<2)|
    ((spafdo<wordlen+wordGap)<<3)|
    ((spafdo<lastLetter+wordlen1+wordGap)<<4)|
    ((linespace>4)<<5);
    //for ( i=0; i<12; ++i)
    //  vmx(CM,10,execxt(i, buf(1)*(i>4)));
  }
  vmx(SMC,0,c0); 
  vmx(SMC,1,c0|(c1<<8)); 

  ismatch=matchMod( y, bpos); 
  vmx(MX,0,c1+8);
  vmx(MX,1,c0);
  vmx(MX,2,c2);
  vmx(MX,3,mask&255);
  vmx(MX,4,il[(ismatch)]);
  vmx(MX,5,( w4&240)+( c3>>4));
  d= c0<<(8- bpos);
  vmx(MX,6,bpos*256+(((( words<< bpos)&255)>> bpos)|(d&255)));
  if ( bpos) {
    c=d;
    if ( bpos==1)c =c+(c3>>1);
     c=(min( bpos,5))*256+(c1>>5)+8*(c2>>5)+(c&192);
  }
  else c=(c3>>7)+( c4>>31)*2+4*(c2>>6)+(c1&240); 
  
  vmx(MX,7,c);
  vmx(MX,8,prm);
  vmx(MX,9,bpos);
  vmx(MX,10,h2(h2(spaces&0x1FF, grp),m2mask)&0xFFF);
  vmx(MX,11,h2(h2(il[(wordlen+1)], grp),m1mask)&0x7FF);
  vmx(MX,12,(( (buf(rlen))^d )>>4)|(x1<<4));
  vmx(MX,13,(grp<<5)|x1);
  Misses=(Misses<<1)|((pr>>11)!=y);
  prm=pr>>1;
  vmx(APM1,0,(c0<<4)|(Misses&0xF));
  vmx(APM1,1,h2(c0,w4&0xfffff));
  vmx(APM1,2,c0+256*c1);
  return 0;
}
void block(int a,int b) {
   info=a;
}
// main is called only once after VM init.
int main() { 
  int i,x;

  vms( 2,3,0,1,5,3,10,14+1,1,14,0,0,1,0,0,0,0,0);
  vmi(ST,0,144,0,0);
  vmi(SMC,0,256,1023,0);
  vmi(SMC,1,256*256,1023,0);
  vmi(SK,0,0,0,0);
  vmi(RCM,0,1024,0,0); //RCM(0) mem/4
  vmi(RCM,1,1024,0,0); //RCM(1) mem/4 400000 4194304/4096=1024
  vmi(RCM,2,2048,0,0); //RCM(2) mem/2 800000 8388608/4096=2048
  vmi(CM,0,32*4096,9,0);  //CM(0) mem*32, 9 contexts //normal
  vmi(CM,1,4096/2,3,0);  //CM(1) mem/2, 3 contexts  //dictance
  vmi(CM,2,1*4096,6,0);   //indirect 1000000 /4096=4096
  vmi(CM,3,32*4096,31+5+1+4+1,0); //wordmodel
  vmi(CM,4,2*4096,48-5-4,0);  //sparse
  vmi(CM,5,4096/2 ,3,0); //record
  vmi(CM,6,4096/2,3,0);  //record
  vmi(CM,7,1*4096,3,0);   //record
  vmi(CM,8,2*4096,3,0);   //record
  vmi(CM,9,4096/2,10,0); //nest
  //vmi(CM,10,1*4096,12,0); //exe
  for (i=0;i<5;i++)   
      vmi(SCM,i,16,0,0);
  //vmi(SCM,5,17,0,0);
  vmi(MX,0,m_s[0]+256*m_e[0]+0x1000000*m_m[0], 264,0);
  vmi(MX,1,m_s[1]+256*m_e[1]+0x1000000*m_m[1], 256,0);
  vmi(MX,2,m_s[2]+256*m_e[2]+0x1000000*m_m[2], 256,0);
  vmi(MX,3,m_s[3]+256*m_e[3]+0x1000000*m_m[3], 256,0);
  vmi(MX,4,m_s[4]+256*m_e[4]+0x1000000*m_m[4], 256,0);
  vmi(MX,5,m_s[5]+256*m_e[5]+0x1000000*m_m[5],2048,0);
  vmi(MX,6,m_s[6]+256*m_e[6]+0x1000000*m_m[6],2048,0);  
  vmi(MX,7,m_s[7]+256*m_e[7]+0x1000000*m_m[7],1536,0);
  vmi(MX,8,m_s[8]+256*m_e[8]+0x1000000*m_m[8],2048,0);
  vmi(MX,9,m_s[9]+256*m_e[9]+0x1000000*m_m[9],  64,0);
  vmi(MX,10,m_s[10]+256*m_e[10]+0x1000000*m_m[10],4096,0);
  vmi(MX,11,m_s[11]+256*m_e[11]+0x1000000*m_m[11],2048,0);
  vmi(MX,12,m_s[12]+256*m_e[12]+0x1000000*m_m[12], 512,0);
  vmi(MX,13,m_s[13]+256*m_e[13]+0x1000000*m_m[13], 352,0); 
  for (i=0;i<14;i++)   
    vmi(MM,i,0,i,1);
  vmi(MX,14,8+256*m_e[14]+0x1000000*m_m[14], 1,1); 
  vmi(APM1,0,0x1000,7,14);  //15
  vmi(APM1,1,0x10000,7,14); //16
  vmi(APM1,2,0x10000,7,15); //17
  vmi(AVG,0,1|(1<<8),0,16+17*256); 

  // calc log table
    x=14155776;
    for (i=2; i<65536; ++i) {
        x=(x+(774541002/((i<<1)-1)));  // numerator is 2^29/ln 2
        il[i]=x>>24;
    }
}
