// Model for text

enum {SMC=1,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM,SK};
int t[14]={},t1[256]={}; //  ={} - let VM to alloc memory and set values to 0
int pos00,pos20,posnl,info;
short t2[0x10000]={};
int word0,word1,word2,word3,word4;
int nl1=-3, nl=-2,text0;
int c1,c2,c3,frstchar,words,number1,number0,spaces,wordlen,wordlen1,spafdo,numbers,keyword,firstWord;
int mask,m1mask,m2mask,Misses,pr;
int rlen=2, rlen1=3, rlen2=4, rlen3=5,rlenl;  // run length and 2 candidates
int rcount1, rcount2,rcount3;  // candidate counts
int cpos1[256]={},cpos2[256]={},cpos3[256]={},cpos4[256]={},wpos1[0x10000]={};
int ic, bc, pc,vc, qc, lvc, wc,f4,w4,w5,tt,x1,x4,x5;
int mpw[16]= { 4,4,3,2,2,2,1,1,1,1,1,1,0,0,0,0 };
int mtt[16]= { 0,0,1,2,3,4,5,5,6,6,6,6,7,7,7,7 };

int primes[14]={ 0, 257,251,241,239,233,229,227,223,211,199,197,193,191 };
int il[65536]={};
// tuned on dickens
int m_e[9]={574, 275, 344, 17, 94, 287, 282, 359, 14}; // mixer error
int m_s[9]={2, 16, 35, 28, 12, 30, 31, 29, 5};// mixer shift
int m_m[9]={22, 25, 16, 36, 27, 22, 26, 26, 27};// mixer error mul
int c_r[21]={4, 3, 4, 2, 2, 7, 2, 6, 2, 2, 4, 4, 5, 3, 4, 4, 4, 4, 4, 4, 4};// contextmap run mul
int c_s[21]={34, 37, 43, 33, 33, 34, 39, 32, 30, 37, 35, 38, 34, 40, 37, 32, 35, 31, 37, 36, 36};// contextmap pr mul

  int MAXLEN=2047; // longest allowed match + 1
  int tm[0x100000]={};    // hash table of pointers to contexts
  int h;      // hash of last 7 bytes
  int ptr;    // points to next byte of match if any
  int len;    // length of match, or 0 if no match
  int mm1,mm3;
  int match,ord;
char buffer[0x400000]={};
enum {BMASK=0x3FFFFF};
int  pos;
enum Flags {
    selOther    = 0,
    selSpace    = 1,
    selWord     = 2,
    selNumber   = 3,
    selData     = 4,
    selPunct    = 5,
    selNL       = 6,
    selTFWord   = 7
};
enum WText {
    fUpper     = 1,
    fEscape    = 3,
};
int oState, wtype;
int nState=-1;
int buf(int i){
    return buffer[(pos-i)&BMASK];
}
int bufr(int i){
    return buffer[i&BMASK];
}
//some custom functions and stuff :)
int min(int a, int b) {return a<b?a:b;}
int max(int a, int b) {return a<b?b:a;}
int hash5(int a, int b, int c , int d, int e) {
  int h;
  h=a*200002979+b*30005491+c*50004239+d*70004807+e*110002499;
  return h^h>>9^a>>2^b>>3^c>>4^d>>5^e>>6;
}
int hash4(int a, int b, int c , int d) {
  int h;
  h=a*200002979+b*30005491+c*50004239+d*70004807;//+e*110002499u;
  return h^h>>9^a>>2^b>>3^c>>4^d>>5;
}
int hash3(int a, int b, int c) {
  int h;
  h=a*110002499+b*30005491+c*50004239; //+d*70004807u+e*110002499u;
  return h^h>>9^a>>3^b>>3^c>>4;
}
int llog(int x) {
  if (x>=0x1000000 || x&0x80000000)  return 256+il[x>>16];
  else if (x>=0x10000) return 128+il[x>>8];
  else  return il[x];
}
int matchMod(int y,int bpos){  
    if (bpos==0){
        //update match
        h=(h*997*8+buf(1)+1)&0xfffff;  // update context hash
            if (len>3) len=len+(len<MAXLEN), ++ptr;
            else {  // find match
                len=1;
                ptr=tm[h];
                if (ptr && (pos-ptr)<0x400000)
                while (buf(len+1)==bufr(ptr-len-1) && len<MAXLEN) ++len;
            }
            tm[h]=pos;  // update hash table
                //if (len>3 ) printf("pos=%d len=%d ptr=%d\n", pos, len, ptr);
    }
    // predict match
    if (len && buf(1)==bufr(ptr-1)){
        match=(bufr(ptr)>>(7-bpos))&1;
        match= (match*2-1)*8;
        vmx(SK,0,match*il[len]);
    }else {vmx(SK,0,0);len=0;}
    return len;
  }

// update is called in VM after every bit
int update(int y,int c0,int bpos,int c4,int pr){
  int i;
  int d,c;
  int col,h,above;
  int fl,matched,r,vv,ismatch,xi,f1;
  if (bpos== 0){
        c1=c4&0xff;
        buffer[pos&BMASK]=c1;
        pos++;
     c2= buf(2), c3= buf(3);
    if(c1=='.' || c1=='?' || c1=='=' || c1=='!' || c1==')' || c1=='}'|| c1==';'|| c1=='>') {
        w5=(w5<<8)|0x3ff;
        x5=(x5<<8)+c1;
        f4=(f4&0xfffffff0)+2;wtype=(wtype<<3) +selPunct;
        if(c1!='!' && c1!='?') w4=w4|12,wtype=(wtype&0xfffffff8);
        if(c1!='!') c2='.', tt=(tt&0xfffffff8)+4;
    }else if ( c1 == '\n' ) {
        tt=words=0xfffffff8;
        w4 =w4| 0x3C;wtype=(wtype<<3);
        w5 =w5| 0xc;
    }
    h=0;c2= buf(2);
    if(c2=='.'||c2=='?'||c2=='='||c2=='!'||c2==')'|| c2=='}'|| c2==';'|| c2=='>') { if (c1!=c2 && buf(3)!=c2 ) h=13, x4=x4*256+c2; }

    for (i=h; i>0; --i)  // update order 0-11 context hashes
      t[i]=t[i-1]*primes[i];
    x4=x4*256+c1;x5=x5*256+c1;
    f4=f4<<4|(c1>>4);
    w4=w4<<2|mpw[c1>>4];
    w5=w5<<2|mpw[c1>>4];
    tt=tt<<3|mtt[c1>>4];
    //normal
    for (i=13; i>0; --i)  // update order 0-11 context hashes
    t[i]=t[i-1]*primes[i]+c1;
    xi=0;
    for (i=1; i<6; ++i)
    vmx(CM, xi,t[i]); // set context to CM(0)
    vmx(RCM,0,t[7]);
    vmx(RCM,1,t[10]);
    vmx(RCM,2,t[12]);

    f1=0;
    c=c1;
    spaces=spaces<<1;
    words= words<<1;
    numbers= numbers<<1;
    if (c>='A' && c<='Z') c =c+'a'-'A';
    if (c>='a' && c<='z' || c==1 || c==2 || c>=128) {
      word0=word0*2104+c; //263*8
      text0=text0*15952+c; //997*16
      words=words|1;
      wordlen++;
      wordlen=min(wordlen,45);
      nState=selWord;
    }
    else {
        if( firstWord == 0 ) {
        firstWord = word0;
      }
          if( c == ':' || c == '=' ) {
        keyword = word0+firstWord*2104; // enwik, world95.txt, html/xml
      }
      
      if (word0) {
        word4=word3*43;
        word3=word2*47;
        word2=word1*53;
        word1=word0*83;
        word0=0;
        wordlen1= wordlen;
        wordlen=0;
      }
      if (c==32 || c==10) {
           ++spaces, nState=selSpace;
          if (c==10 ) nl1=nl, nl=pos-1,nState=selNL,firstWord=0;
      }
      else if (c=='.' || c=='!' || c=='?' || c==',' || c==';' || c==':') {spafdo=0;nState=selPunct;}
      else { ++spafdo; spafdo=min(63,spafdo); }
      if (nState!=selPunct )nState=selData;
      if( c=='.'|| c=='?') f1=1; 
    }
    if (c>='0' && c<='9') {
        number0=h2(number0, c-'0');
      nState=selNumber;
      numbers=numbers|1;
    }else if (number0) {
      number1=number0;
      number0=0;
    }
    // state
    if (c==64)  nState=7;
    if (c==fEscape) nState=0;
    // switch state if its new
    if (oState!=nState){
        wtype=(wtype<<3)+nState;
        oState=nState;
    }
    col=min(255, pos-nl), above=bufr(nl1+col); // text column context
    if (col<=2) frstchar=(col==2?min(c,96):0);
    // get real first char if it was space
    if (c!=32) {
       if (frstchar==32) {
           frstchar=min(c,96);
       }
    }
    //indirect
    xi++;
    d=c4&0xffff; 
    t1[c2]=(t1[c2]<<8)|c1;
    i=(c4>>8)&0xffff;
    t2[i]=t2[i]<<8|c1;
    i=c1|(t1[c1]<<8);
    vmx(CM, xi,((wtype>>3)<<26)|(i&0xffff));
    vmx(CM, xi,((wtype>>3)<<26)|(i&0xffffff));
    vmx(CM, xi,(i));

    vmx(CM, xi,((wtype>>3)<<26)|(i&0xff00));
    i=d|(t2[d]<<16);
    vmx(CM, xi,((wtype>>3)<<26)|(i&0xffffff));
    vmx(CM, xi,(i));
    //word
    xi++;
    vmx(CM, xi, spafdo<<8| (wtype&0x1FF));
    vmx(CM, xi,h2(frstchar, c));
    vmx(CM, xi,h2(col, frstchar));
    vmx(CM, xi,(spaces<<24)|(numbers&255)<<24| (words&255)<<8|(wtype&0x3f));
    vmx(CM, xi,h2(wordlen1,col));
    vmx(CM, xi,(tt&0x1fffff)<<9|frstchar);
    h=word0*271+c1;
    vmx(CM, xi,h);
    vmx(CM, xi,text0&0xffffff);
    vmx(CM, xi,text0&0xfffff);
   // vmx(CM, xi,(tt&0x1fffff)<<9|frstchar );
    
    vmx(CM, xi,((wtype& 0x7)<<16)+((tt& 0x38) << 6)+ c1);
    vmx(CM, xi,((wtype& 0xfff)<<12) |(tt& 0xfff));
    vmx(CM, xi,(wtype<<17)+ d );
    vmx(CM, xi,((wtype>>3)<<26)|c1|c3<<8|buf(5)<<16);
    vmx(CM, xi,((wtype>>3)<<26)|c2|buf(4)<<8|buf(6)<<16);

    // Text column models
    vmx(CM, xi,col<<16|(tt & 0x3F)<<8|above);
    vmx(CM, xi,c1<<8|above);
    vmx(CM, xi,col<<8|c1);
    vmx(CM, xi,col);//*(c==32)
    vmx(CM, xi,(wtype<<3)| tt&7);
    
    vmx(CM, xi,((wtype>>3)<<7)|d);
    vmx(CM, xi,w4&15); 
    vmx(CM, xi,(w4&63)*128+(5<<17));
    vmx(CM, xi,d<<9|frstchar);
    
    vmx(CM, xi,(words&0x1ffff)|((wtype>>3)<<26));
    vmx(CM, xi,(f4&0xffff)<<11| frstchar);
    vmx(CM, xi,h+keyword);
        vmx(CM, xi,number0+ word2);
    vmx(CM, xi,number0+ word1);
    vmx(CM, xi,number0+ number1);
    vmx(CM, xi,word0+number1);
     vmx(CM, xi,h+ word2*71+firstWord*89);

    //sparse
    xi++;
    vmx(CM, xi,((wtype>>3)<<16)|c1|buf(5)<<8);
    vmx(CM, xi,((wtype>>3)<<16)|c1|buf(6)<<8);
    vmx(CM, xi,((wtype>>3)<<16)|c3|buf(6)<<8);
    vmx(CM, xi,((wtype>>3)<<16)|buf(4)|buf(8)<<8);

    vmx(CM, xi,w4&0xf0f0f0ff);
    vmx(CM, xi,( w4&63)*128+(5<<17)); 
    vmx(CM, xi, spafdo*8*(( w4&3)==1));
vmx(CM, xi,col<<16|(c1)<<8|above);
    vmx(SCM, 0, words&127);
    vmx(SCM, 1,( words&12)*16+( w4&12)*4+( f4&0xf));
    vmx(SCM, 2, w4&15);
    vmx(SCM, 3, spafdo*(( w4&3)==1));
    vmx(SCM, 4, frstchar);

    //record
    r= pos-cpos1[c1];
    if (r>1 ){
      if (((r==cpos1[c1]-cpos2[c1])|| (r==cpos2[c1]-cpos3[c1]) || (r==cpos3[c1]-cpos4[c1])) && (r>10 || ((c1==buf(r*5+1)) && c1==buf(r*6+1)))) {
        if (r==rlen1) ++rcount1;
        else if (r==rlen2) ++rcount2;
        else if (r==rlen3) ++rcount3;
        else if (rcount1>rcount2) rlen2=r, rcount2=1;
        else if (rcount2>rcount3) rlen3=r, rcount3=1;
        else rlen1=r, rcount1=1;
      }
    }
    if (rcount1>12 && rlen!=rlen1 && rlenl*2!=rlen1) rlenl=rlen=rlen1, rcount1=rcount2=rcount3=0;
    if (rcount2>18 && rlen!=rlen2 && rlenl*2!=rlen2) rlenl=rlen,rlen=rlen2, rcount1=rcount2=rcount3=0;
    if (rcount3>24 && rlen!=rlen3 && rlenl*2!=rlen3) rlenl=rlen,rlen=rlen3, rcount1=rcount2=rcount3=0;
    // Set 2 dimensional contexts
    xi++;
    vmx(CM, xi,(c1<<8)| (min(255,  pos-cpos1[c1])>>2));
    vmx(CM, xi,(d<<9)| llog(  pos-wpos1[d])>>2);
    vmx(CM, xi,rlen|(buf(rlen)<<10)|(buf(rlen*2)<<18));
    xi++;
    vmx(CM,xi,d|(rlen<<8));
    vmx(CM,xi,c2|(rlen<<16));
    vmx(CM,xi,c1|(rlen<<8));
    xi++;
    vmx(CM,xi,(c1<<8)|min(255,  pos-cpos1[c1]));
    vmx(CM,xi,(c1<<17)|(c2<<9)|llog( pos-wpos1[d])>>2);
    col= pos%rlen;
    x1 = min(0x1F,col/max(1,rlen/32));
    vmx(CM,xi,(c1<<8)|buf(rlen));
    xi++;
    vmx(CM,xi,rlen|(buf(rlen)<<10)|(col<<18));
    vmx(CM,xi,rlen|(c1<<10)|(col<<18));
    vmx(CM,xi,col|(rlen<<12));
    // update last context positions
    cpos4[c1]=cpos3[c1];
    cpos3[c1]=cpos2[c1];
    cpos2[c1]=cpos1[c1];
    cpos1[c1]= pos;
    wpos1[d]= pos;

    //nest
    xi++;
    matched=1;
    vv=0;
    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') vv = 1; else
    if (c >= 'a' && c <= 'z'|| c>128) vv = 2; else
    if (c == ' ' || c == '.' || c == ',' || c == '!' || c == '?' || c == '\n') vv = 3; else
    if (c >= '0' && c <= '9') vv = 4; else
    if (c == 3) vv = 5; else
    if (c == '\'') vv = 6; else vv=(c1&32)?7:0;
    vc = (vc << 3) | vv;
    if (vv != lvc) {
      wc = (wc << 3) | vv;
      lvc = vv;
    }
    if (c1==' ')  qc = 0;
    else if (c1=='(')  ic  =ic+ 513;
    else if (c1== ')') ic  =ic- 513;
    else if (c1== '[') ic  = ic+17;
    else if (c1== ']') ic  =ic- 17; 
    else if (c1== '<') ic  =ic+ 23, qc  = qc+34;
    else if (c1== '>') ic  =ic- 23, qc  = qc/5;
    else if (c1== ':') pc = 20;
    else if (c1== '{') ic  =ic+ 22;
    else if (c1== '}') ic  =ic- 22;
    else if (c1== '|') pc  =pc+ 223;
    else if (c1== '"') pc  =pc+ 0x40;
    else if (c1== '\'') pc  =pc+ 0x42;
    else if (c1== '\n') pc = qc = 0;
    else if (c1== '.') pc = 0;
    else if (c1== '!') pc = 0;
    else if (c1== '?') pc = 0;
    else if (c1== '#') pc  =pc+ 0x08;
    else if (c1== '%') pc  =pc+ 0x76;
    else if (c1== '$') pc  =pc+ 0x45;
    else if (c1== '*') pc  =pc+ 0x35;
    else if (c1== '-') pc  =pc+ 0x3;
    else if (c1== '@') pc  =pc+ 0x72;
    else if (c1== '&') qc  =pc+ 0x12;
    else if (c1== ';') qc  =qc/ 3;
    else if (c1== '\\') pc  =pc+ 0x29;
    else if (c1== '/') {pc  =pc+ 0x11;
      if (c2 == '<') qc  =qc+ 74;
    }
    else if (c1== '=') pc  =pc+ 87;
    else matched = 0;

    if (matched) bc = 0; else bc  =bc+ 1;
    if (bc > 300) bc = ic = pc = qc = 0;
    vmx(CM,xi,373*ic+ 7*word0);
    vmx(CM,xi,(3*vc+77*pc+373*ic+qc)&0xffff);
    vmx(CM,xi,(31*vc+27*pc+281*qc)&0xffff);
    vmx(CM,xi,(13*vc+271*ic+qc+bc)&0xffff);
    vmx(CM,xi,(17*pc+7*ic)&0xffff);
    vmx(CM,xi,(13*vc+ic)&0xffff);
    vmx(CM,xi,(vc/3+pc)&0xffff);
    vmx(CM,xi,(7*wc+qc)&0xffff);
    vmx(CM,xi,(vc&0xffff)|(( f4&0xf)<<16));
    vmx(CM,xi,((3*pc)&0xffff)|(( f4&0xf)<<16));
    vmx(CM,xi,(ic&0xffff)|(( f4&0xf)<<16));

    xi++;
    vmx(CM,xi,0);

    xi++;
    vmx(CM,xi,x4&0x00ff00ff);
    vmx(CM,xi,x4&0xff0000ff);
    vmx(CM,xi,x4&0x00ffff00);
    vmx(CM,xi,c4&0xff00ff00);

    xi++;
    vmx(CM, xi,word0);
    vmx(CM, xi,h+word1);
    vmx(CM, xi,h+word2);
    vmx(CM, xi,h+word3);
    vmx(CM, xi,h+word4);

    xi++;
    h=w4<<6;
    vmx(CM, xi,c+(h&0xffffff00));
    vmx(CM, xi,c+(h&0x00ffff00)+((wtype>>3)<<26));
    vmx(CM, xi,c+(h&0x0000ff00)+((wtype>>3)<<26));
    h=h<<6;
    vmx(CM, xi,d+(h&0xffff0000));
    vmx(CM, xi,d+(h&0x00ff0000));
    h=h<<6;
    vmx(CM, xi,c4&0xfffffff+(h&0xff000000));

    xi++;
    h=word0*271+c1;
    vmx(CM, xi,  word0*91+word1*89);
    //vmx(CM, xi,h+word1*79+word2*71);
    //vmx(CM, xi,h+word1*73+word3*61);
    //vmx(CM, xi,h+word2*67+word3*59);
    xi++;
    vmx(CM, xi,  w4);
    xi++;
    vmx(CM, xi,h+word2*67+word3*59);
    xi++;
    vmx(CM, xi,h+word1*73+word3*61);
    xi++;
    vmx(CM, xi,h+word1*79+word2*71);
    xi++;
    vmx(CM, xi,t[6]);
    xi++;
    vmx(CM, xi,t[8]);
    xi++;
    vmx(CM, xi,t[13]);

    if (f1) {
        word4=word3*31;
        word3=word2*37;
        word2=word1*41;
        word1='.';
    }
  }
  ismatch=matchMod( y, bpos);
  if (ismatch)ord=3+ (len>=5) +(len>=8)+(len>=12)+(len>=8);else ord=0;
  vmx(MX,0,c1+8);
  vmx(MX,1,c0);
  vmx(MX,2,c2+(wtype&3)*256);
  vmx(MX,3,il[(ismatch)]);
  vmx(MX,4,ord*256+( w4&240)+( c3>>4));
  d= c0<<(8- bpos);
  vmx(MX,5,bpos*256+(((( words<< bpos)&255)>> bpos)|(d&255)));
  if ( bpos){
     c=c0<<(8-bpos); if (bpos==1)c=c+16 * ((wtype>>0) & 4);
     c=(min(bpos,5))*256+(tt&63)+(c&192);
  }
  else c=((wtype>>0)&12)*16+(tt&63);
  
  vmx(MX,6,c);
  vmx(MX,7,(wtype&3)*8+bpos);
  Misses=(Misses<<1)|((pr>>11)!=y);
  vmx(APM1,0,(c0<<4)|(Misses&0xF));
  vmx(APM1,1,hash3(c0,w5&0xfffff,((wtype&0xFFF)<<16)|(tt&0x3F)));
  vmx(APM1,2,(c0*32)^hash3(wtype&0x1FF,x5&0x80ffff,frstchar));
  return 0;
}
void block(int a,int b) {
   info=a;
}
// main is called only once after VM init.
int main() { 
int i,x;
  //SMC,APM1,DS,AVG,SCM,RCM,CM,MX,ST,MM,DHS,SM
  vms( 0,3,0,2,5,3,21,8,1,8,0,0,1,0);
  vmi(ST,0,144,0,0);
  vmi(SK,0,0,0,0);
  vmi(RCM,0,1024,0,0); //RCM(0) mem/4
  vmi(RCM,1,1024,0,0); //RCM(1) mem/4 400000 4194304/4096=1024
  vmi(RCM,2,2048,0,0); //RCM(2) mem/2 800000 8388608/4096=2048
  vmi(CM,0,8*4096,5+c_s[0]*0x10000+256*c_r[0],0);  //CM(0) mem*32, 9 contexts //normal
  vmi(CM,1,1*4096,6+c_s[1]*0x10000+256*c_r[1],0);   //indirect 1000000 /4096=4096
  vmi(CM,2,4*4096,32+ c_s[2]*0x10000+256*c_r[2],0); //wordmodel
  vmi(CM,3,2*4096,8+c_s[3]*0x10000+256*c_r[3],0);  //sparse
  vmi(CM,4,4096/2,3+c_s[4]*0x10000+256*c_r[4],0); //record
  vmi(CM,5,4096/2,3+c_s[5]*0x10000+256*c_r[5],0);  //record
  vmi(CM,6,1*4096,3+c_s[6]*0x10000+256*c_r[6],0);   //record
  vmi(CM,7,2*4096,3+c_s[7]*0x10000+256*c_r[7],0);   //record
  vmi(CM,8,4096/2,11+c_s[8]*0x10000+256*c_r[8],0); //nest
  vmi(CM,9,4096/4,1+c_s[9]*0x10000+256*c_r[9],0);
  vmi(CM,10,4096,4+c_s[10]*0x10000+256*c_r[10],0);
  vmi(CM,11,16*4096,5+c_s[11]*0x10000+256*c_r[11],0);// wordX
  vmi(CM,12,4*4096,6+c_s[12]*0x10000+256*c_r[12],0);// word
  vmi(CM,13,2*4096,1+c_s[13]*0x10000+256*c_r[13],0);// words
  vmi(CM,14,  4096,1+c_s[14]*0x10000+256*c_r[14],0);// w4
  vmi(CM,15,2*4096,1+c_s[15]*0x10000+256*c_r[15],0);// w4
  vmi(CM,16,2*4096,1+c_s[16]*0x10000+256*c_r[16],0);// w4
  vmi(CM,17,2*4096,1+c_s[17]*0x10000+256*c_r[17],0);// w4
  vmi(CM,18,8*4096,1+c_s[18]*0x10000+256*c_r[18],0);// o6
  vmi(CM,19,8*4096,1+c_s[19]*0x10000+256*c_r[19],0);// o8
  vmi(CM,20,8*4096,1+c_s[20]*0x10000+256*c_r[20],0);// o13
  for (i=0;i<5;i++)
      vmi(SCM,i,16,0,0);
  vmi(MX,0,m_s[0]+256*m_e[0]+0x1000000*m_m[0], 264,0);
  vmi(MX,1,m_s[1]+256*m_e[1]+0x1000000*m_m[1], 256,0);
  vmi(MX,2,m_s[2]+256*m_e[2]+0x1000000*m_m[2], 1024,0);
  vmi(MX,3,m_s[3]+256*m_e[3]+0x1000000*m_m[3], 256,0);
  vmi(MX,4,m_s[4]+256*m_e[4]+0x1000000*m_m[4],2048,0);
  vmi(MX,5,m_s[5]+256*m_e[5]+0x1000000*m_m[5],2048,0);
  vmi(MX,6,m_s[6]+256*m_e[6]+0x1000000*m_m[6],1536,0);
  vmi(MX,7,m_s[7]+256*m_e[7]+0x1000000*m_m[7],8+24,0);
  for (i=0;i<8;i++)   
    vmi(MM,i,0,i,1);
  vmi(MX,8,m_s[8]+256*m_e[8]+0x1000000*m_m[8], 1,1);
  vmi(APM1,0,0x1000,7,8);  //15
  vmi(APM1,1,0x80000,7,8); //16
  vmi(APM1,2,0x40000,7,9); //17
  vmi(AVG,0,0,9,10);
  vmi(AVG,1,0,8,11);
  // calc log table
    x=14155776;
    for (i=2; i<65536; ++i) {
        x=(x+(774541002/((i<<1)-1)));  // numerator is 2^29/ln 2
        il[i]=x>>24;
    }
}